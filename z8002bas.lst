 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 1 - 2023/10/12 18時22分27秒


    1/       0 :                        ;	Z8002 NASCOM BASIC
    2/       0 :                        ;	Converted source code from 8080/Z80 to Z8002
    3/       0 :                        ;	Assembler: Macro Assembler 1.42
    4/       0 :                        ;	Converted by Satoshi Okue
    5/       0 :                        ;	2023/10/12
    6/       0 :                        ;
    7/       0 :                        ;	EMUBASIC based on GRANT's BASIC
    8/       0 :                        ;	TARGET: EMUZ80
    9/       0 :                        ;	ASSEMBLER: ARCPIT XZ80.EXE
   10/       0 :                        ;
   11/       0 :                        ;	START UP ROUTINE
   12/       0 :                        ;	VERSION 1.0, 2022/02/15
   13/       0 :                        ;	WRITTEN by TETSUYA SUZUKI
   14/       0 :                        ;
   15/       0 :                        
   16/   0 :                            	CPU	Z8002
   17/   0 :                            	SUPMODE	ON
   18/   0 :                            
   19/   0 :                            ;;; Functions
   20/   0 :                            low	function	x,(x & 255)
   21/   0 :                            high	function	x,(x >> 8)
   22/   0 :                            
   23/   0 :                            ;	MEMORY ASIGN
   24/   0 : =0H                        ROMTOP	EQU	0000H
   25/   0 : =8000H                     RAMTOP	EQU	8000H
   26/   0 : =1000H                     RAMSIZ	EQU	1000H
   27/   0 : =80EDH                     TSTACK	EQU	80EDH
   28/   0 :                            ;
   29/   0 :                            ;	SCC REGISTER ADDRESS
   30/   0 : =7H                        SCCAD	EQU	0007H	; SCC DATA REGISTOR
   31/   0 : =5H                        SCCAC	EQU	0005H	; SCC CONTROL REGISTOR
   32/   0 : =44H                       WR4_V:	EQU	44H	; x16, Stop Bit 1, No-Parity
   33/   0 : =0C0H                      WR3_V:	EQU	0C0H	; 8 Bit, Enable
   34/   0 : =0E2H                      WR5_V:	EQU	0E2H	; DTR, 8 Bit, RTS
   35/   0 : =50H                       WR11_V:	EQU	50H	; Use BR output (for both Tx and Rx)
   36/   0 : =0BH                       BRGTC:	EQU	11	; Baud Rate Generator Time Contant
   37/   0 :                            ;
   38/   0 :                            ;	Reset Vector
   39/   0 : 00 00                      	DW	0000H	; Dummy
   40/   2 : 40 00                      	DW	4000H	; FCW: System mode
   41/   4 : 00 06                      	DW	START	; Initial PC
   42/   6 :                            ;
   43/   6 :                            START:
   44/   6 : 7C00                       	DI	VI,NVI
   45/   8 : 210F 80ED                  	LD	R15,#TSTACK
   46/   C : 5E08 0062                  	JP	COLD
   47/  10 :                            ;
   48/  10 :                            SCCINIT:
   49/  10 : 2101 0005                  	LD	R1,#SCCAC
   50/  14 : 7602 0022                  	LDA	R2,SCCTAB
   51/  18 : 2103 0015                  	LD	R3,#(SCCTABE-SCCTAB)
   52/  1C : 3A22 0310                  	OTIRB	@R1,@R2,R3
   53/  20 : 9E08                       	RET
   54/  22 :                            ;
   55/  22 :                            SCCTAB:
   56/  22 : 00                         	DB	00H			; Dummy
   57/  23 : 09 C0                      	DB	09H, 0C0H		; WR9: Force Hardware Reset
   58/  25 : 04 44                      	DB	04H, WR4_V		; WR4
   59/  27 : 03 C0                      	DB	03H, WR3_V		; WR3
   60/  29 : 05 E2                      	DB	05H, WR5_V		; WR5
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 2 - 2023/10/12 18時22分27秒


   61/  2B : 0B 50                      	DB	0BH, WR11_V		; WR11
   62/  2D : 0C 0B                      	DB	0CH, low(BRGTC)		; WR12
   63/  2F : 0D 00                      	DB	0DH, high(BRGTC)	; WR13
   64/  31 : 0E 03                      	DB	0EH, 03H		; WR14: PCLK, Enable
   65/  33 : 03 C1                      	DB	03H, WR3_V|01H		; WR3: Rx Enable
   66/  35 : 05 EA                      	DB	05H, WR5_V|08H		; WR5: Tx Enable
   67/  37 :                            SCCTABE:
   68/  37 :                            	ALIGN	2
   69/  38 :                            ;
   70/  38 :                            CONIN:
   71/  38 : 3A84 0005                  	INB	RL0,SCCAC
   72/  3C : 0608 0101                  	ANDB	RL0,#01H
   73/  40 : E6FB                       	JR	Z,CONIN
   74/  42 : 3A04 0007                  	INB	RH0,SCCAD
   75/  46 : 9E08                       	RET
   76/  48 :                            ;
   77/  48 :                            CONST:
   78/  48 : 3A04 0005                  	INB	RH0,SCCAC
   79/  4C : 0600 0101                  	ANDB	RH0,#01H
   80/  50 : 9E08                       	RET
   81/  52 :                            ;
   82/  52 :                            CONOUT:
   83/  52 : 3A84 0005                  	INB	RL0,SCCAC
   84/  56 : 0608 0404                  	ANDB	RL0,#04H
   85/  5A : E6FB                       	JR	Z,CONOUT
   86/  5C : 3A06 0007                  	OUTB	SCCAD,RH0
   87/  60 : 9E08                       	RET
   88/  62 :                            ;
   89/  62 :                            ;==================================================================================
   90/  62 :                            ; The updates to the original BASIC within this file are copyright Grant Searle
   91/  62 :                            ;
   92/  62 :                            ; You have permission to use this for NON COMMERCIAL USE ONLY
   93/  62 :                            ; If you wish to use it elsewhere, please include an acknowledgement to myself.
   94/  62 :                            ;
   95/  62 :                            ; http://searle.hostei.com/grant/index.html
   96/  62 :                            ;
   97/  62 :                            ; eMail: home.micros01@btinternet.com
   98/  62 :                            ;
   99/  62 :                            ; If the above don't work, please perform an Internet search to see if I have
  100/  62 :                            ; updated the web page hosting service.
  101/  62 :                            ;
  102/  62 :                            ;==================================================================================
  103/  62 :                            ;
  104/  62 :                            ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
  105/  62 :                            ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
  106/  62 :                            ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
  107/  62 :                            ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
  108/  62 :                            ; the original ROM code (checksum A934H). PA
  109/  62 :                            ;
  110/  62 :                            ; GENERAL EQUATES
  111/  62 :                            ;
  112/  62 : =3H                        CTRLC	EQU	03H		; Control "C"
  113/  62 : =7H                        CTRLG	EQU	07H		; Control "G"
  114/  62 : =8H                        BKSP	EQU	08H		; Back space
  115/  62 : =0AH                       LF	EQU	0AH		; Line feed
  116/  62 : =0CH                       CS	EQU	0CH		; Clear screen
  117/  62 : =0DH                       CR	EQU	0DH		; Carriage return
  118/  62 : =0FH                       CTRLO	EQU	0FH		; Control "O"
  119/  62 : =11H                       CTRLQ	EQU	11H		; Control "Q"
  120/  62 : =12H                       CTRLR	EQU	12H		; Control "R"
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 3 - 2023/10/12 18時22分27秒


  121/  62 : =13H                       CTRLS	EQU	13H		; Control "S"
  122/  62 : =15H                       CTRLU	EQU	15H		; Control "U"
  123/  62 : =1BH                       ESC	EQU	1BH		; Escape
  124/  62 : =7FH                       DEL	EQU	7FH		; Delete
  125/  62 :                            ;
  126/  62 :                            ; BASIC WORK SPACE LOCATIONS
  127/  62 :                            ;
  128/  62 : =8046H                     WRKSPC	EQU	8046H		; BASIC Work space
  129/  62 : =804AH                     USR	EQU	WRKSPC+04H	; "USR (x)" jump
  130/  62 : =804EH                     OUTSUB	EQU	WRKSPC+08H	; "OUT p,n"
  131/  62 : =8051H                     OTPORT	EQU	WRKSPC+0BH	; Port (p)
  132/  62 : =8054H                     DIVSUP	EQU	WRKSPC+0EH	; Division support routine
  133/  62 : =8055H                     DIV1	EQU	WRKSPC+0FH	; <- Values
  134/  62 : =805DH                     DIV2	EQU	WRKSPC+17H	; <- to
  135/  62 : =8065H                     DIV3	EQU	WRKSPC+1FH	; <- be
  136/  62 : =806BH                     DIV4	EQU	WRKSPC+25H	; <- inserted
  137/  62 : =806EH                     SEED	EQU	WRKSPC+28H	; Random number seed
  138/  62 : =8092H                     LSTRND	EQU	WRKSPC+4CH	; Last random number
  139/  62 : =8096H                     INPSUB	EQU	WRKSPC+50H	; #INP (x)" Routine
  140/  62 : =8099H                     INPORT	EQU	WRKSPC+53H	; PORT (x)
  141/  62 : =809CH                     NULLS	EQU	WRKSPC+56H	; b, Number of nulls
  142/  62 : =809DH                     LWIDTH	EQU	WRKSPC+57H	; b, Terminal width
  143/  62 : =809EH                     COMMAN	EQU	WRKSPC+58H	; b, Width for commas
  144/  62 : =809FH                     NULFLG	EQU	WRKSPC+59H	; b, Null after input byte flag
  145/  62 : =80A0H                     CTLOFG	EQU	WRKSPC+5AH	; b, Control "O" flag
  146/  62 : =80A2H                     LINESC	EQU	WRKSPC+5CH	; w, Lines counter
  147/  62 : =80A4H                     LINESN	EQU	WRKSPC+5EH	; w, Lines number
  148/  62 : =80A6H                     CHKSUM	EQU	WRKSPC+60H	; w, Array load/save check sum
  149/  62 : =80A8H                     NMIFLG	EQU	WRKSPC+62H	; b, Flag for NMI break routine
  150/  62 : =80A9H                     BRKFLG	EQU	WRKSPC+63H	; b, Break flag
  151/  62 : =80AAH                     RINPUT	EQU	WRKSPC+64H	; Input reflection
  152/  62 : =80AEH                     POINT	EQU	WRKSPC+68H	; "POINT" reflection (unused)
  153/  62 : =80B2H                     PSET	EQU	WRKSPC+6CH	; "SET"	reflection
  154/  62 : =80B6H                     RESET	EQU	WRKSPC+70H	; "RESET" reflection
  155/  62 : =80BAH                     STRSPC	EQU	WRKSPC+74H	; w, Bottom of string space
  156/  62 : =80BCH                     LINEAT	EQU	WRKSPC+76H	; w, Current line number
  157/  62 : =80BEH                     BASTXT	EQU	WRKSPC+78H	; w, Pointer to start of program
  158/  62 : =80C0H                     BUFFER	EQU	WRKSPC+7AH	; 6 byte Input buffer
  159/  62 : =80C6H                     STACK	EQU	WRKSPC+80H	; Initial stack
  160/  62 : =810AH                     CURPOS	EQU	WRKSPC+0C4H	; b, Character position on line
  161/  62 :                            
  162/  62 : =810BH                     LCRFLG	EQU	WRKSPC+0C5H	; b, Locate/Create flag
  163/  62 : =810CH                     TYPE	EQU	WRKSPC+0C6H	; b, Data type flag
  164/  62 : =810DH                     DATFLG	EQU	WRKSPC+0C7H	; b, Literal statement flag
  165/  62 :                            
  166/  62 : =810EH                     LSTRAM	EQU	WRKSPC+0C8H	; w, Last available RAM
  167/  62 : =8110H                     TMSTPT	EQU	WRKSPC+0CAH	; w, Temporary string pointer
  168/  62 :                            
  169/  62 : =8112H                     TMSTPL	EQU	WRKSPC+0CCH	; 12 bytes Temporary string pool
  170/  62 : =811EH                     TMPSTR	EQU	WRKSPC+0D8H	; 4 bytes  Temporary string
  171/  62 : =8122H                     STRBOT	EQU	WRKSPC+0DCH	; w, Bottom of string space
  172/  62 : =8124H                     CUROPR	EQU	WRKSPC+0DEH	; w, Current operator in EVAL
  173/  62 : =8126H                     LOOPST	EQU	WRKSPC+0E0H	; w, First statement of loop
  174/  62 : =8128H                     DATLIN	EQU	WRKSPC+0E2H	; w, Line of current DATA item
  175/  62 : =812AH                     FORFLG	EQU	WRKSPC+0E4H	; b, "FOR" loop flag
  176/  62 : =812BH                     LSTBIN	EQU	WRKSPC+0E5H	; b, Last byte entered
  177/  62 : =812CH                     READFG	EQU	WRKSPC+0E6H	; b, Read/Input flag
  178/  62 : =812EH                     BRKLIN	EQU	WRKSPC+0E8H	; w, Line of break
  179/  62 : =8130H                     NXTOPR	EQU	WRKSPC+0EAH	; w, Next operator in EVAL
  180/  62 : =8132H                     ERRLIN	EQU	WRKSPC+0ECH	; w, Line of error
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 4 - 2023/10/12 18時22分27秒


  181/  62 : =8134H                     CONTAD	EQU	WRKSPC+0EEH	; w, Where to CONTinue
  182/  62 : =8136H                     PROGND	EQU	WRKSPC+0F0H	; w, End of program
  183/  62 : =8138H                     VAREND	EQU	WRKSPC+0F2H	; w, End of variables
  184/  62 : =813AH                     ARREND	EQU	WRKSPC+0F4H	; w, End of arrays
  185/  62 : =813CH                     NXTDAT	EQU	WRKSPC+0F6H	; w, Next data item
  186/  62 : =813EH                     FNRGNM	EQU	WRKSPC+0F8H	; w, Name of FN argument
  187/  62 : =8140H                     FNARG	EQU	WRKSPC+0FAH	; 4 byte w access / FN argument value
  188/  62 : =8144H                     FPREG	EQU	WRKSPC+0FEH	; Floating point register
  189/  62 : =8147H                     FPEXP	EQU	FPREG+3		; b, Floating point exponent
  190/  62 : =8148H                     SGNRES	EQU	WRKSPC+102H	; b, Sign of result
  191/  62 : =814AH                     PBUFF	EQU	WRKSPC+104H	; 14 byte Number print buffer
  192/  62 : =8159H                     MULVAL	EQU	WRKSPC+113H	; 3 byte b+w / Multiplier
  193/  62 : =815CH                     PROGST	EQU	WRKSPC+116H	; w, Start of program text area
  194/  62 : =81C0H                     STLOOK	EQU	WRKSPC+17AH	; Start of memory test
  195/  62 :                            ;
  196/  62 :                            ; BASIC ERROR CODE VALUES
  197/  62 :                            ;
  198/  62 : =0H                        NF	EQU	00H		; NEXT without FOR
  199/  62 : =2H                        SN	EQU	02H		; Syntax error
  200/  62 : =4H                        RG	EQU	04H		; RETURN without GOSUB
  201/  62 : =6H                        OD	EQU	06H		; Out of DATA
  202/  62 : =8H                        FC	EQU	08H		; Function call error
  203/  62 : =0AH                       OV	EQU	0AH		; Overflow
  204/  62 : =0CH                       OM	EQU	0CH		; Out of memory
  205/  62 : =0EH                       UL	EQU	0EH		; Undefined line number
  206/  62 : =10H                       BS	EQU	10H		; Bad subscript
  207/  62 : =12H                       RD	EQU	12H		; Re-DIMensioned array
  208/  62 : =14H                       DZ	EQU	14H		; Division by zero (/0)
  209/  62 : =16H                       ID	EQU	16H		; Illegal direct
  210/  62 : =18H                       TM	EQU	18H		; Type miss-match
  211/  62 : =1AH                       OS	EQU	1AH		; Out of string space
  212/  62 : =1CH                       LS	EQU	1CH		; String too long
  213/  62 : =1EH                       ST	EQU	1EH		; String formula too complex
  214/  62 : =20H                       CN	EQU	20H		; Can't CONTinue
  215/  62 : =22H                       UF	EQU	22H		; UnDEFined FN function
  216/  62 : =24H                       MO	EQU	24H		; Missing operand
  217/  62 : =26H                       HX	EQU	26H		; HEX error
  218/  62 : =28H                       BN	EQU	28H		; BIN error
  219/  62 :                            ;
  220/  62 :                            COLD:
  221/  62 : 5E08 006A                  	JP	STARTB		; Jump for cold start
  222/  66 :                            WARM:
  223/  66 : 5E08 0128                  	JP	WARMST		; Jump for warm start
  224/  6A :                            STARTB:
  225/  6A : 5E08 0072                  	JP	CSTART		; Jump to initialise
  226/  6E :                            ;
  227/  6E : 0D CA                      	DW	DEINT		; Get integer -32768 to 32767
  228/  70 : 1A DC                      	DW	ABPASS		; Return integer in AB
  229/  72 :                            ;
  230/  72 :                            CSTART:
  231/  72 : 2103 8046                  	LD	R3,#WRKSPC	; Start of workspace RAM
  232/  76 : A13F                       	LD	R15,R3		; Set up a temporary stack
  233/  78 : 5E08 3058                  	JP	INITST		; Go to initialise
  234/  7C :                            ;
  235/  7C :                            INIT:
  236/  7C : 5F00 0010                  	CALL	SCCINIT		; Initialise SCC
  237/  80 : 2102 03AC                  	LD	R2,#INITAB	; Initialise workspace
  238/  84 : C17D                       	LDB	RH1,#INITBE-INITAB+3; Bytes to copy
  239/  86 : 2103 8046                  	LD	R3,#WRKSPC	; Into workspace RAM
  240/  8A :                            COPY:
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 5 - 2023/10/12 18時22分27秒


  241/  8A : 2020                       	LDB	RH0,@R2		; Get source
  242/  8C : 2E30                       	LDB	@R3,RH0		; To destination
  243/  8E : A930                       	INC	R3		; Next destination
  244/  90 : A920                       	INC	R2		; Next source
  245/  92 : AA10                       	DECB	RH1,#1		; Count bytes
  246/  94 : 5E0E 008A                  	JP	NZ,COPY		; More to move
  247/  98 : A13F                       	LD	R15,R3		; Temporary stack
  248/  9A : 5F00 0712                  	CALL	CLREG		; Clear registers and stack
  249/  9E : 5F00 1114                  	CALL	PRCRLF		; Output CRLF
  250/  A2 :                            ;	LDB	(BUFFER+72+1),RH0	; Mark end of buffer
  251/  A2 : 6E00 8109                  	LDB	(CURPOS-1),RH0	; Mark end of buffer
  252/  A6 : 6E00 815C                  	LDB	(PROGST),RH0	; Initialise program area
  253/  AA :                            MSIZE:
  254/  AA : 2103 81C0                  	LD	R3,#STLOOK	; Point to start of RAM
  255/  AE :                            MLOOP:
  256/  AE : 8CC1                       	LDCTLB	RL4,FLAGS
  257/  B0 : A930                       	INC	R3		; Next byte
  258/  B2 : 8CC9                       	LDCTLB	FLAGS,RL4
  259/  B4 : A030                       	LDB	RH0,RH3		; Above address FFFF ?
  260/  B6 : 84B0                       	ORB	RH0,RL3
  261/  B8 : 8D83                       	RESFLG	C
  262/  BA : 5E06 00D2                  	JP	Z,SETTOP	; Yes - 64K RAM
  263/  BE : 2030                       	LDB	RH0,@R3		; Get contents
  264/  C0 : A001                       	LDB	RH1,RH0		; Save it
  265/  C2 : 8CC1                       	LDCTLB	RL4,FLAGS
  266/  C4 : 8C00                       	COMB	RH0		; Flip all bits
  267/  C6 : 8CC9                       	LDCTLB	FLAGS,RL4
  268/  C8 : 2E30                       	LDB	@R3,RH0		; Put it back
  269/  CA : 0A30                       	CPB	RH0,@R3		; RAM there if same
  270/  CC : 2E31                       	LDB	@R3,RH1		; Restore old contents
  271/  CE : 5E06 00AE                  	JP	Z,MLOOP		; If RAM - test next byte
  272/  D2 :                            ;
  273/  D2 :                            SETTOP:
  274/  D2 : 8CC1                       	LDCTLB	RL4,FLAGS
  275/  D4 :                            ;	DEC	R3,#1		; Back one byte
  276/  D4 : AB31                       	DEC	R3,#2		; Back two byte
  277/  D6 : 8CC9                       	LDCTLB	FLAGS,RL4
  278/  D8 : 2102 81BF                  	LD	R2,#STLOOK-1	; See if enough RAM
  279/  DC : 5F00 09CE                  	CALL	CPDEHL		; Compare DE with HL
  280/  E0 : 5E07 0134                  	JP	C,NEMEM		; If not enough RAM
  281/  E4 : 2102 FFCE                  	LD	R2,#0-50	; 50 Bytes string space
  282/  E8 : 6F03 810E                  	LD	(LSTRAM),R3	; Save last available RAM
  283/  EC : 8123                       	ADD	R3,R2		; Allocate string space
  284/  EE : 6F03 80BA                  	LD	(STRSPC),R3	; Save string space
  285/  F2 : 5F00 06CC                  	CALL	CLRPTR		; Clear program area
  286/  F6 : 6103 80BA                  	LD	R3,(STRSPC)	; Get end of memory
  287/  FA : 2102 FFEF                  	LD	R2,#0-17	; Offset for free bytes
  288/  FE : 8123                       	ADD	R3,R2		; Adjust HL
  289/ 100 : 2102 815C                  	LD	R2,#PROGST	; Start of program text
  290/ 104 : A0B0                       	LDB	RH0,RL3		; Get LSB
  291/ 106 : 82A0                       	SUBB	RH0,RL2		; Adjust it
  292/ 108 : A00B                       	LDB	RL3,RH0		; Re-save
  293/ 10A : A030                       	LDB	RH0,RH3		; Get MSB
  294/ 10C : B620                       	SBCB	RH0,RH2		; Adjust it
  295/ 10E : A003                       	LDB	RH3,RH0		; Re-save
  296/ 110 : 93F3                       	PUSH	@R15,R3		; Save bytes free
  297/ 112 : 2103 014F                  	LD	R3,#SIGNON	; Sign-on message
  298/ 116 : 5F00 1CDA                  	CALL	PRS		; Output string
  299/ 11A : 97F3                       	POP	R3,@R15		; Get bytes free back
  300/ 11C : 5F00 2908                  	CALL	PRNTHL		; Output amount of free memory
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 6 - 2023/10/12 18時22分27秒


  301/ 120 : 2103 0140                  	LD	R3,#BFREE	; " Bytes free" message
  302/ 124 : 5F00 1CDA                  	CALL	PRS		; Output string
  303/ 128 :                            ;
  304/ 128 :                            WARMST:
  305/ 128 : 210F 80C6                  	LD	R15,#STACK	; Temporary stack
  306/ 12C :                            BRKRET:
  307/ 12C : 5F00 0712                  	CALL	CLREG		; Clear registers and stack
  308/ 130 : 5E08 053C                  	JP	PRNTOK		; Go to get command line
  309/ 134 :                            ;
  310/ 134 :                            NEMEM:
  311/ 134 : 2103 0192                  	LD	R3,#MEMMSG	; Memory size not enough
  312/ 138 : 5F00 1CDA                  	CALL	PRS		; Print it
  313/ 13C :                            XXXXX:
  314/ 13C : 5E08 013C                  	JP	XXXXX		; Stop
  315/ 140 :                            ;
  316/ 140 :                            BFREE:
  317/ 140 : 20 42 79 74 65 73 20 66 72 	DB	" Bytes free",CR,LF,0,0
       149 : 65 65 0D 0A 00 00         
  318/ 14F :                            ;
  319/ 14F :                            SIGNON:
  320/ 14F : 5A 38 30 20 42 61 73 65 64 	DB	"Z80 Based Z8002 BASIC Ver 4.7b",CR,LF
       158 : 20 5A 38 30 30 32 20 42 41
       161 : 53 49 43 20 56 65 72 20 34
       16A : 2E 37 62 0D 0A            
  321/ 16F : 43 6F 70 79 72 69 67 68 74 	DB	"Copyright ",40,"C",41
       178 : 20 28 43 29               
  322/ 17C : 20 31 39 37 38 20 62 79 20 	DB	" 1978 by Microsoft",CR,LF,0,0
       185 : 4D 69 63 72 6F 73 6F 66 74
       18E : 0D 0A 00 00               
  323/ 192 :                            ;
  324/ 192 :                            MEMMSG:
  325/ 192 : 4D 65 6D 6F 72 79 20 73 69 	DB	"Memory size not enough",CR,LF
       19B : 7A 65 20 6E 6F 74 20 65 6E
       1A4 : 6F 75 67 68 0D 0A         
  326/ 1AA : 54 68 65 20 73 79 73 74 65 	DB	"The system is stopped.",CR,LF,0,0
       1B3 : 6D 20 69 73 20 73 74 6F 70
       1BC : 70 65 64 2E 0D 0A 00 00   
  327/ 1C4 :                            
  328/ 1C4 :                            	ALIGN	2
  329/ 1C4 :                            ;
  330/ 1C4 :                            ; FUNCTION ADDRESS TABLE
  331/ 1C4 :                            ;
  332/ 1C4 :                            FNCTAB:
  333/ 1C4 : 26 0C                      	DW	SGN
  334/ 1C6 : 27 A4                      	DW	INT
  335/ 1C8 : 26 30                      	DW	ABS
  336/ 1CA : 80 4A                      	DW	USR
  337/ 1CC : 1A A6                      	DW	FRE
  338/ 1CE : 20 FC                      	DW	INP
  339/ 1D0 : 1A EC                      	DW	POS
  340/ 1D2 : 2A F6                      	DW	SQR
  341/ 1D4 : 2C 5C                      	DW	RND
  342/ 1D6 : 23 A2                      	DW	LOG
  343/ 1D8 : 2B 82                      	DW	EXP
  344/ 1DA : 2D 1E                      	DW	COS
  345/ 1DC : 2D 26                      	DW	SIN
  346/ 1DE : 2D AE                      	DW	TAN
  347/ 1E0 : 2D CC                      	DW	ATN
  348/ 1E2 : 21 84                      	DW	PEEK
  349/ 1E4 : 2E 5A                      	DW	DEEK
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 7 - 2023/10/12 18時22分27秒


  350/ 1E6 : 80 AE                      	DW	POINT
  351/ 1E8 : 1F 8E                      	DW	LEN
  352/ 1EA : 1B FE                      	DW	STR
  353/ 1EC : 20 9A                      	DW	VAL
  354/ 1EE : 1F AA                      	DW	ASC
  355/ 1F0 : 1F CE                      	DW	CHR
  356/ 1F2 : 2E 98                      	DW	HEX
  357/ 1F4 : 2F A8                      	DW	BIN
  358/ 1F6 : 1F E6                      	DW	LEFT
  359/ 1F8 : 20 3A                      	DW	RIGHT
  360/ 1FA : 20 4A                      	DW	MID
  361/ 1FC :                            ;
  362/ 1FC :                            ; RESERVED WORD LIST
  363/ 1FC :                            ;
  364/ 1FC :                            	ALIGN	2
  365/ 1FC :                            WORDS:
  366/ 1FC : C5 4E 44                   	DB	0C5H,"ND"	; END
  367/ 1FF : C6 4F 52                   	DB	0C6H,"OR"	; FOR
  368/ 202 : CE 45 58 54                	DB	0CEH,"EXT"	; NEXT
  369/ 206 : C4 41 54 41                	DB	0C4H,"ATA"	; DATA
  370/ 20A : C9 4E 50 55 54             	DB	0C9H,"NPUT"	; INPUT
  371/ 20F : C4 49 4D                   	DB	0C4H,"IM"	; DIM
  372/ 212 : D2 45 41 44                	DB	0D2H,"EAD"	; READ
  373/ 216 : CC 45 54                   	DB	0CCH,"ET"	; LET
  374/ 219 : C7 4F 54 4F                	DB	0C7H,"OTO"	; GOTO
  375/ 21D : D2 55 4E                   	DB	0D2H,"UN"	; RUN
  376/ 220 : C9 46                      	DB	0C9H,"F"	; IF
  377/ 222 : D2 45 53 54 4F 52 45       	DB	0D2H,"ESTORE"	; RESTORE
  378/ 229 : C7 4F 53 55 42             	DB	0C7H,"OSUB"	; GOSUB
  379/ 22E : D2 45 54 55 52 4E          	DB	0D2H,"ETURN"	; RETURN
  380/ 234 : D2 45 4D                   	DB	0D2H,"EM"	; REM
  381/ 237 : D3 54 4F 50                	DB	0D3H,"TOP"	; STOP
  382/ 23B : CF 55 54                   	DB	0CFH,"UT"	; OUT
  383/ 23E : CF 4E                      	DB	0CFH,"N"	; ON
  384/ 240 : CE 55 4C 4C                	DB	0CEH,"ULL"	; NULL
  385/ 244 : D7 41 49 54                	DB	0D7H,"AIT"	; WAIT
  386/ 248 : C4 45 46                   	DB	0C4H,"EF"	; DEF
  387/ 24B : D0 4F 4B 45                	DB	0D0H,"OKE"	; POKE
  388/ 24F : C4 4F 4B 45                	DB	0C4H,"OKE"	; DOKE
  389/ 253 : D3 43 52 45 45 4E          	DB	0D3H,"CREEN"	; SCREEN
  390/ 259 : CC 49 4E 45 53             	DB	0CCH,"INES"	; LINES
  391/ 25E : C3 4C 53                   	DB	0C3H,"LS"	; CLS
  392/ 261 : D7 49 44 54 48             	DB	0D7H,"IDTH"	; WIDTH
  393/ 266 : CD 4F 4E 49 54 4F 52       	DB	0CDH,"ONITOR"	; MONITOR
  394/ 26D : D3 45 54                   	DB	0D3H,"ET"	; SET
  395/ 270 : D2 45 53 45 54             	DB	0D2H,"ESET"	; RESET
  396/ 275 : D0 52 49 4E 54             	DB	0D0H,"RINT"	; PRINT
  397/ 27A : C3 4F 4E 54                	DB	0C3H,"ONT"	; CONT
  398/ 27E : CC 49 53 54                	DB	0CCH,"IST"	; LIST
  399/ 282 : C3 4C 45 41 52             	DB	0C3H,"LEAR"	; CLEAR
  400/ 287 : C3 4C 4F 41 44             	DB	0C3H,"LOAD"	; CLOAD
  401/ 28C : C3 53 41 56 45             	DB	0C3H,"SAVE"	; CSAVE
  402/ 291 : CE 45 57                   	DB	0CEH,"EW"	; NEW
  403/ 294 :                            ;
  404/ 294 : D4 41 42 28                	DB	0D4H,"AB("	; TAB(
  405/ 298 : D4 4F                      	DB	0D4H,"O"	; TO
  406/ 29A : C6 4E                      	DB	0C6H,"N"	; FN
  407/ 29C : D3 50 43 28                	DB	0D3H,"PC("	; SPC(
  408/ 2A0 : D4 48 45 4E                	DB	0D4H,"HEN"	; THEN
  409/ 2A4 : CE 4F 54                   	DB	0CEH,"OT"	; NOT
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 8 - 2023/10/12 18時22分27秒


  410/ 2A7 : D3 54 45 50                	DB	0D3H,"TEP"	; TEP
  411/ 2AB :                            ;
  412/ 2AB : AB                         	DB	0ABH
  413/ 2AC : AD                         	DB	0ADH
  414/ 2AD : AA                         	DB	0AAH
  415/ 2AE : AF                         	DB	0AFH
  416/ 2AF : DE                         	DB	0DEH
  417/ 2B0 : C1 4E 44                   	DB	0C1H,"ND"	; AND
  418/ 2B3 : CF 52                      	DB	0CFH,"R"	; OR
  419/ 2B5 : BE                         	DB	0BEH
  420/ 2B6 : BD                         	DB	0BDH
  421/ 2B7 : BC                         	DB	0BCH
  422/ 2B8 :                            ;
  423/ 2B8 : D3 47 4E                   	DB	0D3H,"GN"	; SGN
  424/ 2BB : C9 4E 54                   	DB	0C9H,"NT"	; INT
  425/ 2BE : C1 42 53                   	DB	0C1H,"BS"	; ABS
  426/ 2C1 : D5 53 52                   	DB	0D5H,"SR"	; USR
  427/ 2C4 : C6 52 45                   	DB	0C6H,"RE"	; FRE
  428/ 2C7 : C9 4E 50                   	DB	0C9H,"NP"	; INP
  429/ 2CA : D0 4F 53                   	DB	0D0H,"OS"	; POS
  430/ 2CD : D3 51 52                   	DB	0D3H,"QR"	; SQR
  431/ 2D0 : D2 4E 44                   	DB	0D2H,"ND"	; RND
  432/ 2D3 : CC 4F 47                   	DB	0CCH,"OG"	; LOG
  433/ 2D6 : C5 58 50                   	DB	0C5H,"XP"	; EXP
  434/ 2D9 : C3 4F 53                   	DB	0C3H,"OS"	; COS
  435/ 2DC : D3 49 4E                   	DB	0D3H,"IN"	; SIN
  436/ 2DF : D4 41 4E                   	DB	0D4H,"AN"	; TAN
  437/ 2E2 : C1 54 4E                   	DB	0C1H,"TN"	; ATN
  438/ 2E5 : D0 45 45 4B                	DB	0D0H,"EEK"	; PEEK
  439/ 2E9 : C4 45 45 4B                	DB	0C4H,"EEK"	; DEEK
  440/ 2ED : D0 4F 49 4E 54             	DB	0D0H,"OINT"	; POINT
  441/ 2F2 : CC 45 4E                   	DB	0CCH,"EN"	; LEN
  442/ 2F5 : D3 54 52 24                	DB	0D3H,"TR$"	; STR
  443/ 2F9 : D6 41 4C                   	DB	0D6H,"AL"	; VAL
  444/ 2FC : C1 53 43                   	DB	0C1H,"SC"	; ASC
  445/ 2FF : C3 48 52 24                	DB	0C3H,"HR$"	; CHR$
  446/ 303 : C8 45 58 24                	DB	0C8H,"EX$"	; HEX$
  447/ 307 : C2 49 4E 24                	DB	0C2H,"IN$"	; BIN$
  448/ 30B : CC 45 46 54 24             	DB	0CCH,"EFT$"	; LEFT$
  449/ 310 : D2 49 47 48 54 24          	DB	0D2H,"IGHT$"	; RIGHT$
  450/ 316 : CD 49 44 24                	DB	0CDH,"ID$"	; MID$
  451/ 31A : 80                         	DB	80H		; End of list marker
  452/ 31B :                            ;
  453/ 31B :                            ; KEYWORD ADDRESS TABLE
  454/ 31B :                            ;
  455/ 31B :                            	ALIGN	2
  456/ 31C :                            WORDTB:
  457/ 31C : 0D 20                      	DW	PEND
  458/ 31E : 0B 50                      	DW	FOR
  459/ 320 : 13 9A                      	DW	NEXT
  460/ 322 : 0F 48                      	DW	DATA
  461/ 324 : 11 E6                      	DW	INPUT
  462/ 326 : 17 9A                      	DW	DIM
  463/ 328 : 12 38                      	DW	READ
  464/ 32A : 0F 74                      	DW	LET
  465/ 32C : 0E D0                      	DW	GOTO
  466/ 32E : 0E A6                      	DW	RUN
  467/ 330 : 10 3A                      	DW	IF
  468/ 332 : 0C B4                      	DW	RESTOR
  469/ 334 : 0E B6                      	DW	GOSUB
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 9 - 2023/10/12 18時22分27秒


  470/ 336 : 0F 08                      	DW	RETURN
  471/ 338 : 0F 4C                      	DW	REM
  472/ 33A : 0D 16                      	DW	STOP
  473/ 33C : 21 0C                      	DW	POUT
  474/ 33E : 10 06                      	DW	ON
  475/ 340 : 0D 8A                      	DW	NULL
  476/ 342 : 21 14                      	DW	WAIT
  477/ 344 : 1A FA                      	DW	DEF
  478/ 346 : 21 8E                      	DW	POKE
  479/ 348 : 2E 70                      	DW	DOKE
  480/ 34A : 0F 4C                      	DW	REM
  481/ 34C : 2E 48                      	DW	LINES
  482/ 34E : 2E 36                      	DW	CLS
  483/ 350 : 2E 3C                      	DW	WIDTH
  484/ 352 : 30 54                      	DW	MONITR
  485/ 354 : 80 B2                      	DW	PSET
  486/ 356 : 80 B6                      	DW	RESET
  487/ 358 : 10 76                      	DW	PRINT
  488/ 35A : 0D 6C                      	DW	CONT
  489/ 35C : 0A 56                      	DW	LIST
  490/ 35E : 0E 34                      	DW	CLEAR
  491/ 360 : 0F 4C                      	DW	REM
  492/ 362 : 0F 4C                      	DW	REM
  493/ 364 : 06 CA                      	DW	NEW
  494/ 366 :                            ;
  495/ 366 :                            ; RESERVED WORD TOKEN VALUES
  496/ 366 :                            ;
  497/ 366 : =80H                       ZEND	EQU	080H		; END
  498/ 366 : =81H                       ZFOR	EQU	081H		; FOR
  499/ 366 : =83H                       ZDATA	EQU	083H		; DATA
  500/ 366 : =88H                       ZGOTO	EQU	088H		; GOTO
  501/ 366 : =8CH                       ZGOSUB	EQU	08CH		; GOSUB
  502/ 366 : =8EH                       ZREM	EQU	08EH		; REM
  503/ 366 : =9EH                       ZPRINT	EQU	09EH		; PRINT
  504/ 366 : =0A4H                      ZNEW	EQU	0A4H		; NEW
  505/ 366 :                            ;
  506/ 366 : =0A5H                      ZTAB	EQU	0A5H		; TAB
  507/ 366 : =0A6H                      ZTO	EQU	0A6H		; TO
  508/ 366 : =0A7H                      ZFN	EQU	0A7H		; FN
  509/ 366 : =0A8H                      ZSPC	EQU	0A8H		; SPC
  510/ 366 : =0A9H                      ZTHEN	EQU	0A9H		; THEN
  511/ 366 : =0AAH                      ZNOT	EQU	0AAH		; NOT
  512/ 366 : =0ABH                      ZSTEP	EQU	0ABH		; STEP
  513/ 366 :                            ;
  514/ 366 : =0ACH                      ZPLUS	EQU	0ACH		; +
  515/ 366 : =0ADH                      ZMINUS	EQU	0ADH		; -
  516/ 366 : =0AEH                      ZTIMES	EQU	0AEH		; *
  517/ 366 : =0AFH                      ZDIV	EQU	0AFH		; /
  518/ 366 : =0B2H                      ZOR	EQU	0B2H		; OR
  519/ 366 : =0B3H                      ZGTR	EQU	0B3H		; >
  520/ 366 : =0B4H                      ZEQUAL	EQU	0B4H		; M
  521/ 366 : =0B5H                      ZLTH	EQU	0B5H		; <
  522/ 366 : =0B6H                      ZSGN	EQU	0B6H		; SGN
  523/ 366 : =0C7H                      ZPOINT	EQU	0C7H		; POINT
  524/ 366 : =0CFH                      ZLEFT	EQU	0CDH +2		; LEFT$
  525/ 366 :                            ;
  526/ 366 :                            ; ARITHMETIC PRECEDENCE TABLE
  527/ 366 :                            ;
  528/ 366 :                            	ALIGN	2
  529/ 366 :                            PRITAB:
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 10 - 2023/10/12 18時22分27秒


  530/ 366 : 79 00                      	DB	79H,0		; Precedence value
  531/ 368 : 28 DE                      	DW	PADD		; FPREG = <last> + FPREG
  532/ 36A :                            ;
  533/ 36A : 79 00                      	DB	79H,0		; Precedence value
  534/ 36C : 21 BA                      	DW	PSUB		; FPREG = <last> - FPREG
  535/ 36E :                            ;
  536/ 36E : 7C 00                      	DB	7CH,0		; Precedence value
  537/ 370 : 24 04                      	DW	MULT		; PPREG = <last> * FPREG
  538/ 372 :                            ;
  539/ 372 : 7C 00                      	DB	7CH,0		; Precedence value
  540/ 374 : 24 A6                      	DW	DIV		; FPREG = <last> / FPREG
  541/ 376 :                            ;
  542/ 376 : 7F 00                      	DB	7FH,0		; Precedence value
  543/ 378 : 2B 02                      	DW	POWER		; FPREG = <last> ^ FPREG
  544/ 37A :                            ;
  545/ 37A : 50 00                      	DB	50H,0		; Precedence value
  546/ 37C : 16 52                      	DW	PAND		; FPREG = <last> AND FPREG
  547/ 37E :                            ;
  548/ 37E : 46 00                      	DB	46H,0		; Precedence value
  549/ 380 : 16 4A                      	DW	POR		; FPREG = <last> OR FPREG
  550/ 382 :                            ;
  551/ 382 :                            ; BASIC ERROR CODE LIST
  552/ 382 :                            ;
  553/ 382 :                            	ALIGN	2
  554/ 382 :                            ERRORS:
  555/ 382 : 4E 46                      	DB	"NF"		; NEXT without FOR
  556/ 384 : 53 4E                      	DB	"SN"		; Syntax error
  557/ 386 : 52 47                      	DB	"RG"		; RETURN without GOSUB
  558/ 388 : 4F 44                      	DB	"OD"		; Out of DATA
  559/ 38A : 46 43                      	DB	"FC"		; Illegal function call
  560/ 38C : 4F 56                      	DB	"OV"		; Overflow error
  561/ 38E : 4F 4D                      	DB	"OM"		; Out of memory
  562/ 390 : 55 4C                      	DB	"UL"		; Undefined line
  563/ 392 : 42 53                      	DB	"BS"		; Bad subscript
  564/ 394 : 44 44                      	DB	"DD"		; Re-DIMensioned array
  565/ 396 : 2F 30                      	DB	"/0"		; Division by zero
  566/ 398 : 49 44                      	DB	"ID"		; Illegal direct
  567/ 39A : 54 4D                      	DB	"TM"		; Type mis-match
  568/ 39C : 4F 53                      	DB	"OS"		; Out of string space
  569/ 39E : 4C 53                      	DB	"LS"		; String too long
  570/ 3A0 : 53 54                      	DB	"ST"		; String formula too complex
  571/ 3A2 : 43 4E                      	DB	"CN"		; Can't CONTinue
  572/ 3A4 : 55 46                      	DB	"UF"		; Undefined FN function
  573/ 3A6 : 4D 4F                      	DB	"MO"		; Missing operand
  574/ 3A8 : 48 58                      	DB	"HX"		; HEX error
  575/ 3AA : 42 4E                      	DB	"BN"		; BIN error
  576/ 3AC :                            ;
  577/ 3AC :                            ; INITIALISATION TABLE -------------------------------------------------------
  578/ 3AC :                            ;
  579/ 3AC :                            	ALIGN	2
  580/ 3AC :                            INITAB:
  581/ 3AC : 5E08 0128                  	JP	WARMST		; Warm start jump
  582/ 3B0 : 5E08 0DEA                  	JP	FCERR		; "USR (X)" jump (Set to Error)
  583/ 3B4 : 3A06 00FF                  	OUTB	(255),RH0	; "OUT p,n" skeleton
  584/ 3B8 : 9E08                       	RET
  585/ 3BA : CC01                       	LDB	RL4,#1		; Division support routine
  586/ 3BC : 82C0                       	SUBB	RH0,RL4
  587/ 3BE : A00B                       	LDB	RL3,RH0
  588/ 3C0 : A030                       	LDB	RH0,RH3
  589/ 3C2 : CC02                       	LDB	RL4,#2
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 11 - 2023/10/12 18時22分27秒


  590/ 3C4 : B6C0                       	SBCB	RH0,RL4
  591/ 3C6 : A003                       	LDB	RH3,RH0
  592/ 3C8 : A010                       	LDB	RH0,RH1
  593/ 3CA : CC03                       	LDB	RL4,#3
  594/ 3CC : B6C0                       	SBCB	RH0,RL4
  595/ 3CE : A001                       	LDB	RH1,RH0
  596/ 3D0 : C004                       	LDB	RH0,#4
  597/ 3D2 : 9E08                       	RET
  598/ 3D4 : 00 00 00                   	DB	0,0,0			; Random number seed table used by RND
  599/ 3D7 : 35 4A CA 99                	DB	035H,04AH,0CAH,099H	;-2.65145E+07
  600/ 3DB : 39 1C 76 98                	DB	039H,01CH,076H,098H	; 1.61291E+07
  601/ 3DF : 22 95 B3 98                	DB	022H,095H,0B3H,098H	;-1.17691E+07
  602/ 3E3 : 0A DD 47 98                	DB	00AH,0DDH,047H,098H	; 1.30983E+07
  603/ 3E7 : 53 D1 99 99                	DB	053H,0D1H,099H,099H	;-2-01612E+07
  604/ 3EB : 0A 1A 9F 98                	DB	00AH,01AH,09FH,098H	;-1.04269E+07
  605/ 3EF : 65 BC CD 98                	DB	065H,0BCH,0CDH,098H	;-1.34831E+07
  606/ 3F3 : D6 77 3E 98                	DB	0D6H,077H,03EH,098H	; 1.24825E+07
  607/ 3F7 : 52 C7 4F 80                	DB	052H,0C7H,04FH,080H	; Last random number
  608/ 3FB :                            
  609/ 3FB :                            	ALIGN	2
  610/ 3FC : 3A04 00FF                  	INB	RH0,(255)	; INP (x) skeleton
  611/ 400 : 9E08                       	RET
  612/ 402 : 01                         	DB	1		; POS (x) number (1)
  613/ 403 : FF                         	DB	255		; Terminal width (255 = no auto CRLF)
  614/ 404 : 1C                         	DB	28		; Width for commas (3 columns)
  615/ 405 : 00                         	DB	0		; No nulls after input bytes
  616/ 406 : 00                         	DB	0		; Output enabled (^O off)
  617/ 407 :                            
  618/ 407 :                            	ALIGN	2
  619/ 408 : 00 14                      	DW	20		; Initial lines counter
  620/ 40A : 00 14                      	DW	20		; Initial lines number
  621/ 40C : 00 00                      	DW	0		; Array load/save check sum
  622/ 40E : 00                         	DB	0		; Break not by NMI
  623/ 40F : 00                         	DB	0		; Break flag
  624/ 410 :                            
  625/ 410 :                            	ALIGN	2
  626/ 410 :                            
  627/ 410 : 5E08 08FA                  	JP	TTYLIN		; Input reflection (set to TTY)
  628/ 414 : 5E08 0000                  	JP	0000H		; POINT reflection unused
  629/ 418 : 5E08 0000                  	JP	0000H		; SET reflection
  630/ 41C : 5E08 0000                  	JP	0000H		; RESET reflection
  631/ 420 : 81 C0                      	DW	STLOOK		; Temp string space
  632/ 422 : FF FE                      	DW	-2		; Current line number (cold)
  633/ 424 : 81 5D                      	DW	PROGST+1	; Start of program text
  634/ 426 :                            INITBE:
  635/ 426 :                            ;
  636/ 426 :                            ; END OF INITIALISATION TABLE ---------------------------------------------------
  637/ 426 :                            ;
  638/ 426 :                            ERRMSG:
  639/ 426 : 20 45 72 72 6F 72 00       	DB	" Error",0
  640/ 42D :                            INMSG:
  641/ 42D : 20 69 6E 20 00             	DB	" in ",0
  642/ 432 : =431H                      ZERBYT	EQU	$-1		; A zero byte
  643/ 432 :                            OKMSG:
  644/ 432 : 4F 6B 0D 0A 00 00          	DB	"Ok",CR,LF,0,0
  645/ 438 :                            BRKMSG:
  646/ 438 : 42 72 65 61 6B 00          	DB	"Break",0
  647/ 43E :                            ;
  648/ 43E :                            	ALIGN	2
  649/ 43E :                            
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 12 - 2023/10/12 18時22分27秒


  650/ 43E :                            BAKSTK:
  651/ 43E : 2103 0004                  	LD	R3,#4		; Look for "FOR" block with
  652/ 442 : 81F3                       	ADD	R3,R15		; same index as specified
  653/ 444 :                            LOKFOR:
  654/ 444 : 2030                       	LDB	RH0,@R3		; Get block ID
  655/ 446 : A930                       	INC	R3		; Point to index address
  656/ 448 : A930                       	INC	R3		; Point to index address
  657/ 44A : 0A00 8181                  	CPB	RH0,#ZFOR	; Is it a "FOR" token
  658/ 44E : 9E0E                       	RET	NZ		; No - exit
  659/ 450 : 2039                       	LDB	RL1,@R3		; BC = Address of "FOR" index
  660/ 452 : A930                       	INC	R3
  661/ 454 : 2031                       	LDB	RH1,@R3
  662/ 456 : A930                       	INC	R3		; Point to sign of STEP
  663/ 458 : 93F3                       	PUSH	@R15,R3		; Save pointer to sign
  664/ 45A : A09B                       	LDB	RL3,RL1		; HL = address of "FOR" index
  665/ 45C : A013                       	LDB	RH3,RH1
  666/ 45E : A020                       	LDB	RH0,RH2		; See if an index was specified
  667/ 460 : 84A0                       	ORB	RH0,RL2		; DE = 0 if no index specified
  668/ 462 : AD23                       	EX	R3,R2		; Specified index into HL
  669/ 464 : 5E06 046E                  	JP	Z,INDFND	; Skip if no index given
  670/ 468 : AD23                       	EX	R3,R2		; Index back into DE
  671/ 46A : 5F00 09CE                  	CALL	CPDEHL		; Compare index with one given
  672/ 46E :                            INDFND:
  673/ 46E :                            ;	LD	R1,#16-3	; Offset to next block : 8 levels *2 byte
  674/ 46E : 2101 000E                  	LD	R1,#18-4	; Offset to next block : 9 levels *2 byte
  675/ 472 : 97F3                       	POP	R3,@R15		; Restore pointer to sign
  676/ 474 : 9E06                       	RET	Z		; Return if block found
  677/ 476 : 8113                       	ADD	R3,R1		; Point to next block
  678/ 478 : 5E08 0444                  	JP	LOKFOR		; Keep on looking
  679/ 47C :                            ;
  680/ 47C :                            MOVUP:
  681/ 47C : 5F00 04AA                  	CALL	ENFMEM		; See if enough memory
  682/ 480 :                            MOVSTR:
  683/ 480 : 93F1                       	PUSH	@R15,R1		; Save end of source
  684/ 482 : 2DF3                       	EX	@R15,R3		; Swap source and dest" end
  685/ 484 : 97F1                       	POP	R1,@R15		; Get end of destination
  686/ 486 :                            MOVLP:
  687/ 486 : 5F00 09CE                  	CALL	CPDEHL		; See if list moved
  688/ 48A : 2030                       	LDB	RH0,@R3		; Get byte
  689/ 48C : 2E10                       	LDB	@R1,RH0		; Move it
  690/ 48E : 9E06                       	RET	Z		; Exit if all done
  691/ 490 : 8CC1                       	LDCTLB	RL4,FLAGS
  692/ 492 : AB10                       	DEC	R1,#1		; Next byte to move to
  693/ 494 : AB30                       	DEC	R3,#1		; Next byte to move
  694/ 496 : 8CC9                       	LDCTLB	FLAGS,RL4
  695/ 498 : 5E08 0486                  	JP	MOVLP		; Loop until all bytes moved
  696/ 49C :                            ;
  697/ 49C :                            CHKSTK:
  698/ 49C : 93F3                       	PUSH	@R15,R3		; Save code string address
  699/ 49E : 6103 813A                  	LD	R3,(ARREND)	; Lowest free memory
  700/ 4A2 : C100                       	LDB	RH1,#0		; BC = Number of levels to test
  701/ 4A4 : 8113                       	ADD	R3,R1		; 2 Bytes for each level
  702/ 4A6 : 8113                       	ADD	R3,R1
  703/ 4A8 : E801                       	JR	ENFMEM1		; Skip "PUSH HL"
  704/ 4AA :                            ENFMEM:
  705/ 4AA : 93F3                       	PUSH	@R15,R3		; Save code string address
  706/ 4AC :                            ENFMEM1:
  707/ 4AC : C0D0                       	LDB	RH0,#0D0H	; LOW -48; 48 Bytes minimum RAM
  708/ 4AE : 82B0                       	SUBB	RH0,RL3
  709/ 4B0 : A00B                       	LDB	RL3,RH0
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 13 - 2023/10/12 18時22分27秒


  710/ 4B2 : C0FF                       	LDB	RH0,#0FFH	; HIGH (-48); 48 Bytes minimum RAM
  711/ 4B4 : B630                       	SBCB	RH0,RH3
  712/ 4B6 : 5E07 04C2                  	JP	C,OMERR		; Not enough - ?OM Error
  713/ 4BA : A003                       	LDB	RH3,RH0
  714/ 4BC : 81F3                       	ADD	R3,R15		; Test if stack is overflowed
  715/ 4BE : 97F3                       	POP	R3,@R15		; Restore code string address
  716/ 4C0 : 9E07                       	RET	C		; Return if enough mmory
  717/ 4C2 :                            OMERR:
  718/ 4C2 : CA0C                       	LDB	RL2,#OM		; ?OM Error
  719/ 4C4 : 5E08 04EA                  	JP	ERROR
  720/ 4C8 :                            ;
  721/ 4C8 :                            DATSNR:
  722/ 4C8 : 6103 8128                  	LD	R3,(DATLIN)	; Get line of current DATA item
  723/ 4CC : 6F03 80BC                  	LD	(LINEAT),R3	; Save as current line
  724/ 4D0 :                            SNERR:
  725/ 4D0 : CA02                       	LDB	RL2,#SN		; ?SN Error
  726/ 4D2 : E80B                       	JR	ERROR
  727/ 4D4 :                            DZERR:
  728/ 4D4 : CA14                       	LDB	RL2,#DZ		; ?/0 Error
  729/ 4D6 : E809                       	JR	ERROR
  730/ 4D8 :                            NFERR:
  731/ 4D8 : CA00                       	LDB	RL2,#NF		; ?NF Error
  732/ 4DA : E807                       	JR	ERROR
  733/ 4DC :                            DDERR:
  734/ 4DC : CA12                       	LDB	RL2,#RD		; ?DD Error
  735/ 4DE : E805                       	JR	ERROR
  736/ 4E0 :                            UFERR:
  737/ 4E0 : CA22                       	LDB	RL2,#UF		; ?UF Error
  738/ 4E2 : E803                       	JR	ERROR
  739/ 4E4 :                            OVERR:
  740/ 4E4 : CA0A                       	LDB	RL2,#OV		; ?OV Error
  741/ 4E6 : E801                       	JR	ERROR
  742/ 4E8 :                            TMERR:
  743/ 4E8 : CA18                       	LDB	RL2,#TM		; ?TM Error
  744/ 4EA :                            ;
  745/ 4EA :                            ERROR:
  746/ 4EA : 5F00 0712                  	CALL	CLREG		; Clear registers and stack
  747/ 4EE : 6E00 80A0                  	LDB	(CTLOFG),RH0	; Enable output (A is 0)
  748/ 4F2 : 5F00 10FE                  	CALL	STTLIN		; Start new line
  749/ 4F6 : 2103 0382                  	LD	R3,#ERRORS	; Point to error codes
  750/ 4FA : A002                       	LDB	RH2,RH0		; D = 0 (A is 0)
  751/ 4FC : C03F                       	LDB	RH0,#'?'
  752/ 4FE : 5F00 09E6                  	CALL	OUTC		; Output '?'
  753/ 502 : 8123                       	ADD	R3,R2		; Offset to correct error code
  754/ 504 : 2030                       	LDB	RH0,@R3		; First character
  755/ 506 : 5F00 09E6                  	CALL	OUTC		; Output it
  756/ 50A : 5F00 0C96                  	CALL	GETCHR		; Get next character
  757/ 50E : 5F00 09E6                  	CALL	OUTC		; Output it
  758/ 512 : 2103 0426                  	LD	R3,#ERRMSG	; "Error" message
  759/ 516 :                            ERRIN:
  760/ 516 : 5F00 1CDA                  	CALL	PRS		; Output message
  761/ 51A : 6103 80BC                  	LD	R3,(LINEAT)	; Get line of error
  762/ 51E : 2102 FFFE                  	LD	R2,#-2		; Cold start error if -2
  763/ 522 : 5F00 09CE                  	CALL	CPDEHL		; See if cold start error
  764/ 526 : 5E06 0072                  	JP	Z,CSTART	; Cold start error - Restart
  765/ 52A : A030                       	LDB	RH0,RH3		; Was it a direct error?
  766/ 52C : 86B0                       	ANDB	RH0,RL3
  767/ 52E : 8D83                       	RESFLG	C		; Line = -1 if direct error
  768/ 530 : A800                       	INCB	RH0,#1
  769/ 532 : E602                       	JR	Z,ERRIN1
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 14 - 2023/10/12 18時22分27秒


  770/ 534 : 5F00 28FC                  	CALL	LINEIN		; No - output line of error
  771/ 538 :                            ERRIN1:
  772/ 538 : E801                       	JR	PRNTOK		; Skip "POP BC"
  773/ 53A :                            POPNOK:
  774/ 53A : 97F1                       	POP	R1,@R15		; Drop address in input buffer
  775/ 53C :                            ;
  776/ 53C :                            PRNTOK:
  777/ 53C : 8800                       	XORB	RH0,RH0
  778/ 53E : 8D83                       	RESFLG	C		; Output "Ok" and get command
  779/ 540 : 6E00 80A0                  	LDB	(CTLOFG),RH0	; Enable output
  780/ 544 : 5F00 10FE                  	CALL	STTLIN		; Start new line
  781/ 548 : 2103 0432                  	LD	R3,#OKMSG	; "Ok" message
  782/ 54C : 5F00 1CDA                  	CALL	PRS		; Output "Ok"
  783/ 550 :                            GETCMD:
  784/ 550 : 2103 FFFF                  	LD	R3,#-1		; Flag direct mode
  785/ 554 : 6F03 80BC                  	LD	(LINEAT),R3	; Save as current line
  786/ 558 : 5F00 08FA                  	CALL	GETLIN		; Get an input line
  787/ 55C : 5E07 0550                  	JP	C,GETCMD	; Get line again if break
  788/ 560 : 5F00 0C96                  	CALL	GETCHR		; Get first character
  789/ 564 : A800                       	INCB	RH0,#1		; Test if end of line
  790/ 566 : AA00                       	DECB	RH0,#1		; Without affecting Carry
  791/ 568 : 5E06 0550                  	JP	Z,GETCMD	; Nothing entered - Get another
  792/ 56C : 8C81                       	LDCTLB	RL0,FLAGS
  793/ 56E : 93F0                       	PUSH	@R15,R0		; Save Carry status
  794/ 570 : 5F00 0DF0                  	CALL	ATOH		; Get line number into DE
  795/ 574 : 93F2                       	PUSH	@R15,R2		; Save line number
  796/ 576 : 5F00 0750                  	CALL	CRUNCH		; Tokenise rest of line
  797/ 57A : A001                       	LDB	RH1,RH0		; Length of tokenised line
  798/ 57C : 97F2                       	POP	R2,@R15		; Restore line number
  799/ 57E : 97F0                       	POP	R0,@R15		; Restore Carry
  800/ 580 : 8C89                       	LDCTLB	FLAGS,RL0
  801/ 582 : 5E0F 0C5E                  	JP	NC,EXCUTE	; No line number - Direct mode
  802/ 586 : 93F2                       	PUSH	@R15,R2		; Save line number
  803/ 588 : 93F1                       	PUSH	@R15,R1		; Save length of tokenised line
  804/ 58A : 8800                       	XORB	RH0,RH0
  805/ 58C : 8D83                       	RESFLG	C
  806/ 58E : 6E00 812B                  	LDB	(LSTBIN),RH0	; Clear last byte input
  807/ 592 : 5F00 0C96                  	CALL	GETCHR		; Get next character
  808/ 596 : 8400                       	ORB	RH0,RH0
  809/ 598 : 8D83                       	RESFLG	C		; Set flags
  810/ 59A : 8C81                       	LDCTLB	RL0,FLAGS
  811/ 59C : 93F0                       	PUSH	@R15,R0		; And save them
  812/ 59E : 5F00 0676                  	CALL	SRCHLN		; Search for line number in DE
  813/ 5A2 : 5E07 05B6                  	JP	C,LINFND	; Jump if line found
  814/ 5A6 : 97F0                       	POP	R0,@R15		; Get status
  815/ 5A8 : 8C89                       	LDCTLB	FLAGS,RL0
  816/ 5AA : 8C81                       	LDCTLB	RL0,FLAGS
  817/ 5AC : 93F0                       	PUSH	@R15,R0		; And re-save
  818/ 5AE : 5E06 0F02                  	JP	Z,ULERR		; Nothing after number - Error
  819/ 5B2 : 8400                       	ORB	RH0,RH0
  820/ 5B4 : 8D83                       	RESFLG	C		; Clear Carry
  821/ 5B6 :                            LINFND:
  822/ 5B6 : 93F1                       	PUSH	@R15,R1		; Save address of line in prog
  823/ 5B8 : 5E0F 05DE                  	JP	NC,INEWLN	; Line not found - Insert new
  824/ 5BC : AD23                       	EX	R3,R2		; Next line address in DE
  825/ 5BE : 6103 8136                  	LD	R3,(PROGND)	; End of program
  826/ 5C2 :                            SFTPRG:
  827/ 5C2 : 2020                       	LDB	RH0,@R2		; Shift rest of program down
  828/ 5C4 : 2E10                       	LDB	@R1,RH0
  829/ 5C6 : 8CC1                       	LDCTLB	RL4,FLAGS
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 15 - 2023/10/12 18時22分27秒


  830/ 5C8 : A910                       	INC	R1		; Next destination
  831/ 5CA : A920                       	INC	R2		; Next source
  832/ 5CC : 8CC9                       	LDCTLB	FLAGS,RL4
  833/ 5CE : 5F00 09CE                  	CALL	CPDEHL		; All done?
  834/ 5D2 : 5E0E 05C2                  	JP	NZ,SFTPRG	; More to do
  835/ 5D6 : A013                       	LDB	RH3,RH1		; HL - New end of program
  836/ 5D8 : A09B                       	LDB	RL3,RL1
  837/ 5DA : 6F03 8136                  	LD	(PROGND),R3	; Update end of program
  838/ 5DE :                            ;
  839/ 5DE :                            INEWLN:
  840/ 5DE : 97F2                       	POP	R2,@R15		; Get address of line,
  841/ 5E0 : 97F0                       	POP	R0,@R15		; Get status
  842/ 5E2 : 8C89                       	LDCTLB	FLAGS,RL0
  843/ 5E4 : 5E06 062C                  	JP	Z,SETPTR	; No text - Set up pointers
  844/ 5E8 : 6103 8136                  	LD	R3,(PROGND)	; Get end of program
  845/ 5EC : 2DF3                       	EX	@R15,R3		; Get length of input line
  846/ 5EE : 97F1                       	POP	R1,@R15		; End of program to BC
  847/ 5F0 : 8113                       	ADD	R3,R1		; Find new end
  848/ 5F2 : 93F3                       	PUSH	@R15,R3		; Save new end
  849/ 5F4 : 5F00 047C                  	CALL	MOVUP		; Make space for line
  850/ 5F8 : 97F3                       	POP	R3,@R15		; Restore new end
  851/ 5FA : 6F03 8136                  	LD	(PROGND),R3	; Update end of program pointer
  852/ 5FE : AD23                       	EX	R3,R2		; Get line to move up in HL
  853/ 600 : 2E33                       	LDB	@R3,RH3		; Save MSB
  854/ 602 : 97F2                       	POP	R2,@R15		; Get new line number
  855/ 604 : 8CC1                       	LDCTLB	RL4,FLAGS
  856/ 606 : A930                       	INC	R3		; Skip pointer
  857/ 608 : A930                       	INC	R3
  858/ 60A : 2E3A                       	LDB	@R3,RL2		; Save LSB of line number
  859/ 60C : A930                       	INC	R3
  860/ 60E : 2E32                       	LDB	@R3,RH2		; Save MSB of line number
  861/ 610 : A930                       	INC	R3		; To first byte in line
  862/ 612 : 8CC9                       	LDCTLB	FLAGS,RL4
  863/ 614 : 2102 80C0                  	LD	R2,#BUFFER	; Copy buffer to program
  864/ 618 :                            MOVBUF:
  865/ 618 : 2020                       	LDB	RH0,@R2		; Get source
  866/ 61A : 2E30                       	LDB	@R3,RH0		; Save destinations
  867/ 61C : 8CC1                       	LDCTLB	RL4,FLAGS
  868/ 61E : A930                       	INC	R3		; Next source
  869/ 620 : A920                       	INC	R2		; Next destination
  870/ 622 : 8CC9                       	LDCTLB	FLAGS,RL4
  871/ 624 : 8400                       	ORB	RH0,RH0
  872/ 626 : 8D83                       	RESFLG	C		; Done?
  873/ 628 : 5E0E 0618                  	JP	NZ,MOVBUF	; No - Repeat
  874/ 62C :                            SETPTR:
  875/ 62C : 5F00 06E8                  	CALL	RUNFST		; Set line pointers
  876/ 630 : 8CC1                       	LDCTLB	RL4,FLAGS
  877/ 632 : A930                       	INC	R3		; To LSB of pointer
  878/ 634 : 8CC9                       	LDCTLB	FLAGS,RL4
  879/ 636 : AD23                       	EX	R3,R2		; Address to DE
  880/ 638 :                            PTRLP:
  881/ 638 : A023                       	LDB	RH3,RH2		; Address to HL
  882/ 63A : A0AB                       	LDB	RL3,RL2
  883/ 63C : 2030                       	LDB	RH0,@R3		; Get LSB of pointer
  884/ 63E : 8CC1                       	LDCTLB	RL4,FLAGS
  885/ 640 : A930                       	INC	R3		; To MSB of pointer
  886/ 642 : 8CC9                       	LDCTLB	FLAGS,RL4
  887/ 644 : 0430                       	ORB	RH0,@R3
  888/ 646 : 8D83                       	RESFLG	C		; Compare with MSB pointer
  889/ 648 : 5E06 0550                  	JP	Z,GETCMD	; Get command line if end
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 16 - 2023/10/12 18時22分27秒


  890/ 64C : 8CC1                       	LDCTLB	RL4,FLAGS
  891/ 64E : A930                       	INC	R3		; To LSB of line number
  892/ 650 : A930                       	INC	R3		; Skip line number
  893/ 652 : A930                       	INC	R3		; Point to first byte in line
  894/ 654 : 8CC9                       	LDCTLB	FLAGS,RL4
  895/ 656 : 8800                       	XORB	RH0,RH0
  896/ 658 : 8D83                       	RESFLG	C		; Looking for 00 byte
  897/ 65A :                            FNDEND:
  898/ 65A : 0A30                       	CPB	RH0,@R3		; Found end of line?
  899/ 65C : 8CC1                       	LDCTLB	RL4,FLAGS
  900/ 65E : A930                       	INC	R3		; Move to next byte
  901/ 660 : 8CC9                       	LDCTLB	FLAGS,RL4
  902/ 662 : 5E0E 065A                  	JP	NZ,FNDEND	; No - Keep looking
  903/ 666 : AD23                       	EX	R3,R2		; Next line address to HL
  904/ 668 : 2E3A                       	LDB	@R3,RL2		; Save LSB of pointer
  905/ 66A : 8CC1                       	LDCTLB	RL4,FLAGS
  906/ 66C : A930                       	INC	R3
  907/ 66E : 8CC9                       	LDCTLB	FLAGS,RL4
  908/ 670 : 2E32                       	LDB	@R3,RH2		; Save MSB of pointer
  909/ 672 : 5E08 0638                  	JP	PTRLP		; Do next line
  910/ 676 :                            ;
  911/ 676 :                            SRCHLN:
  912/ 676 : 6103 80BE                  	LD	R3,(BASTXT)	; Start of program text
  913/ 67A :                            SRCHLP:
  914/ 67A : A031                       	LDB	RH1,RH3		; BC = Address to look at
  915/ 67C : A0B9                       	LDB	RL1,RL3
  916/ 67E : 2030                       	LDB	RH0,@R3		; Get address of next line
  917/ 680 : 8CC1                       	LDCTLB	RL4,FLAGS
  918/ 682 : A930                       	INC	R3
  919/ 684 : 8CC9                       	LDCTLB	FLAGS,RL4
  920/ 686 : 0430                       	ORB	RH0,@R3
  921/ 688 : 8D83                       	RESFLG	C		; End of program found?
  922/ 68A : 8CC1                       	LDCTLB	RL4,FLAGS
  923/ 68C : AB30                       	DEC	R3,#1
  924/ 68E : 8CC9                       	LDCTLB	FLAGS,RL4
  925/ 690 : 9E06                       	RET	Z		; Yes - Line not found
  926/ 692 : 8CC1                       	LDCTLB	RL4,FLAGS
  927/ 694 : A930                       	INC	R3
  928/ 696 : 8CC9                       	LDCTLB	FLAGS,RL4
  929/ 698 : 8CC1                       	LDCTLB	RL4,FLAGS
  930/ 69A : A930                       	INC	R3
  931/ 69C : 8CC9                       	LDCTLB	FLAGS,RL4
  932/ 69E : 2030                       	LDB	RH0,@R3		; Get LSB of line number
  933/ 6A0 : 8CC1                       	LDCTLB	RL4,FLAGS
  934/ 6A2 : A930                       	INC	R3
  935/ 6A4 : 8CC9                       	LDCTLB	FLAGS,RL4
  936/ 6A6 : 2033                       	LDB	RH3,@R3		; Get MSB of line number
  937/ 6A8 : A00B                       	LDB	RL3,RH0
  938/ 6AA : 5F00 09CE                  	CALL	CPDEHL		; Compare with line in DE
  939/ 6AE : A013                       	LDB	RH3,RH1		; HL = Start of this line
  940/ 6B0 : A09B                       	LDB	RL3,RL1
  941/ 6B2 : 2030                       	LDB	RH0,@R3		; Get LSB of next line address
  942/ 6B4 : 8CC1                       	LDCTLB	RL4,FLAGS
  943/ 6B6 : A930                       	INC	R3
  944/ 6B8 : 8CC9                       	LDCTLB	FLAGS,RL4
  945/ 6BA : 2033                       	LDB	RH3,@R3		; Get MSB of next line address
  946/ 6BC : A00B                       	LDB	RL3,RH0		; Next line to HL
  947/ 6BE : 8D85                       	COMFLG	C
  948/ 6C0 : 9E06                       	RET	Z		; Lines found - Exit
  949/ 6C2 : 8D85                       	COMFLG	C
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 17 - 2023/10/12 18時22分27秒


  950/ 6C4 : 9E0F                       	RET	NC		; Line not found,at line after
  951/ 6C6 : 5E08 067A                  	JP	SRCHLP		; Keep looking
  952/ 6CA :                            ;
  953/ 6CA :                            NEW:
  954/ 6CA : 9E0E                       	RET	NZ		; Return if any more on line
  955/ 6CC :                            CLRPTR:
  956/ 6CC : 6103 80BE                  	LD	R3,(BASTXT)	; Point to start of program
  957/ 6D0 : 8800                       	XORB	RH0,RH0
  958/ 6D2 : 8D83                       	RESFLG	C		; Set program area to empty
  959/ 6D4 : 2E30                       	LDB	@R3,RH0		; Save LSB = 00
  960/ 6D6 : 8CC1                       	LDCTLB	RL4,FLAGS
  961/ 6D8 : A930                       	INC	R3
  962/ 6DA : 8CC9                       	LDCTLB	FLAGS,RL4
  963/ 6DC : 2E30                       	LDB	@R3,RH0		; Save MSB = 00
  964/ 6DE : 8CC1                       	LDCTLB	RL4,FLAGS
  965/ 6E0 : A930                       	INC	R3
  966/ 6E2 : 8CC9                       	LDCTLB	FLAGS,RL4
  967/ 6E4 : 6F03 8136                  	LD	(PROGND),R3	; Set program end
  968/ 6E8 :                            ;
  969/ 6E8 :                            RUNFST:
  970/ 6E8 : 6103 80BE                  	LD	R3,(BASTXT)	; Clear all variables
  971/ 6EC : 8CC1                       	LDCTLB	RL4,FLAGS
  972/ 6EE : AB30                       	DEC	R3,#1
  973/ 6F0 : 8CC9                       	LDCTLB	FLAGS,RL4
  974/ 6F2 :                            ;
  975/ 6F2 :                            INTVAR:
  976/ 6F2 : 6F03 812E                  	LD	(BRKLIN),R3	; Initialise RUN variables
  977/ 6F6 : 6103 810E                  	LD	R3,(LSTRAM)	; Get end of RAM
  978/ 6FA : 6F03 8122                  	LD	(STRBOT),R3	; Clear string space
  979/ 6FE : 8800                       	XORB	RH0,RH0
  980/ 700 : 8D83                       	RESFLG	C
  981/ 702 : 5F00 0CB4                  	CALL	RESTOR		; Reset DATA pointers
  982/ 706 : 6103 8136                  	LD	R3,(PROGND)	; Get end of program
  983/ 70A : 6F03 8138                  	LD	(VAREND),R3	; Clear variables
  984/ 70E : 6F03 813A                  	LD	(ARREND),R3	; Clear arrays
  985/ 712 :                            ;
  986/ 712 :                            CLREG:
  987/ 712 : 97F1                       	POP	R1,@R15		; Save return address
  988/ 714 : 6103 80BA                  	LD	R3,(STRSPC)	; Get end of working RAN
  989/ 718 : A13F                       	LD	R15,R3		; Set stack
  990/ 71A : 2103 8112                  	LD	R3,#TMSTPL	; Temporary string pool
  991/ 71E : 6F03 8110                  	LD	(TMSTPT),R3	; Reset temporary string ptr
  992/ 722 : 8800                       	XORB	RH0,RH0
  993/ 724 : 8D83                       	RESFLG	C		; A = 00
  994/ 726 : A00B                       	LDB	RL3,RH0		; HL = 0000
  995/ 728 : A003                       	LDB	RH3,RH0
  996/ 72A : 6F03 8134                  	LD	(CONTAD),R3	; No CONTinue
  997/ 72E : 6E00 812A                  	LDB	(FORFLG),RH0	; Clear FOR flag
  998/ 732 : 6F03 813E                  	LD	(FNRGNM),R3	; Clear FN argument
  999/ 736 : 93F3                       	PUSH	@R15,R3		; HL = 0000
 1000/ 738 : 93F1                       	PUSH	@R15,R1		; Put back return
 1001/ 73A :                            DOAGN:
 1002/ 73A : 6103 812E                  	LD	R3,(BRKLIN)	; Get address of code to RUN
 1003/ 73E : 9E08                       	RET			; Return to execution driver
 1004/ 740 :                            ;
 1005/ 740 :                            PROMPT:
 1006/ 740 : C03F                       	LDB	RH0,#'?'	; '?'
 1007/ 742 : 5F00 09E6                  	CALL	OUTC		; Output character
 1008/ 746 : C020                       	LDB	RH0,#' '	; Space
 1009/ 748 : 5F00 09E6                  	CALL	OUTC		; Output character
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 18 - 2023/10/12 18時22分27秒


 1010/ 74C : 5E08 80AA                  	JP	RINPUT		; Get input line
 1011/ 750 :                            ;
 1012/ 750 :                            CRUNCH:
 1013/ 750 : 8800                       	XORB	RH0,RH0
 1014/ 752 : 8D83                       	RESFLG	C		; Tokenise line @ HL to BUFFER
 1015/ 754 : 6E00 810D                  	LDB	(DATFLG),RH0	; Reset literal flag
 1016/ 758 : C905                       	LDB	RL1,#2+3	; 2 byte number and 3 nulls
 1017/ 75A : 2102 80C0                  	LD	R2,#BUFFER	; Start of input buffer
 1018/ 75E :                            CRNCLP:
 1019/ 75E : 2030                       	LDB	RH0,@R3		; Get byte
 1020/ 760 : 0A00 2020                  	CPB	RH0,#' '	; Is it a space?
 1021/ 764 : 5E06 0846                  	JP	Z,MOVDIR	; Yes - Copy direct
 1022/ 768 : A001                       	LDB	RH1,RH0		; Save character
 1023/ 76A : 0A00 2222                  	CPB	RH0,#'"'	; Is it a quote?
 1024/ 76E : 5E06 0882                  	JP	Z,CPYLIT	; Yes - Copy literal string
 1025/ 772 : 8400                       	ORB	RH0,RH0
 1026/ 774 : 8D83                       	RESFLG	C		; Is it end of buffer?
 1027/ 776 : 5E06 0892                  	JP	Z,ENDBUF	; Yes - End buffer
 1028/ 77A : 6000 810D                  	LDB	RH0,(DATFLG)	; Get data type
 1029/ 77E : 8400                       	ORB	RH0,RH0
 1030/ 780 : 8D83                       	RESFLG	C		; Literal?
 1031/ 782 : 2030                       	LDB	RH0,@R3		; Get byte to copy
 1032/ 784 : 5E0E 0846                  	JP	NZ,MOVDIR	; Literal - Copy direct
 1033/ 788 : 0A00 3F3F                  	CPB	RH0,#'?'	; Is it '?' short for PRINT
 1034/ 78C : C09E                       	LDB	RH0,#ZPRINT	; "PRINT" token
 1035/ 78E : 5E06 0846                  	JP	Z,MOVDIR	; Yes - replace it
 1036/ 792 : 2030                       	LDB	RH0,@R3		; Get byte again
 1037/ 794 : 0A00 3030                  	CPB	RH0,#'0'	; Is it less than '0'
 1038/ 798 : 5E07 07A4                  	JP	C,FNDWRD	; Yes - Look for reserved words
 1039/ 79C : 0A00 3C3C                  	CPB	RH0,#60		; ";"+1; Is it "0123456789:;" ?
 1040/ 7A0 : 5E07 0846                  	JP	C,MOVDIR	; Yes - copy it direct
 1041/ 7A4 :                            FNDWRD:
 1042/ 7A4 : 93F2                       	PUSH	@R15,R2		; Look for reserved words
 1043/ 7A6 : 2102 01FB                  	LD	R2,#WORDS-1	; Point to table
 1044/ 7AA : 93F1                       	PUSH	@R15,R1		; Save count
 1045/ 7AC : 2101 083E                  	LD	R1,#RETNAD	; Where to return to
 1046/ 7B0 : 93F1                       	PUSH	@R15,R1		; Save return address
 1047/ 7B2 : C17F                       	LDB	RH1,#ZEND-1	; First token value -1
 1048/ 7B4 : 2030                       	LDB	RH0,@R3		; Get byte
 1049/ 7B6 : 0A00 6161                  	CPB	RH0,#'a'	; Less than 'a' ?
 1050/ 7BA : 5E07 07CC                  	JP	C,SEARCH	; Yes - search for words
 1051/ 7BE : 0A00 7B7B                  	CPB	RH0,#'z'+1	; Greater than 'z' ?
 1052/ 7C2 : 5E0F 07CC                  	JP	NC,SEARCH	; Yes - search for words
 1053/ 7C6 : 0600 5F5F                  	ANDB	RH0,#01011111B	; Force upper case
 1054/ 7CA : 2E30                       	LDB	@R3,RH0		; Replace byte
 1055/ 7CC :                            SEARCH:
 1056/ 7CC : 2039                       	LDB	RL1,@R3		; Search for a word
 1057/ 7CE : AD23                       	EX	R3,R2
 1058/ 7D0 :                            GETNXT:
 1059/ 7D0 : 8CC1                       	LDCTLB	RL4,FLAGS
 1060/ 7D2 : A930                       	INC	R3		; Get next reserved word
 1061/ 7D4 : 8CC9                       	LDCTLB	FLAGS,RL4
 1062/ 7D6 : 0430                       	ORB	RH0,@R3
 1063/ 7D8 : 8D83                       	RESFLG	C		; Start of word?
 1064/ 7DA : 5E0D 07D0                  	JP	PL,GETNXT	; No - move on
 1065/ 7DE : A810                       	INCB	RH1,#1		; Increment token value
 1066/ 7E0 : 2030                       	LDB	RH0,@R3		; Get byte from table
 1067/ 7E2 : 0600 7F7F                  	ANDB	RH0,#01111111B	; Strip bit 7
 1068/ 7E6 : 9E06                       	RET	Z		; Return if end of list
 1069/ 7E8 : 8A90                       	CPB	RH0,RL1		; Same character as in buffer?
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 19 - 2023/10/12 18時22分27秒


 1070/ 7EA : 5E0E 07D0                  	JP	NZ,GETNXT	; No - get next word
 1071/ 7EE : AD23                       	EX	R3,R2
 1072/ 7F0 : 93F3                       	PUSH	@R15,R3		; Save start of word
 1073/ 7F2 :                            ;
 1074/ 7F2 :                            NXTBYT:
 1075/ 7F2 : 8CC1                       	LDCTLB	RL4,FLAGS
 1076/ 7F4 : A920                       	INC	R2		; Look through rest of word
 1077/ 7F6 : 8CC9                       	LDCTLB	FLAGS,RL4
 1078/ 7F8 : 2020                       	LDB	RH0,@R2		; Get byte from table
 1079/ 7FA : 8400                       	ORB	RH0,RH0
 1080/ 7FC : 8D83                       	RESFLG	C		; End of word ?
 1081/ 7FE : 5E05 0834                  	JP	MI,MATCH	; Yes - Match found
 1082/ 802 : A009                       	LDB	RL1,RH0		; Save it
 1083/ 804 : A010                       	LDB	RH0,RH1		; Get token value
 1084/ 806 : 0A00 8888                  	CPB	RH0,#ZGOTO	; Is it "GOTO" token ?
 1085/ 80A : 5E0E 0818                  	JP	NZ,NOSPC	; No - Don't allow spaces
 1086/ 80E : 5F00 0C96                  	CALL	GETCHR		; Get next character
 1087/ 812 : 8CC1                       	LDCTLB	RL4,FLAGS
 1088/ 814 : AB30                       	DEC	R3,#1		; Cancel increment from GETCHR
 1089/ 816 : 8CC9                       	LDCTLB	FLAGS,RL4
 1090/ 818 :                            NOSPC:
 1091/ 818 : A930                       	INC	R3		; Next byte
 1092/ 81A : 2030                       	LDB	RH0,@R3		; Get byte
 1093/ 81C : 0A00 6161                  	CPB	RH0,#'a'	; Less than 'a' ?
 1094/ 820 : 5E07 0828                  	JP	C,NOCHNG	; Yes - don't change
 1095/ 824 : 0600 5F5F                  	ANDB	RH0,#01011111B	; Make upper case
 1096/ 828 :                            NOCHNG:
 1097/ 828 : 8A90                       	CPB	RH0,RL1		; Same as in buffer ?
 1098/ 82A : 5E06 07F2                  	JP	Z,NXTBYT	; Yes - keep testing
 1099/ 82E : 97F3                       	POP	R3,@R15		; Get back start of word
 1100/ 830 : 5E08 07CC                  	JP	SEARCH		; Look at next word
 1101/ 834 :                            ;
 1102/ 834 :                            MATCH:
 1103/ 834 : A019                       	LDB	RL1,RH1		; Word found - Save token value
 1104/ 836 : 97F0                       	POP	R0,@R15		; Throw away return
 1105/ 838 : 8C89                       	LDCTLB	FLAGS,RL0
 1106/ 83A : AD23                       	EX	R3,R2
 1107/ 83C : 9E08                       	RET			; Return to "RETNAD"
 1108/ 83E :                            RETNAD:
 1109/ 83E : AD23                       	EX	R3,R2		; Get address in string
 1110/ 840 : A090                       	LDB	RH0,RL1		; Get token value
 1111/ 842 : 97F1                       	POP	R1,@R15		; Restore buffer length
 1112/ 844 : 97F2                       	POP	R2,@R15		; Get destination address
 1113/ 846 :                            MOVDIR:
 1114/ 846 : 8CC1                       	LDCTLB	RL4,FLAGS
 1115/ 848 : A930                       	INC	R3		; Next source in buffer
 1116/ 84A : 8CC9                       	LDCTLB	FLAGS,RL4
 1117/ 84C : 2E20                       	LDB	@R2,RH0		; Put byte in buffer
 1118/ 84E : 8CC1                       	LDCTLB	RL4,FLAGS
 1119/ 850 : A920                       	INC	R2		; Move up buffer
 1120/ 852 : 8CC9                       	LDCTLB	FLAGS,RL4
 1121/ 854 : A890                       	INCB	RL1,#1		; Increment length of buffer
 1122/ 856 : 0200 3A3A                  	SUBB	RH0,#':'	; End of statement?
 1123/ 85A : 5E06 0866                  	JP	Z,SETLIT	; Jump if multi-statement line
 1124/ 85E : 0A00 4949                  	CPB	RH0,#ZDATA-3AH	; Is it DATA statement ?
 1125/ 862 : 5E0E 086A                  	JP	NZ,TSTREM	; No - see if REM
 1126/ 866 :                            SETLIT:
 1127/ 866 : 6E00 810D                  	LDB	(DATFLG),RH0	; Set literal flag
 1128/ 86A :                            TSTREM:
 1129/ 86A : 0200 5454                  	SUBB	RH0,#ZREM-3AH	; Is it REM?
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 20 - 2023/10/12 18時22分27秒


 1130/ 86E : 5E0E 075E                  	JP	NZ,CRNCLP	; No - Leave flag
 1131/ 872 : A001                       	LDB	RH1,RH0		; Copy rest of buffer
 1132/ 874 :                            NXTCHR:
 1133/ 874 : 2030                       	LDB	RH0,@R3		; Get byte
 1134/ 876 : 8400                       	ORB	RH0,RH0
 1135/ 878 :                            ;	RESFLG	C		; End of line ?
 1136/ 878 : 5E06 0892                  	JP	Z,ENDBUF	; Yes - Terminate buffer
 1137/ 87C : 8A10                       	CPB	RH0,RH1		; End of statement ?
 1138/ 87E : 5E06 0846                  	JP	Z,MOVDIR	; Yes - Get next one
 1139/ 882 :                            CPYLIT:
 1140/ 882 : 8CC1                       	LDCTLB	RL4,FLAGS
 1141/ 884 : A930                       	INC	R3		; Move up source string
 1142/ 886 : 2E20                       	LDB	@R2,RH0		; Save in destination
 1143/ 888 : A890                       	INCB	RL1,#1		; Increment length
 1144/ 88A : A920                       	INC	R2		; Move up destination
 1145/ 88C : 8CC9                       	LDCTLB	FLAGS,RL4
 1146/ 88E : 5E08 0874                  	JP	NXTCHR		; Repeat
 1147/ 892 :                            ;
 1148/ 892 :                            ENDBUF:
 1149/ 892 : 2103 80BF                  	LD	R3,#BUFFER-1	; Point to start of buffer
 1150/ 896 : 2E20                       	LDB	@R2,RH0		; Mark end of buffer (A = 00)
 1151/ 898 : 8CC1                       	LDCTLB	RL4,FLAGS
 1152/ 89A : A920                       	INC	R2
 1153/ 89C : 8CC9                       	LDCTLB	FLAGS,RL4
 1154/ 89E : 2E20                       	LDB	@R2,RH0		; A = 00
 1155/ 8A0 : 8CC1                       	LDCTLB	RL4,FLAGS
 1156/ 8A2 : A920                       	INC	R2
 1157/ 8A4 : 8CC9                       	LDCTLB	FLAGS,RL4
 1158/ 8A6 : 2E20                       	LDB	@R2,RH0		; A = 00
 1159/ 8A8 : 9E08                       	RET
 1160/ 8AA :                            ;
 1161/ 8AA :                            DODEL:
 1162/ 8AA : 6000 809F                  	LDB	RH0,(NULFLG)	; Get null flag status
 1163/ 8AE : 8400                       	ORB	RH0,RH0
 1164/ 8B0 : 8D83                       	RESFLG	C		; Is it zero?
 1165/ 8B2 : C000                       	LDB	RH0,#0		; Zero A - Leave flags
 1166/ 8B4 : 6E00 809F                  	LDB	(NULFLG),RH0	; Zero null flag
 1167/ 8B8 : 5E0E 08C8                  	JP	NZ,ECHDEL	; Set - Echo it
 1168/ 8BC : AA10                       	DECB	RH1,#1		; Decrement length
 1169/ 8BE : 5E06 08FA                  	JP	Z,GETLIN	; Get line again if empty
 1170/ 8C2 : 5F00 09E6                  	CALL	OUTC		; Output null character
 1171/ 8C6 : E801                       	JR	ECHDEL1		; Skip "DEC B"
 1172/ 8C8 :                            ECHDEL:
 1173/ 8C8 : AA10                       	DECB	RH1,#1		; Count bytes in buffer
 1174/ 8CA :                            ECHDEL1:
 1175/ 8CA : 8CC1                       	LDCTLB	RL4,FLAGS
 1176/ 8CC : AB30                       	DEC	R3,#1		; Back space buffer
 1177/ 8CE : 8CC9                       	LDCTLB	FLAGS,RL4
 1178/ 8D0 : 5E06 08EE                  	JP	Z,OTKLN		; No buffer - Try again
 1179/ 8D4 : 2030                       	LDB	RH0,@R3		; Get deleted byte
 1180/ 8D6 : 5F00 09E6                  	CALL	OUTC		; Echo it
 1181/ 8DA : 5E08 0908                  	JP	MORINP		; Get more input
 1182/ 8DE :                            ;
 1183/ 8DE :                            DELCHR:
 1184/ 8DE : AA10                       	DECB	RH1,#1		; Count bytes in buffer
 1185/ 8E0 : 8CC1                       	LDCTLB	RL4,FLAGS
 1186/ 8E2 : AB30                       	DEC	R3,#1		; Back space buffer
 1187/ 8E4 : 8CC9                       	LDCTLB	FLAGS,RL4
 1188/ 8E6 : 5F00 09E6                  	CALL	OUTC		; Output character in A
 1189/ 8EA : 5E0E 0908                  	JP	NZ,MORINP	; Not end - Get more
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 21 - 2023/10/12 18時22分27秒


 1190/ 8EE :                            OTKLN:
 1191/ 8EE : 5F00 09E6                  	CALL	OUTC		; Output character in A
 1192/ 8F2 :                            KILIN:
 1193/ 8F2 : 5F00 1114                  	CALL	PRCRLF		; Output CRLF
 1194/ 8F6 : 5E08 08FA                  	JP	TTYLIN		; Get line again
 1195/ 8FA :                            ;
 1196/ 8FA :                            GETLIN:
 1197/ 8FA :                            TTYLIN:
 1198/ 8FA : 2103 80C0                  	LD	R3,#BUFFER	; Get a line by character
 1199/ 8FE : C101                       	LDB	RH1,#1		; Set buffer as empty
 1200/ 900 : 8800                       	XORB	RH0,RH0
 1201/ 902 : 8D83                       	RESFLG	C
 1202/ 904 : 6E00 809F                  	LDB	(NULFLG),RH0	; Clear null flag
 1203/ 908 :                            MORINP:
 1204/ 908 : 5F00 0A34                  	CALL	CLOTST		; Get character and test ^O
 1205/ 90C : A009                       	LDB	RL1,RH0		; Save character in C
 1206/ 90E : 0A00 7F7F                  	CPB	RH0,#DEL	; Delete character?
 1207/ 912 : 5E06 08AA                  	JP	Z,DODEL		; Yes - Process it
 1208/ 916 : 6000 809F                  	LDB	RH0,(NULFLG)	; Get null flag
 1209/ 91A : 8400                       	ORB	RH0,RH0
 1210/ 91C : 8D83                       	RESFLG	C		; Test null flag status
 1211/ 91E : 5E06 0930                  	JP	Z,PROCES	; Reset - Process character
 1212/ 922 : C000                       	LDB	RH0,#0		; Set a null
 1213/ 924 : 5F00 09E6                  	CALL	OUTC		; Output null
 1214/ 928 : 8800                       	XORB	RH0,RH0
 1215/ 92A : 8D83                       	RESFLG	C		; Clear A
 1216/ 92C : 6E00 809F                  	LDB	(NULFLG),RH0	; Reset null flag
 1217/ 930 :                            PROCES:
 1218/ 930 : A090                       	LDB	RH0,RL1		; Get character
 1219/ 932 : 0A00 0707                  	CPB	RH0,#CTRLG	; Bell?
 1220/ 936 : 5E06 09A0                  	JP	Z,PUTCTL	; Yes - Save it
 1221/ 93A : 0A00 0303                  	CPB	RH0,#CTRLC	; Is it control "C"?
 1222/ 93E : EE02                       	JR	NZ,PROCES1
 1223/ 940 : 5F00 1114                  	CALL	PRCRLF		; Yes - Output CRLF
 1224/ 944 :                            PROCES1:
 1225/ 944 : 8D81                       	SETFLG	C		; Flag break
 1226/ 946 : 9E06                       	RET	Z		; Return if control "C"
 1227/ 948 : 0A00 0D0D                  	CPB	RH0,#CR		; Is it enter?
 1228/ 94C : 5E06 110C                  	JP	Z,ENDINP	; Yes - Terminate input
 1229/ 950 : 0A00 1515                  	CPB	RH0,#CTRLU	; Is it control "U"?
 1230/ 954 : 5E06 08F2                  	JP	Z,KILIN		; Yes - Get another line
 1231/ 958 : 0A00 4040                  	CPB	RH0,#'@'	; Is it "kill line"?
 1232/ 95C : 5E06 08EE                  	JP	Z,OTKLN		; Yes - Kill line
 1233/ 960 : 0A00 5F5F                  	CPB	RH0,#'_'	; Is it delete?
 1234/ 964 : 5E06 08DE                  	JP	Z,DELCHR	; Yes - Delete character
 1235/ 968 : 0A00 0808                  	CPB	RH0,#BKSP	; Is it backspace?
 1236/ 96C : 5E06 08DE                  	JP	Z,DELCHR	; Yes - Delete character
 1237/ 970 : 0A00 1212                  	CPB	RH0,#CTRLR	; Is it control "R"?
 1238/ 974 : 5E0E 0998                  	JP	NZ,PUTBUF	; No - Put in buffer
 1239/ 978 : 93F1                       	PUSH	@R15,R1		; Save buffer length
 1240/ 97A : 93F2                       	PUSH	@R15,R2		; Save DE
 1241/ 97C : 93F3                       	PUSH	@R15,R3		; Save buffer address
 1242/ 97E : 0C35 0000                  	LDB	@R3,#0		; Mark end of buffer
 1243/ 982 : 5F00 3072                  	CALL	OUTNCR		; Output and do CRLF
 1244/ 986 : 2103 80C0                  	LD	R3,#BUFFER	; Point to buffer start
 1245/ 98A : 5F00 1CDA                  	CALL	PRS		; Output buffer
 1246/ 98E : 97F3                       	POP	R3,@R15		; Restore buffer address
 1247/ 990 : 97F2                       	POP	R2,@R15		; Restore DE
 1248/ 992 : 97F1                       	POP	R1,@R15		; Restore buffer length
 1249/ 994 : 5E08 0908                  	JP	MORINP		; Get another character
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 22 - 2023/10/12 18時22分27秒


 1250/ 998 :                            ;
 1251/ 998 :                            PUTBUF:
 1252/ 998 : 0A00 2020                  	CPB	RH0,#' '	; Is it a control code?
 1253/ 99C : 5E07 0908                  	JP	C,MORINP	; Yes - Ignore
 1254/ 9A0 :                            PUTCTL:
 1255/ 9A0 : A010                       	LDB	RH0,RH1		; Get number of bytes in buffer
 1256/ 9A2 : 0A00 4949                  	CPB	RH0,#72+1	; Test for line overflow
 1257/ 9A6 : C007                       	LDB	RH0,#CTRLG	; Set a bell
 1258/ 9A8 : 5E0F 09C4                  	JP	NC,OUTNBS	; Ring bell if buffer full
 1259/ 9AC : A090                       	LDB	RH0,RL1		; Get character
 1260/ 9AE : 2E39                       	LDB	@R3,RL1		; Save in buffer
 1261/ 9B0 : 6E00 812B                  	LDB	(LSTBIN),RH0	; Save last input byte
 1262/ 9B4 : 8CC1                       	LDCTLB	RL4,FLAGS
 1263/ 9B6 : A930                       	INC	R3
 1264/ 9B8 : 8CC9                       	LDCTLB	FLAGS,RL4	; Move up buffer
 1265/ 9BA : A810                       	INCB	RH1,#1		; Increment length
 1266/ 9BC :                            OUTIT:
 1267/ 9BC : 5F00 09E6                  	CALL	OUTC		; Output the character entered
 1268/ 9C0 : 5E08 0908                  	JP	MORINP		; Get another character
 1269/ 9C4 :                            ;
 1270/ 9C4 :                            OUTNBS:
 1271/ 9C4 : 5F00 09E6                  	CALL	OUTC		; Output bell and back over it
 1272/ 9C8 : C008                       	LDB	RH0,#BKSP	; Set back space
 1273/ 9CA : 5E08 09BC                  	JP	OUTIT		; Output it and get more
 1274/ 9CE :                            ;
 1275/ 9CE :                            CPDEHL:
 1276/ 9CE : A030                       	LDB	RH0,RH3		; Get H
 1277/ 9D0 : 8220                       	SUBB	RH0,RH2		; Compare with D
 1278/ 9D2 : 9E0E                       	RET	NZ		; Different - Exit
 1279/ 9D4 : A0B0                       	LDB	RH0,RL3		; Get L
 1280/ 9D6 : 82A0                       	SUBB	RH0,RL2		; Compare with E
 1281/ 9D8 : 9E08                       	RET			; Return status
 1282/ 9DA :                            ;
 1283/ 9DA :                            CHKSYN:
 1284/ 9DA : 2030                       	LDB	RH0,@R3		; Check syntax of character
 1285/ 9DC : 8A40                       	CPB	RH0,RH4		; Same as in code string?
 1286/ 9DE :                            ;	EX	@R15,R3		; Address of test byte
 1287/ 9DE :                            ;	CPB	RH0,@R3		; Same as in code string?
 1288/ 9DE :                            ;	INC	R3
 1289/ 9DE :                            ;	EX	@R15,R3		; Put it back
 1290/ 9DE : 5E06 0C96                  	JP	Z,GETCHR	; Yes - Get next character
 1291/ 9E2 : 5E08 04D0                  	JP	SNERR		; Different - ?SN Error
 1292/ 9E6 :                            ;
 1293/ 9E6 :                            OUTC:
 1294/ 9E6 : 8C81                       	LDCTLB	RL0,FLAGS
 1295/ 9E8 : 93F0                       	PUSH	@R15,R0		; Save character
 1296/ 9EA : 6000 80A0                  	LDB	RH0,(CTLOFG)	; Get control "O" flag
 1297/ 9EE : 8400                       	ORB	RH0,RH0
 1298/ 9F0 : 8D83                       	RESFLG	C		; Is it set?
 1299/ 9F2 : 5E0E 1D44                  	JP	NZ,POPAF	; Yes - don't output
 1300/ 9F6 : 97F0                       	POP	R0,@R15		; Restore character
 1301/ 9F8 : 8C89                       	LDCTLB	FLAGS,RL0
 1302/ 9FA : 93F1                       	PUSH	@R15,R1		; Save buffer length
 1303/ 9FC : 8C81                       	LDCTLB	RL0,FLAGS
 1304/ 9FE : 93F0                       	PUSH	@R15,R0		; Save character
 1305/ A00 : 0A00 2020                  	CPB	RH0,#' '	; Is it a control code?
 1306/ A04 : 5E07 0A28                  	JP	C,DINPOS	; Yes - Don't INC POS(X)
 1307/ A08 : 6000 809D                  	LDB	RH0,(LWIDTH)	; Get line width
 1308/ A0C : A001                       	LDB	RH1,RH0		; To B
 1309/ A0E : 6000 810A                  	LDB	RH0,(CURPOS)	; Get cursor position
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 23 - 2023/10/12 18時22分27秒


 1310/ A12 : A810                       	INCB	RH1,#1		; Width 255?
 1311/ A14 : 5E06 0A22                  	JP	Z,INCLEN	; Yes - No width limit
 1312/ A18 : AA10                       	DECB	RH1,#1		; Restore width
 1313/ A1A : 8A10                       	CPB	RH0,RH1		; At end of line?
 1314/ A1C : EE02                       	JR	NZ,INCLEN
 1315/ A1E : 5F00 1114                  	CALL	PRCRLF		; Yes - output CRLF
 1316/ A22 :                            INCLEN:
 1317/ A22 : A800                       	INCB	RH0,#1		; Move on one character
 1318/ A24 : 6E00 810A                  	LDB	(CURPOS),RH0	; Save new position
 1319/ A28 :                            DINPOS:
 1320/ A28 : 97F0                       	POP	R0,@R15		; Restore character
 1321/ A2A : 8C89                       	LDCTLB	FLAGS,RL0
 1322/ A2C : 97F1                       	POP	R1,@R15		; Restore buffer length
 1323/ A2E : 5F00 3050                  	CALL	MONOUT		; Send it
 1324/ A32 : 9E08                       	RET
 1325/ A34 :                            ;
 1326/ A34 :                            CLOTST:
 1327/ A34 : 5F00 2E30                  	CALL	GETINP		; Get input character
 1328/ A38 : 0600 7F7F                  	ANDB	RH0,#01111111B	; Strip bit 7
 1329/ A3C : 0A00 0F0F                  	CPB	RH0,#CTRLO	; Is it control "O"?
 1330/ A40 : 9E0E                       	RET	NZ		; No don't flip flag
 1331/ A42 : 6000 80A0                  	LDB	RH0,(CTLOFG)	; Get flag
 1332/ A46 : 8CC1                       	LDCTLB	RL4,FLAGS
 1333/ A48 : 8C00                       	COMB	RH0			; Flip it
 1334/ A4A : 8CC9                       	LDCTLB	FLAGS,RL4
 1335/ A4C : 6E00 80A0                  	LDB	(CTLOFG),RH0	; Put it back
 1336/ A50 : 8800                       	XORB	RH0,RH0
 1337/ A52 : 8D83                       	RESFLG	C		; Null character
 1338/ A54 : 9E08                       	RET
 1339/ A56 :                            ;
 1340/ A56 :                            LIST:
 1341/ A56 : 5F00 0DF0                  	CALL	ATOH		; ASCII number to DE
 1342/ A5A : 9E0E                       	RET	NZ		; Return if anything extra
 1343/ A5C : 97F1                       	POP	R1,@R15		; Rubbish - Not needed
 1344/ A5E : 5F00 0676                  	CALL	SRCHLN		; Search for line number in DE
 1345/ A62 : 93F1                       	PUSH	@R15,R1		; Save address of line
 1346/ A64 : 5F00 0B02                  	CALL	SETLIN		; Set up lines counter
 1347/ A68 :                            LISTLP:
 1348/ A68 : 97F3                       	POP	R3,@R15		; Restore address of line
 1349/ A6A : 2039                       	LDB	RL1,@R3		; Get LSB of next line
 1350/ A6C : 8CC1                       	LDCTLB	RL4,FLAGS
 1351/ A6E : A930                       	INC	R3
 1352/ A70 : 8CC9                       	LDCTLB	FLAGS,RL4
 1353/ A72 : 2031                       	LDB	RH1,@R3		; Get MSB of next line
 1354/ A74 : 8CC1                       	LDCTLB	RL4,FLAGS
 1355/ A76 : A930                       	INC	R3
 1356/ A78 : 8CC9                       	LDCTLB	FLAGS,RL4
 1357/ A7A : A010                       	LDB	RH0,RH1		; BC = 0 (End of program)?
 1358/ A7C : 8490                       	ORB	RH0,RL1
 1359/ A7E : 8D83                       	RESFLG	C
 1360/ A80 : 5E06 053C                  	JP	Z,PRNTOK	; Yes - Go to command mode
 1361/ A84 : 5F00 0B10                  	CALL	COUNT		; Count lines
 1362/ A88 : 5F00 0CE2                  	CALL	TSTBRK		; Test for break key
 1363/ A8C : 93F1                       	PUSH	@R15,R1		; Save address of next line
 1364/ A8E : 5F00 1114                  	CALL	PRCRLF		; Output CRLF
 1365/ A92 : 203A                       	LDB	RL2,@R3		; Get LSB of line number
 1366/ A94 : 8CC1                       	LDCTLB	RL4,FLAGS
 1367/ A96 : A930                       	INC	R3
 1368/ A98 : 8CC9                       	LDCTLB	FLAGS,RL4
 1369/ A9A : 2032                       	LDB	RH2,@R3		; Get MSB of line number
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 24 - 2023/10/12 18時22分27秒


 1370/ A9C : 8CC1                       	LDCTLB	RL4,FLAGS
 1371/ A9E : A930                       	INC	R3
 1372/ AA0 : 8CC9                       	LDCTLB	FLAGS,RL4
 1373/ AA2 : 93F3                       	PUSH	@R15,R3		; Save address of line start
 1374/ AA4 : AD23                       	EX	R3,R2		; Line number to HL
 1375/ AA6 : 5F00 2908                  	CALL	PRNTHL		; Output line number in decimal
 1376/ AAA : C020                       	LDB	RH0,#' '	; Space after line number
 1377/ AAC : 97F3                       	POP	R3,@R15		; Restore start of line address
 1378/ AAE :                            LSTLP2:
 1379/ AAE : 5F00 09E6                  	CALL	OUTC		; Output character in A
 1380/ AB2 :                            LSTLP3:
 1381/ AB2 : 2030                       	LDB	RH0,@R3		; Get next byte in line
 1382/ AB4 : 8400                       	ORB	RH0,RH0
 1383/ AB6 : 8D83                       	RESFLG	C		; End of line?
 1384/ AB8 : 8CC1                       	LDCTLB	RL4,FLAGS
 1385/ ABA : A930                       	INC	R3		; To next byte in line
 1386/ ABC : 8CC9                       	LDCTLB	FLAGS,RL4
 1387/ ABE : 5E06 0A68                  	JP	Z,LISTLP	; Yes - get next line
 1388/ AC2 : 5E0D 0AAE                  	JP	PL,LSTLP2	; No token - output it
 1389/ AC6 : 0200 7F7F                  	SUBB	RH0,#ZEND-1	; Find and output word
 1390/ ACA : A009                       	LDB	RL1,RH0		; Token offset+1 to C
 1391/ ACC : 2102 01FC                  	LD	R2,#WORDS	; Reserved word list
 1392/ AD0 :                            FNDTOK:
 1393/ AD0 : 2020                       	LDB	RH0,@R2		; Get character in list
 1394/ AD2 : 8CC1                       	LDCTLB	RL4,FLAGS
 1395/ AD4 : A920                       	INC	R2		; Move on to next
 1396/ AD6 : 8CC9                       	LDCTLB	FLAGS,RL4
 1397/ AD8 : 8400                       	ORB	RH0,RH0
 1398/ ADA : 8D83                       	RESFLG	C		; Is it start of word?
 1399/ ADC : 5E0D 0AD0                  	JP	PL,FNDTOK	; No - Keep looking for word
 1400/ AE0 : AA90                       	DECB	RL1,#1		; Count words
 1401/ AE2 : 5E0E 0AD0                  	JP	NZ,FNDTOK	; Not there - keep looking
 1402/ AE6 :                            OUTWRD:
 1403/ AE6 : 0600 7F7F                  	ANDB	RH0,#01111111B	; Strip bit 7
 1404/ AEA : 5F00 09E6                  	CALL	OUTC		; Output first character
 1405/ AEE : 2020                       	LDB	RH0,@R2		; Get next character
 1406/ AF0 : 8CC1                       	LDCTLB	RL4,FLAGS
 1407/ AF2 : A920                       	INC	R2		; Move on to next
 1408/ AF4 : 8CC9                       	LDCTLB	FLAGS,RL4
 1409/ AF6 : 8400                       	ORB	RH0,RH0
 1410/ AF8 : 8D83                       	RESFLG	C		; Is it end of word?
 1411/ AFA : 5E0D 0AE6                  	JP	PL,OUTWRD	; No - output the rest
 1412/ AFE : 5E08 0AB2                  	JP	LSTLP3		; Next byte in line
 1413/ B02 :                            ;
 1414/ B02 :                            SETLIN:
 1415/ B02 : 93F3                       	PUSH	@R15,R3		; Set up LINES counter
 1416/ B04 : 6103 80A4                  	LD	R3,(LINESN)	; Get LINES number
 1417/ B08 : 6F03 80A2                  	LD	(LINESC),R3	; Save in LINES counter
 1418/ B0C : 97F3                       	POP	R3,@R15
 1419/ B0E : 9E08                       	RET
 1420/ B10 :                            ;
 1421/ B10 :                            COUNT:
 1422/ B10 : 93F3                       	PUSH	@R15,R3		; Save code string address
 1423/ B12 : 93F2                       	PUSH	@R15,R2
 1424/ B14 : 6103 80A2                  	LD	R3,(LINESC)	; Get LINES counter
 1425/ B18 : 2102 FFFF                  	LD	R2,#-1
 1426/ B1C : B523                       	ADC	R3,R2		; Decrement
 1427/ B1E : 6F03 80A2                  	LD	(LINESC),R3	; Put it back
 1428/ B22 : 97F2                       	POP	R2,@R15
 1429/ B24 : 97F3                       	POP	R3,@R15		; Restore code string address
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 25 - 2023/10/12 18時22分27秒


 1430/ B26 : 9E0D                       	RET	PL		; Return if more lines to go
 1431/ B28 : 93F3                       	PUSH	@R15,R3		; Save code string address
 1432/ B2A : 6103 80A4                  	LD	R3,(LINESN)	; Get LINES number
 1433/ B2E : 6F03 80A2                  	LD	(LINESC),R3	; Reset LINES counter
 1434/ B32 : 5F00 2E30                  	CALL	GETINP		; Get input character
 1435/ B36 : 0A00 0303                  	CPB	RH0,#CTRLC	; Is it control "C"?
 1436/ B3A : 5E06 0B44                  	JP	Z,RSLNBK	; Yes - Reset LINES and break
 1437/ B3E : 97F3                       	POP	R3,@R15		; Restore code string address
 1438/ B40 : 5E08 0B10                  	JP	COUNT		; Keep on counting
 1439/ B44 :                            ;
 1440/ B44 :                            RSLNBK:
 1441/ B44 : 6103 80A4                  	LD	R3,(LINESN)	; Get LINES number
 1442/ B48 : 6F03 80A2                  	LD	(LINESC),R3	; Reset LINES counter
 1443/ B4C : 5E08 012C                  	JP	BRKRET		; Go and output "Break"
 1444/ B50 :                            ;
 1445/ B50 :                            FOR:
 1446/ B50 : C064                       	LDB	RH0,#64H	; Flag "FOR" assignment
 1447/ B52 : 6E00 812A                  	LDB	(FORFLG),RH0	; Save "FOR" flag
 1448/ B56 : 5F00 0F74                  	CALL	LET		; Set up initial index
 1449/ B5A : 97F1                       	POP	R1,@R15		; Drop RETurn address
 1450/ B5C : 93F3                       	PUSH	@R15,R3		; Save code string address
 1451/ B5E : 5F00 0F48                  	CALL	DATA		; Get next statement address
 1452/ B62 : 6F03 8126                  	LD	(LOOPST),R3	; Save it for start of loop
 1453/ B66 : 2103 0002                  	LD	R3,#2		; Offset for "FOR" block
 1454/ B6A : 81F3                       	ADD	R3,R15		; Point to it
 1455/ B6C :                            FORSLP:
 1456/ B6C : 5F00 0444                  	CALL	LOKFOR		; Look for existing "FOR" block
 1457/ B70 : 97F2                       	POP	R2,@R15		; Get code string address
 1458/ B72 : 5E0E 0B9E                  	JP	NZ,FORFND	; No nesting found
 1459/ B76 : 8113                       	ADD	R3,R1		; Move into "FOR" block
 1460/ B78 : 93F2                       	PUSH	@R15,R2		; Save code string address
 1461/ B7A : 8CC1                       	LDCTLB	RL4,FLAGS
 1462/ B7C : AB30                       	DEC	R3,#1
 1463/ B7E : 2032                       	LDB	RH2,@R3		; Get MSB of loop statement
 1464/ B80 : AB30                       	DEC	R3,#1
 1465/ B82 : 203A                       	LDB	RL2,@R3		; Get LSB of loop statement
 1466/ B84 : A930                       	INC	R3
 1467/ B86 : A930                       	INC	R3
 1468/ B88 : 8CC9                       	LDCTLB	FLAGS,RL4
 1469/ B8A : 93F3                       	PUSH	@R15,R3		; Save block address
 1470/ B8C : 6103 8126                  	LD	R3,(LOOPST)	; Get address of loop statement
 1471/ B90 : 5F00 09CE                  	CALL	CPDEHL		; Compare the FOR loops
 1472/ B94 : 97F3                       	POP	R3,@R15		; Restore block address
 1473/ B96 : 5E0E 0B6C                  	JP	NZ,FORSLP	; Different FORs - Find another
 1474/ B9A : 97F2                       	POP	R2,@R15		; Restore code string address
 1475/ B9C : A13F                       	LD	R15,R3		; Remove all nested loops
 1476/ B9E :                            ;
 1477/ B9E :                            FORFND:
 1478/ B9E : AD23                       	EX	R3,R2		; Code string address to HL
 1479/ BA0 :                            ;	LDB	RL1,#8
 1480/ BA0 : C909                       	LDB	RL1,#9		; @@@@
 1481/ BA2 : 5F00 049C                  	CALL	CHKSTK		; Check for 8 levels of stack
 1482/ BA6 : 93F3                       	PUSH	@R15,R3		; Save code string address
 1483/ BA8 : 6103 8126                  	LD	R3,(LOOPST)	; Get first statement of loop
 1484/ BAC : 2DF3                       	EX	@R15,R3		; Save and restore code string
 1485/ BAE : 93F3                       	PUSH	@R15,R3		; Re-save code string address
 1486/ BB0 : 6103 80BC                  	LD	R3,(LINEAT)	; Get current line number
 1487/ BB4 : 2DF3                       	EX	@R15,R3		; Save and restore code string
 1488/ BB6 : 5F00 141C                  	CALL	TSTNUM		; Make sure it's a number
 1489/ BBA : C4A6                       	LD	RH4,#ZTO	; "TO" token
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 26 - 2023/10/12 18時22分27秒


 1490/ BBC : 5F00 09DA                  	CALL	CHKSYN		; Make sure "TO" is next
 1491/ BC0 : 5F00 1418                  	CALL	GETNUM		; Get "TO" expression value
 1492/ BC4 : 93F3                       	PUSH	@R15,R3		; Save code string address
 1493/ BC6 : 5F00 267E                  	CALL	BCDEFP		; Move "TO" value to BCDE
 1494/ BCA : 97F3                       	POP	R3,@R15		; Restore code string address
 1495/ BCC : AC91                       	EXB	RH1,RL1
 1496/ BCE : ACA2                       	EXB	RH2,RL2
 1497/ BD0 : 93F1                       	PUSH	@R15,R1		; Save "TO" value in block
 1498/ BD2 : 93F2                       	PUSH	@R15,R2
 1499/ BD4 : 2101 8100                  	LD	R1,#8100H	; BCDE - 1 (default STEP)
 1500/ BD8 : A092                       	LDB	RH2,RL1		; C=0
 1501/ BDA : A02A                       	LDB	RL2,RH2		; D=0
 1502/ BDC : 2030                       	LDB	RH0,@R3		; Get next byte in code string
 1503/ BDE : 0A00 ABAB                  	CPB	RH0,#ZSTEP	; See if "STEP" is stated
 1504/ BE2 : C001                       	LDB	RH0,#1		; Sign of step = 1
 1505/ BE4 : 5E0E 0BFC                  	JP	NZ,SAVSTP	; No STEP given - Default to 1
 1506/ BE8 : 5F00 0C96                  	CALL	GETCHR		; Jump over "STEP" token
 1507/ BEC : 5F00 1418                  	CALL	GETNUM		; Get step value
 1508/ BF0 : 93F3                       	PUSH	@R15,R3		; Save code string address
 1509/ BF2 : 5F00 267E                  	CALL	BCDEFP		; Move STEP to BCDE
 1510/ BF6 : 5F00 25E8                  	CALL	TSTSGN		; Test sign of FPREG
 1511/ BFA : 97F3                       	POP	R3,@R15		; Restore code string address
 1512/ BFC :                            SAVSTP:
 1513/ BFC : AC91                       	EXB	RH1,RL1
 1514/ BFE : ACA2                       	EXB	RH2,RL2
 1515/ C00 :                            
 1516/ C00 : 93F1                       	PUSH	@R15,R1		; Save the STEP value in block
 1517/ C02 : 93F2                       	PUSH	@R15,R2
 1518/ C04 : 93F0                       	PUSH	@R15,R0		; Save sign of STEP
 1519/ C06 :                            ;	INC	R15		; Don't save flags
 1520/ C06 : 93F3                       	PUSH	@R15,R3		; Save code string address
 1521/ C08 : 6103 812E                  	LD	R3,(BRKLIN)	; Get address of index variable
 1522/ C0C : ACB3                       	EXB	RH3,RL3
 1523/ C0E : 2DF3                       	EX	@R15,R3		; Save and restore code string
 1524/ C10 :                            PUTFID:
 1525/ C10 :                            ;	LDB	RH1,#ZFOR	; "FOR" block marker
 1526/ C10 :                            ;	PUSH	@R15,R1		; Save it
 1527/ C10 :                            ;	INC	R15		; Don't save C
 1528/ C10 : C181                       	LDB	RH1,#ZFOR	; "FOR" block marker
 1529/ C12 : C900                       	LDB	RL1,#0		;
 1530/ C14 : 93F1                       	PUSH	@R15,R1		; Save it
 1531/ C16 :                            ;
 1532/ C16 :                            RUNCNT:
 1533/ C16 : 5F00 0CE2                  	CALL	TSTBRK		; Execution driver - Test break
 1534/ C1A : 6F03 812E                  	LD	(BRKLIN),R3	; Save code address for break
 1535/ C1E : 2030                       	LDB	RH0,@R3		; Get next byte in code string
 1536/ C20 : 0A00 3A3A                  	CPB	RH0,#':'	; Multi statement line?
 1537/ C24 : 5E06 0C5E                  	JP	Z,EXCUTE	; Yes - Execute it
 1538/ C28 : 8400                       	ORB	RH0,RH0
 1539/ C2A : 8D83                       	RESFLG	C		; End of line?
 1540/ C2C : 5E0E 04D0                  	JP	NZ,SNERR	; No - Syntax error
 1541/ C30 : 8CC1                       	LDCTLB	RL4,FLAGS
 1542/ C32 : A930                       	INC	R3		; Point to address of next line
 1543/ C34 : 8CC9                       	LDCTLB	FLAGS,RL4
 1544/ C36 : 2030                       	LDB	RH0,@R3		; Get LSB of line pointer
 1545/ C38 : 8CC1                       	LDCTLB	RL4,FLAGS
 1546/ C3A : A930                       	INC	R3
 1547/ C3C : 8CC9                       	LDCTLB	FLAGS,RL4
 1548/ C3E : 0430                       	ORB	RH0,@R3
 1549/ C40 : 8D83                       	RESFLG	C		; Is it zero (End of prog)?
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 27 - 2023/10/12 18時22分27秒


 1550/ C42 : 5E06 0D30                  	JP	Z,ENDPRG	; Yes - Terminate execution
 1551/ C46 : 8CC1                       	LDCTLB	RL4,FLAGS
 1552/ C48 : A930                       	INC	R3		; Point to line number
 1553/ C4A : 8CC9                       	LDCTLB	FLAGS,RL4
 1554/ C4C : 203A                       	LDB	RL2,@R3		; Get LSB of line number
 1555/ C4E : 8CC1                       	LDCTLB	RL4,FLAGS
 1556/ C50 : A930                       	INC	R3
 1557/ C52 : 8CC9                       	LDCTLB	FLAGS,RL4
 1558/ C54 : 2032                       	LDB	RH2,@R3		; Get MSB of line number
 1559/ C56 : AD23                       	EX	R3,R2		; Line number to HL
 1560/ C58 : 6F03 80BC                  	LD	(LINEAT),R3	; Save as current line number
 1561/ C5C : AD23                       	EX	R3,R2		; Line number back to DE
 1562/ C5E :                            EXCUTE:
 1563/ C5E : 5F00 0C96                  	CALL	GETCHR		; Get key word
 1564/ C62 : 2102 0C16                  	LD	R2,#RUNCNT	; Where to RETurn to
 1565/ C66 : 93F2                       	PUSH	@R15,R2		; Save for RETurn
 1566/ C68 :                            IFJMP:
 1567/ C68 : 9E06                       	RET	Z		; Go to RUNCNT if end of STMT
 1568/ C6A :                            ONJMP:
 1569/ C6A : 0200 8080                  	SUBB	RH0,#ZEND	; Is it a token?
 1570/ C6E : 5E07 0F74                  	JP	C,LET		; No - try to assign it
 1571/ C72 : 0A00 2525                  	CPB	RH0,#ZNEW+1-ZEND; END to NEW ?
 1572/ C76 : 5E0F 04D0                  	JP	NC,SNERR	; Not a key word - ?SN Error
 1573/ C7A : B200                       	RLB	RH0,#1		; Double it
 1574/ C7C : A009                       	LDB	RL1,RH0		; BC = Offset into table
 1575/ C7E : C100                       	LDB	RH1,#0
 1576/ C80 : AD23                       	EX	R3,R2		; Save code string address
 1577/ C82 : 2103 031C                  	LD	R3,#WORDTB	; Keyword address table
 1578/ C86 : 8113                       	ADD	R3,R1		; Point to routine address
 1579/ C88 :                            ;	LDB	RL1,@R3		; Get LSB of routine address
 1580/ C88 : 2031                       	LDB	RH1,@R3		; Get LSB of routine address
 1581/ C8A : 8CC1                       	LDCTLB	RL4,FLAGS
 1582/ C8C : A930                       	INC	R3
 1583/ C8E : 8CC9                       	LDCTLB	FLAGS,RL4
 1584/ C90 :                            ;	LDB	RH1,@R3		; Get MSB of routine address
 1585/ C90 : 2039                       	LDB	RL1,@R3		; Get MSB of routine address
 1586/ C92 : 93F1                       	PUSH	@R15,R1		; Save routine address
 1587/ C94 : AD23                       	EX	R3,R2		; Restore code string address
 1588/ C96 :                            ;
 1589/ C96 :                            GETCHR:
 1590/ C96 : A930                       	INC	R3		; Point to next character
 1591/ C98 : 2030                       	LDB	RH0,@R3		; Get next code string byte
 1592/ C9A : 0A00 3A3A                  	CPB	RH0,#':'	; Z if ':'
 1593/ C9E : 9E0F                       	RET	NC		; NC if > "9"
 1594/ CA0 : 0A00 2020                  	CPB	RH0,#' '
 1595/ CA4 : 5E06 0C96                  	JP	Z,GETCHR	; Skip over spaces
 1596/ CA8 : 0A00 3030                  	CPB	RH0,#'0'
 1597/ CAC : 8D85                       	COMFLG	C		; NC if < '0'
 1598/ CAE : A800                       	INCB	RH0,#1		; Test for zero - Leave carry
 1599/ CB0 : AA00                       	DECB	RH0,#1		; Z if Null
 1600/ CB2 : 9E08                       	RET
 1601/ CB4 :                            ;
 1602/ CB4 :                            RESTOR:
 1603/ CB4 : AD23                       	EX	R3,R2		; Save code string address
 1604/ CB6 : 6103 80BE                  	LD	R3,(BASTXT)	; Point to start of program
 1605/ CBA : 5E06 0CD4                  	JP	Z,RESTNL	; Just RESTORE - reset pointer
 1606/ CBE : AD23                       	EX	R3,R2		; Restore code string address
 1607/ CC0 : 5F00 0DF0                  	CALL	ATOH		; Get line number to DE
 1608/ CC4 : 93F3                       	PUSH	@R15,R3		; Save code string address
 1609/ CC6 : 5F00 0676                  	CALL	SRCHLN		; Search for line number in DE
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 28 - 2023/10/12 18時22分27秒


 1610/ CCA : A013                       	LDB	RH3,RH1		; HL = Address of line
 1611/ CCC : A09B                       	LDB	RL3,RL1
 1612/ CCE : 97F2                       	POP	R2,@R15		; Restore code string address
 1613/ CD0 : 5E0F 0F02                  	JP	NC,ULERR	; ?UL Error if not found
 1614/ CD4 :                            RESTNL:
 1615/ CD4 : 8CC1                       	LDCTLB	RL4,FLAGS
 1616/ CD6 : AB30                       	DEC	R3,#1		; Byte before DATA statement
 1617/ CD8 : 8CC9                       	LDCTLB	FLAGS,RL4
 1618/ CDA :                            UPDATA:
 1619/ CDA : 6F03 813C                  	LD	(NXTDAT),R3	; Update DATA pointer
 1620/ CDE : AD23                       	EX	R3,R2		; Restore code string address
 1621/ CE0 : 9E08                       	RET
 1622/ CE2 :                            ;
 1623/ CE2 :                            
 1624/ CE2 :                            TSTBRK:
 1625/ CE2 : 5F00 0048                  	CALL	CONST		; Check input status
 1626/ CE6 : 9E06                       	RET	Z		; No key, go back
 1627/ CE8 : 5F00 0038                  	CALL	CONIN		; Get the key into A
 1628/ CEC : 0A00 1B1B                  	CPB	RH0,#ESC	; Escape key?
 1629/ CF0 : E60F                       	JR	Z,BRK		; Yes, break
 1630/ CF2 : 0A00 0303                  	CPB	RH0,#CTRLC	; <Ctrl-C>
 1631/ CF6 : E60C                       	JR	Z,BRK		; Yes, break
 1632/ CF8 : 0A00 1313                  	CPB	RH0,#CTRLS	; Stop scrolling?
 1633/ CFC : 9E0E                       	RET	NZ		; Other key, ignore
 1634/ CFE :                            ;
 1635/ CFE :                            
 1636/ CFE :                            STALL:
 1637/ CFE : 5F00 0038                  	CALL	CONIN		; Wait for key
 1638/ D02 : 0A00 1111                  	CPB	RH0,#CTRLQ	; Resume scrolling?
 1639/ D06 : 9E06                       	RET	Z		; Release the chokehold
 1640/ D08 : 0A00 0303                  	CPB	RH0,#CTRLC	; Second break?
 1641/ D0C : E604                       	JR	Z,STOP		; Break during hold exits prog
 1642/ D0E : E8F7                       	JR	STALL		; Loop until <Ctrl-Q> or <brk>
 1643/ D10 :                            ;
 1644/ D10 :                            BRK:
 1645/ D10 : C0FF                       	LDB	RH0,#0FFH	; Set BRKFLG
 1646/ D12 : 6E00 80A9                  	LDB	(BRKFLG),RH0	; Store it
 1647/ D16 :                            ;
 1648/ D16 :                            
 1649/ D16 :                            STOP:
 1650/ D16 : 9E0E                       	RET	NZ		; Exit if anything else
 1651/ D18 : 0400 C0C0                  	ORB	RH0,#11000000B	; Flag "STOP"
 1652/ D1C : 8D83                       	RESFLG	C
 1653/ D1E : E801                       	JR	PEND1
 1654/ D20 :                            PEND:
 1655/ D20 : 9E0E                       	RET	NZ		; Exit if anything else
 1656/ D22 :                            PEND1:
 1657/ D22 : 6F03 812E                  	LD	(BRKLIN),R3	; Save point of break
 1658/ D26 : E803                       	JR	INPBRK1		; Skip "OR 11111111B"
 1659/ D28 :                            INPBRK:
 1660/ D28 : 0400 FFFF                  	ORB	RH0,#11111111B	; Flag "Break" wanted
 1661/ D2C : 8D83                       	RESFLG	C
 1662/ D2E :                            INPBRK1:
 1663/ D2E : 97F1                       	POP	R1,@R15		; Return not needed and more
 1664/ D30 :                            ENDPRG:
 1665/ D30 : 6103 80BC                  	LD	R3,(LINEAT)	; Get current line number
 1666/ D34 : 8C81                       	LDCTLB	RL0,FLAGS
 1667/ D36 : 93F0                       	PUSH	@R15,R0		; Save STOP / END status
 1668/ D38 : A0B0                       	LDB	RH0,RL3		; Is it direct break?
 1669/ D3A : 8630                       	ANDB	RH0,RH3
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 29 - 2023/10/12 18時22分27秒


 1670/ D3C : 8D83                       	RESFLG	C
 1671/ D3E : A800                       	INCB	RH0,#1		; Line is -1 if direct break
 1672/ D40 : 5E06 0D50                  	JP	Z,NOLIN		; Yes - No line number
 1673/ D44 : 6F03 8132                  	LD	(ERRLIN),R3	; Save line of break
 1674/ D48 : 6103 812E                  	LD	R3,(BRKLIN)	; Get point of break
 1675/ D4C : 6F03 8134                  	LD	(CONTAD),R3	; Save point to CONTinue
 1676/ D50 :                            NOLIN:
 1677/ D50 : 8800                       	XORB	RH0,RH0
 1678/ D52 : 8D83                       	RESFLG	C
 1679/ D54 : 6E00 80A0                  	LDB	(CTLOFG),RH0	; Enable output
 1680/ D58 : 5F00 10FE                  	CALL	STTLIN		; Start a new line
 1681/ D5C : 97F0                       	POP	R0,@R15		; Restore STOP / END status
 1682/ D5E : 8C89                       	LDCTLB	FLAGS,RL0
 1683/ D60 : 2103 0438                  	LD	R3,#BRKMSG	; "Break" message
 1684/ D64 : 5E0E 0516                  	JP	NZ,ERRIN	; "in line" wanted?
 1685/ D68 : 5E08 053C                  	JP	PRNTOK		; Go to command mode
 1686/ D6C :                            ;
 1687/ D6C :                            CONT:
 1688/ D6C : 6103 8134                  	LD	R3,(CONTAD)	; Get CONTinue address
 1689/ D70 : A030                       	LDB	RH0,RH3		; Is it zero?
 1690/ D72 : 84B0                       	ORB	RH0,RL3
 1691/ D74 : 8D83                       	RESFLG	C
 1692/ D76 : CA20                       	LDB	RL2,#CN		; ?CN Error
 1693/ D78 : 5E06 04EA                  	JP	Z,ERROR		; Yes - output "?CN Error"
 1694/ D7C : AD23                       	EX	R3,R2		; Save code string address
 1695/ D7E : 6103 8132                  	LD	R3,(ERRLIN)	; Get line of last break
 1696/ D82 : 6F03 80BC                  	LD	(LINEAT),R3	; Set up current line number
 1697/ D86 : AD23                       	EX	R3,R2		; Restore code string address
 1698/ D88 : 9E08                       	RET			; CONTinue where left off
 1699/ D8A :                            ;
 1700/ D8A :                            NULL:
 1701/ D8A : 5F00 2164                  	CALL	GETINT		; Get integer 0-255
 1702/ D8E : 9E0E                       	RET	NZ		; Return if bad value
 1703/ D90 : 6E00 809C                  	LDB	(NULLS),RH0	; Set nulls number
 1704/ D94 : 9E08                       	RET
 1705/ D96 :                            ;
 1706/ D96 :                            ACCSUM:
 1707/ D96 : 93F3                       	PUSH	@R15,R3		; Save address in array
 1708/ D98 : 6103 80A6                  	LD	R3,(CHKSUM)	; Get check sum
 1709/ D9C : C100                       	LDB	RH1,#0		; BC - Value of byte
 1710/ D9E : A009                       	LDB	RL1,RH0
 1711/ DA0 : 8113                       	ADD	R3,R1		; Add byte to check sum
 1712/ DA2 : 6F03 80A6                  	LD	(CHKSUM),R3	; Re-save check sum
 1713/ DA6 : 97F3                       	POP	R3,@R15		; Restore address in array
 1714/ DA8 : 9E08                       	RET
 1715/ DAA :                            ;
 1716/ DAA :                            CHKLTR:
 1717/ DAA : 2030                       	LDB	RH0,@R3		; Get byte
 1718/ DAC : 0A00 4141                  	CPB	RH0,#'A'	; < 'a' ?
 1719/ DB0 : 9E07                       	RET	C		; Carry set if not letter
 1720/ DB2 : 0A00 5B5B                  	CPB	RH0,#'Z'+1	; > 'z' ?
 1721/ DB6 : 8D85                       	COMFLG	C
 1722/ DB8 : 9E08                       	RET			; Carry set if not letter
 1723/ DBA :                            ;
 1724/ DBA :                            FPSINT:
 1725/ DBA : 5F00 0C96                  	CALL	GETCHR		; Get next character
 1726/ DBE :                            POSINT:
 1727/ DBE : 5F00 1418                  	CALL	GETNUM		; Get integer 0 to 32767
 1728/ DC2 :                            DEPINT:
 1729/ DC2 : 5F00 25E8                  	CALL	TSTSGN		; Test sign of FPREG
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 30 - 2023/10/12 18時22分27秒


 1730/ DC6 : 5E05 0DEA                  	JP	MI,FCERR	; Negative - ?FC Error
 1731/ DCA :                            DEINT:
 1732/ DCA : 6000 8147                  	LDB	RH0,(FPEXP)	; Get integer value to DE
 1733/ DCE : 0A00 9090                  	CPB	RH0,#80H+16	; Exponent in range (16 bits)?
 1734/ DD2 : 5E07 274A                  	JP	C,FPINT		; Yes - convert it
 1735/ DD6 : 2101 9080                  	LD	R1,#9080H	; BCDE = -32768
 1736/ DDA : 2102 0000                  	LD	R2,#0000H
 1737/ DDE : 93F3                       	PUSH	@R15,R3		; Save code string address
 1738/ DE0 : 5F00 26E4                  	CALL	CMPNUM		; Compare FPREG with BCDE
 1739/ DE4 : 97F3                       	POP	R3,@R15		; Restore code string address
 1740/ DE6 : A092                       	LDB	RH2,RL1		; MSB to D
 1741/ DE8 : 9E06                       	RET	Z		; Return if in range
 1742/ DEA :                            FCERR:
 1743/ DEA : CA08                       	LDB	RL2,#FC		; ?FC Error
 1744/ DEC : 5E08 04EA                  	JP	ERROR		; Output error-
 1745/ DF0 :                            ;
 1746/ DF0 :                            ATOH:
 1747/ DF0 : 8CC1                       	LDCTLB	RL4,FLAGS
 1748/ DF2 : AB30                       	DEC	R3,#1		; ASCII number to DE binary
 1749/ DF4 : 8CC9                       	LDCTLB	FLAGS,RL4
 1750/ DF6 :                            GETLN:
 1751/ DF6 : 2102 0000                  	LD	R2,#0		; Get number to DE
 1752/ DFA :                            GTLNLP:
 1753/ DFA : 5F00 0C96                  	CALL	GETCHR		; Get next character
 1754/ DFE : 9E0F                       	RET	NC		; Exit if not a digit
 1755/ E00 : 93F3                       	PUSH	@R15,R3		; Save code string address
 1756/ E02 : 8C81                       	LDCTLB	RL0,FLAGS
 1757/ E04 : 93F0                       	PUSH	@R15,R0		; Save digit
 1758/ E06 : 2103 1998                  	LD	R3,#65529/10	; Largest number 65529
 1759/ E0A : 5F00 09CE                  	CALL	CPDEHL		; Number in range?
 1760/ E0E : 5E07 04D0                  	JP	C,SNERR		; No - ?SN Error
 1761/ E12 : A023                       	LDB	RH3,RH2		; HL = Number
 1762/ E14 : A0AB                       	LDB	RL3,RL2
 1763/ E16 : 8123                       	ADD	R3,R2		; Times 2
 1764/ E18 : 8133                       	ADD	R3,R3		; Times 4
 1765/ E1A : 8123                       	ADD	R3,R2		; Times 5
 1766/ E1C : 8133                       	ADD	R3,R3		; Times 10
 1767/ E1E : 97F0                       	POP	R0,@R15
 1768/ E20 : 8C89                       	LDCTLB	FLAGS,RL0	; Restore digit
 1769/ E22 : 0200 3030                  	SUBB	RH0,#'0'	; Make it 0 to 9
 1770/ E26 : A00A                       	LDB	RL2,RH0		; DE = Value of digit
 1771/ E28 : C200                       	LDB	RH2,#0
 1772/ E2A : 8123                       	ADD	R3,R2		; Add to number
 1773/ E2C : AD23                       	EX	R3,R2		; Number to DE
 1774/ E2E : 97F3                       	POP	R3,@R15		; Restore code string address
 1775/ E30 : 5E08 0DFA                  	JP	GTLNLP		; Go to next character
 1776/ E34 :                            ;
 1777/ E34 :                            CLEAR:
 1778/ E34 : 5E06 06F2                  	JP	Z,INTVAR	; Just "CLEAR" Keep parameters
 1779/ E38 : 5F00 0DBE                  	CALL	POSINT		; Get integer 0 to 32767 to DE
 1780/ E3C : 8CC1                       	LDCTLB	RL4,FLAGS
 1781/ E3E : AB30                       	DEC	R3,#1		; Cancel increment
 1782/ E40 : 8CC9                       	LDCTLB	FLAGS,RL4
 1783/ E42 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 1784/ E46 : 93F3                       	PUSH	@R15,R3		; Save code string address
 1785/ E48 : 6103 810E                  	LD	R3,(LSTRAM)	; Get end of RAM
 1786/ E4C : 5E06 0E70                  	JP	Z,STORED	; No value given - Use stored
 1787/ E50 : 97F3                       	POP	R3,@R15		; Restore code string address
 1788/ E52 : C42C                       	LD	RH4,#','
 1789/ E54 : 5F00 09DA                  	CALL	CHKSYN		; Check for comma
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 31 - 2023/10/12 18時22分27秒


 1790/ E58 : 93F2                       	PUSH	@R15,R2		; Save number
 1791/ E5A : 5F00 0DBE                  	CALL	POSINT		; Get integer 0 to 32767
 1792/ E5E : 8CC1                       	LDCTLB	RL4,FLAGS
 1793/ E60 : AB30                       	DEC	R3,#1		; Cancel increment
 1794/ E62 : 8CC9                       	LDCTLB	FLAGS,RL4
 1795/ E64 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 1796/ E68 : 5E0E 04D0                  	JP	NZ,SNERR	; ?SN Error if more on line
 1797/ E6C : 2DF3                       	EX	@R15,R3		; Save code string address
 1798/ E6E : AD23                       	EX	R3,R2		; Number to DE
 1799/ E70 :                            STORED:
 1800/ E70 : A0B0                       	LDB	RH0,RL3		; Get LSB of new RAM top
 1801/ E72 : 82A0                       	SUBB	RH0,RL2		; Subtract LSB of string space
 1802/ E74 : A00A                       	LDB	RL2,RH0		; Save LSB
 1803/ E76 : A030                       	LDB	RH0,RH3		; Get MSB of new RAM top
 1804/ E78 : B620                       	SBCB	RH0,RH2		; Subtract MSB of string space
 1805/ E7A : A002                       	LDB	RH2,RH0		; Save MSB
 1806/ E7C : 5E07 04C2                  	JP	C,OMERR		; ?OM Error if not enough mem
 1807/ E80 : 93F3                       	PUSH	@R15,R3		; Save RAM top
 1808/ E82 : 6103 8136                  	LD	R3,(PROGND)	; Get program end
 1809/ E86 : 2101 0028                  	LD	R1,#40		; 40 Bytes minimum working RAM
 1810/ E8A : 8113                       	ADD	R3,R1		; Get lowest address
 1811/ E8C : 5F00 09CE                  	CALL	CPDEHL		; Enough memory?
 1812/ E90 : 5E0F 04C2                  	JP	NC,OMERR	; No - ?OM Error
 1813/ E94 : AD23                       	EX	R3,R2		; RAM top to HL
 1814/ E96 : 6F03 80BA                  	LD	(STRSPC),R3	; Set new string space
 1815/ E9A : 97F3                       	POP	R3,@R15		; End of memory to use
 1816/ E9C : 6F03 810E                  	LD	(LSTRAM),R3	; Set new top of RAM
 1817/ EA0 : 97F3                       	POP	R3,@R15		; Restore code string address
 1818/ EA2 : 5E08 06F2                  	JP	INTVAR		; Initialise variables
 1819/ EA6 :                            ;
 1820/ EA6 :                            RUN:
 1821/ EA6 : 5E06 06E8                  	JP	Z,RUNFST	; RUN from start if just RUN
 1822/ EAA : 5F00 06F2                  	CALL	INTVAR		; Initialise variables
 1823/ EAE : 2101 0C16                  	LD	R1,#RUNCNT	; Execution driver loop
 1824/ EB2 : 5E08 0ECE                  	JP	RUNLIN		; RUN from line number
 1825/ EB6 :                            ;
 1826/ EB6 :                            GOSUB:
 1827/ EB6 :                            ;	LDB	RL1,#3		; 3 Levels of stack needed
 1828/ EB6 : C904                       	LDB	RL1,#4		; 4 Levels of stack needed
 1829/ EB8 : 5F00 049C                  	CALL	CHKSTK		; Check for 3 levels of stack
 1830/ EBC : 97F1                       	POP	R1,@R15		; Get return address
 1831/ EBE : 93F3                       	PUSH	@R15,R3		; Save code string for RETURN
 1832/ EC0 : 93F3                       	PUSH	@R15,R3		; And for GOSUB routine
 1833/ EC2 : 6103 80BC                  	LD	R3,(LINEAT)	; Get current line
 1834/ EC6 : 2DF3                       	EX	@R15,R3		; Into stack - Code string out
 1835/ EC8 : C08C                       	LDB	RH0,#ZGOSUB	; "GOSUB" token
 1836/ ECA : 8C81                       	LDCTLB	RL0,FLAGS
 1837/ ECC : 93F0                       	PUSH	@R15,R0		; Save token
 1838/ ECE :                            ;	INC	R15		; Don't save flags
 1839/ ECE :                            ;
 1840/ ECE :                            RUNLIN:
 1841/ ECE : 93F1                       	PUSH	@R15,R1		; Save return address
 1842/ ED0 :                            GOTO:
 1843/ ED0 : 5F00 0DF0                  	CALL	ATOH		; ASCII number to DE binary
 1844/ ED4 : 5F00 0F4C                  	CALL	REM		; Get end of line
 1845/ ED8 : 93F3                       	PUSH	@R15,R3		; Save end of line
 1846/ EDA : 6103 80BC                  	LD	R3,(LINEAT)	; Get current line
 1847/ EDE : 5F00 09CE                  	CALL	CPDEHL		; Line after current?
 1848/ EE2 : 97F3                       	POP	R3,@R15		; Restore end of line
 1849/ EE4 : 8CC1                       	LDCTLB	RL4,FLAGS
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 32 - 2023/10/12 18時22分27秒


 1850/ EE6 : A930                       	INC	R3		; Start of next line
 1851/ EE8 : 8CC9                       	LDCTLB	FLAGS,RL4
 1852/ EEA : EF02                       	JR	NC,GOTO1
 1853/ EEC : 5F00 067A                  	CALL	SRCHLP		; Line is after current line
 1854/ EF0 :                            GOTO1:
 1855/ EF0 : E702                       	JR	C,GOTO2
 1856/ EF2 : 5F00 0676                  	CALL	SRCHLN		; Line is before current line
 1857/ EF6 :                            GOTO2:
 1858/ EF6 : A013                       	LDB	RH3,RH1		; Set up code string address
 1859/ EF8 : A09B                       	LDB	RL3,RL1
 1860/ EFA : 8CC1                       	LDCTLB	RL4,FLAGS
 1861/ EFC : AB30                       	DEC	R3,#1		; Incremented after
 1862/ EFE : 8CC9                       	LDCTLB	FLAGS,RL4
 1863/ F00 : 9E07                       	RET	C		; Line found
 1864/ F02 :                            ULERR:
 1865/ F02 : CA0E                       	LDB	RL2,#UL		; ?UL Error
 1866/ F04 : 5E08 04EA                  	JP	ERROR		; Output error message
 1867/ F08 :                            ;
 1868/ F08 :                            RETURN:
 1869/ F08 : 9E0E                       	RET	NZ		; Return if not just RETURN
 1870/ F0A : C2FF                       	LDB	RH2,#-1		; Flag "GOSUB" search
 1871/ F0C : 5F00 043E                  	CALL	BAKSTK		; Look "GOSUB" block
 1872/ F10 : A13F                       	LD	R15,R3		; Kill all FORs in subroutine
 1873/ F12 : 0A00 8C8C                  	CPB	RH0,#ZGOSUB	; Test for "GOSUB" token
 1874/ F16 : CA04                       	LDB	RL2,#RG		; ?RG Error
 1875/ F18 : 5E0E 04EA                  	JP	NZ,ERROR	; Error if no "GOSUB" found
 1876/ F1C : 97F3                       	POP	R3,@R15		; Get RETURN line number
 1877/ F1E : 6F03 80BC                  	LD	(LINEAT),R3	; Save as current
 1878/ F22 : 8CC1                       	LDCTLB	RL4,FLAGS
 1879/ F24 : A930                       	INC	R3		; Was it from direct statement?
 1880/ F26 : 8CC9                       	LDCTLB	FLAGS,RL4
 1881/ F28 : A030                       	LDB	RH0,RH3
 1882/ F2A : 84B0                       	ORB	RH0,RL3
 1883/ F2C : 8D83                       	RESFLG	C		; Return to line
 1884/ F2E : 5E0E 0F3E                  	JP	NZ,RETLIN	; No - Return to line
 1885/ F32 : 6000 812B                  	LDB	RH0,(LSTBIN)	; Any INPUT in subroutine?
 1886/ F36 : 8400                       	ORB	RH0,RH0
 1887/ F38 : 8D83                       	RESFLG	C		; If so buffer is corrupted
 1888/ F3A : 5E0E 053A                  	JP	NZ,POPNOK	; Yes - Go to command mode
 1889/ F3E :                            RETLIN:
 1890/ F3E : 2103 0C16                  	LD	R3,#RUNCNT	; Execution driver loop
 1891/ F42 : 2DF3                       	EX	@R15,R3		; Into stack - Code string out
 1892/ F44 : E801                       	JR	DATA		; Skip "POP HL"
 1893/ F46 :                            NXTDTA:
 1894/ F46 : 97F3                       	POP	R3,@R15		; Restore code string address
 1895/ F48 :                            ;
 1896/ F48 :                            DATA:
 1897/ F48 : C93A                       	LDB	RL1,#':'	; ':' End of statement
 1898/ F4A : E801                       	JR	REM1
 1899/ F4C :                            REM:
 1900/ F4C : C900                       	LDB	RL1,#0		; 00	End of statement
 1901/ F4E :                            REM1:
 1902/ F4E : C100                       	LDB	RH1,#0
 1903/ F50 :                            NXTSTL:
 1904/ F50 : A090                       	LDB	RH0,RL1		; Statement and byte
 1905/ F52 : A019                       	LDB	RL1,RH1
 1906/ F54 : A001                       	LDB	RH1,RH0		; Statement end byte
 1907/ F56 :                            NXTSTT:
 1908/ F56 : 2030                       	LDB	RH0,@R3		; Get byte
 1909/ F58 : 8400                       	ORB	RH0,RH0
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 33 - 2023/10/12 18時22分27秒


 1910/ F5A : 8D83                       	RESFLG	C		; End of line?
 1911/ F5C : 9E06                       	RET	Z		; Yes - Exit
 1912/ F5E : 8A10                       	CPB	RH0,RH1		; End of statement?
 1913/ F60 : 9E06                       	RET	Z		; Yes - Exit
 1914/ F62 : 8CC1                       	LDCTLB	RL4,FLAGS
 1915/ F64 : A930                       	INC	R3		; Next byte
 1916/ F66 : 8CC9                       	LDCTLB	FLAGS,RL4
 1917/ F68 : 0A00 2222                  	CPB	RH0,#'"'	; Literal string?
 1918/ F6C : 5E06 0F50                  	JP	Z,NXTSTL	; Yes - Look for another '"'
 1919/ F70 : 5E08 0F56                  	JP	NXTSTT		; Keep looking
 1920/ F74 :                            ;
 1921/ F74 :                            LET:
 1922/ F74 : 5F00 17A8                  	CALL	GETVAR		; Get variable name
 1923/ F78 : C4B4                       	LD	RH4,#ZEQUAL	; "=" token
 1924/ F7A : 5F00 09DA                  	CALL	CHKSYN		; Make sure "=" follows
 1925/ F7E : 93F2                       	PUSH	@R15,R2		; Save address of variable
 1926/ F80 : 6000 810C                  	LDB	RH0,(TYPE)	; Get data type
 1927/ F84 : 8C81                       	LDCTLB	RL0,FLAGS
 1928/ F86 : 93F0                       	PUSH	@R15,R0		; Save type
 1929/ F88 : 5F00 1438                  	CALL	EVAL		; Evaluate expression
 1930/ F8C : 97F0                       	POP	R0,@R15		; Restore type
 1931/ F8E : 8C89                       	LDCTLB	FLAGS,RL0
 1932/ F90 : 2DF3                       	EX	@R15,R3		; Save code - Get var addr
 1933/ F92 : 6F03 812E                  	LD	(BRKLIN),R3	; Save address of variable
 1934/ F96 : B20C                       	RRCB	RH0,#1		; Adjust type
 1935/ F98 : 5F00 1422                  	CALL	CHKTYP		; Check types are the same
 1936/ F9C : 5E06 0FFA                  	JP	Z,LETNUM	; Numeric - Move value
 1937/ FA0 :                            LETSTR:
 1938/ FA0 : 93F3                       	PUSH	@R15,R3		; Save address of string var
 1939/ FA2 : 6103 8144                  	LD	R3,(FPREG)	; Pointer to string entry
 1940/ FA6 : ACB3                       	EXB	RH3,RL3
 1941/ FA8 : 93F3                       	PUSH	@R15,R3		; Save it on stack
 1942/ FAA : 8CC1                       	LDCTLB	RL4,FLAGS
 1943/ FAC : A930                       	INC	R3		; Skip over length
 1944/ FAE : A930                       	INC	R3
 1945/ FB0 : 203A                       	LDB	RL2,@R3		; LSB of string address
 1946/ FB2 : A930                       	INC	R3
 1947/ FB4 : 8CC9                       	LDCTLB	FLAGS,RL4
 1948/ FB6 : 2032                       	LDB	RH2,@R3		; MSB of string address
 1949/ FB8 : 6103 80BE                  	LD	R3,(BASTXT)	; Point to start of program
 1950/ FBC : 5F00 09CE                  	CALL	CPDEHL		; Is string before program?
 1951/ FC0 : 5E0F 0FE0                  	JP	NC,CRESTR	; Yes - Create string entry
 1952/ FC4 : 6103 80BA                  	LD	R3,(STRSPC)	; Point to string space
 1953/ FC8 : 5F00 09CE                  	CALL	CPDEHL		; Is string literal in program?
 1954/ FCC : 97F2                       	POP	R2,@R15		; Restore address of string
 1955/ FCE : 5E0F 0FEC                  	JP	NC,MVSTPT	; Yes - Set up pointer
 1956/ FD2 : 2103 811E                  	LD	R3,#TMPSTR	; Temporary string pool
 1957/ FD6 : 5F00 09CE                  	CALL	CPDEHL		; Is string in temporary pool?
 1958/ FDA : 5E0F 0FEC                  	JP	NC,MVSTPT	; No - Set up pointer
 1959/ FDE : E801                       	JR	CRESTR1		; Skip "POP DE"
 1960/ FE0 :                            CRESTR:
 1961/ FE0 : 97F2                       	POP	R2,@R15		; Restore address of string
 1962/ FE2 :                            CRESTR1:
 1963/ FE2 : 5F00 1F6E                  	CALL	BAKTMP		; Back to last tmp-str entry
 1964/ FE6 : AD23                       	EX	R3,R2		; Address of string entry
 1965/ FE8 : 5F00 1C14                  	CALL	SAVSTR		; Save string in string area
 1966/ FEC :                            MVSTPT:
 1967/ FEC : 5F00 1F6E                  	CALL	BAKTMP		; Back to last tmp-str entry
 1968/ FF0 : 97F3                       	POP	R3,@R15		; Get string pointer
 1969/ FF2 : 5F00 26A0                  	CALL	DETHL4		; Move string pointer to var
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 34 - 2023/10/12 18時22分27秒


 1970/ FF6 : 97F3                       	POP	R3,@R15		; Restore code string address
 1971/ FF8 : 9E08                       	RET
 1972/ FFA :                            ;
 1973/ FFA :                            LETNUM:
 1974/ FFA : 93F3                       	PUSH	@R15,R3		; Save address of variable
 1975/ FFC : 5F00 269C                  	CALL	FPTHL		; Move value to variable
 1976/1000 : 97F2                       	POP	R2,@R15		; Restore address of variable
 1977/1002 : 97F3                       	POP	R3,@R15		; Restore code string address
 1978/1004 : 9E08                       	RET
 1979/1006 :                            ;
 1980/1006 :                            ON:
 1981/1006 : 5F00 2164                  	CALL	GETINT		; Get integer 0-255
 1982/100A : 2030                       	LDB	RH0,@R3		; Get "GOTO" or "GOSUB" token
 1983/100C : A001                       	LDB	RH1,RH0		; Save in B
 1984/100E : 0A00 8C8C                  	CPB	RH0,#ZGOSUB	; "GOSUB" token?
 1985/1012 : 5E06 1022                  	JP	Z,ONGO		; Yes - Find line number
 1986/1016 : C488                       	LD	RH4,#ZGOTO	; "GOTO" token
 1987/1018 : 5F00 09DA                  	CALL	CHKSYN		; Make sure it's "GOTO"
 1988/101C : 8CC1                       	LDCTLB	RL4,FLAGS
 1989/101E : AB30                       	DEC	R3,#1		; Cancel increment
 1990/1020 : 8CC9                       	LDCTLB	FLAGS,RL4
 1991/1022 :                            ONGO:
 1992/1022 : A0A9                       	LDB	RL1,RL2		; Integer of branch value
 1993/1024 :                            ONGOLP:
 1994/1024 : AA90                       	DECB	RL1,#1		; Count branches
 1995/1026 : A010                       	LDB	RH0,RH1		; Get "GOTO" or "GOSUB" token
 1996/1028 : 5E06 0C6A                  	JP	Z,ONJMP		; Go to that line if right one
 1997/102C : 5F00 0DF6                  	CALL	GETLN		; Get line number to DE
 1998/1030 : 0A00 2C2C                  	CPB	RH0,#','	; Another line number?
 1999/1034 : 9E0E                       	RET	NZ		; No - Drop through
 2000/1036 : 5E08 1024                  	JP	ONGOLP		; Yes - loop
 2001/103A :                            ;
 2002/103A :                            IF:
 2003/103A : 5F00 1438                  	CALL	EVAL		; Evaluate expression
 2004/103E : 2030                       	LDB	RH0,@R3		; Get token
 2005/1040 : 0A00 8888                  	CPB	RH0,#ZGOTO	; "GOTO" token?
 2006/1044 : 5E06 1054                  	JP	Z,IFGO		; Yes - Get line
 2007/1048 : C4A9                       	LD	RH4,#ZTHEN	; "THEN" token
 2008/104A : 5F00 09DA                  	CALL	CHKSYN		; Make sure it's "THEN"
 2009/104E : 8CC1                       	LDCTLB	RL4,FLAGS
 2010/1050 : AB30                       	DEC	R3,#1		; Cancel increment
 2011/1052 : 8CC9                       	LDCTLB	FLAGS,RL4
 2012/1054 :                            IFGO:
 2013/1054 : 5F00 141C                  	CALL	TSTNUM		; Make sure it's numeric
 2014/1058 : 5F00 25E8                  	CALL	TSTSGN		; Test state of expression
 2015/105C : 5E06 0F4C                  	JP	Z,REM		; False - Drop through
 2016/1060 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2017/1064 : 5E07 0ED0                  	JP	C,GOTO		; Number - GOTO that line
 2018/1068 : 5E08 0C68                  	JP	IFJMP		; Otherwise do statement
 2019/106C :                            ;
 2020/106C :                            MRPRNT:
 2021/106C : 8CC1                       	LDCTLB	RL4,FLAGS
 2022/106E : AB30                       	DEC	R3,#1		; DEC 'cos GETCHR INCs
 2023/1070 : 8CC9                       	LDCTLB	FLAGS,RL4
 2024/1072 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2025/1076 :                            PRINT:
 2026/1076 : 5E06 1114                  	JP	Z,PRCRLF	; CRLF if just PRINT
 2027/107A :                            PRNTLP:
 2028/107A : 9E06                       	RET	Z		; End of list - Exit
 2029/107C : 0A00 A5A5                  	CPB	RH0,#ZTAB	; "TAB(" token?
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 35 - 2023/10/12 18時22分27秒


 2030/1080 : 5E06 116C                  	JP	Z,DOTAB		; Yes - Do TAB routine
 2031/1084 : 0A00 A8A8                  	CPB	RH0,#ZSPC	; "SPC(" token?
 2032/1088 : 5E06 116C                  	JP	Z,DOTAB		; Yes - Do SPC routine
 2033/108C : 93F3                       	PUSH	@R15,R3		; Save code string address
 2034/108E : 0A00 2C2C                  	CPB	RH0,#','	; Comma?
 2035/1092 : 5E06 1144                  	JP	Z,DOCOM		; Yes - Move to next zone
 2036/1096 : 0A00 3B3B                  	CPB	RH0,#";"	; Semi-colon?
 2037/109A : 5E06 11AE                  	JP	Z,NEXITM	; Do semi-colon routine
 2038/109E : 97F1                       	POP	R1,@R15		; Code string address to BC
 2039/10A0 : 5F00 1438                  	CALL	EVAL		; Evaluate expression
 2040/10A4 : 93F3                       	PUSH	@R15,R3		; Save code string address
 2041/10A6 : 6000 810C                  	LDB	RH0,(TYPE)	; Get variable type
 2042/10AA : 8400                       	ORB	RH0,RH0
 2043/10AC : 8D83                       	RESFLG	C		; Is it a string variable?
 2044/10AE : 5E0E 10F2                  	JP	NZ,PRNTST	; Yes - Output string contents
 2045/10B2 : 5F00 291A                  	CALL	NUMASC		; Convert number to text
 2046/10B6 : 5F00 1C62                  	CALL	CRTST		; Create temporary string
 2047/10BA : 0C35 2020                  	LDB	@R3,#' '	; Followed by a space
 2048/10BE : 6103 8144                  	LD	R3,(FPREG)	; Get length of output
 2049/10C2 : ACB3                       	EXB	RH3,RL3
 2050/10C4 : 2830                       	INCB	@R3,#1		; Plus 1 for the space
 2051/10C6 : 6103 8144                  	LD	R3,(FPREG)	; < Not needed >
 2052/10CA : ACB3                       	EXB	RH3,RL3
 2053/10CC : 6000 809D                  	LDB	RH0,(LWIDTH)	; Get width of line
 2054/10D0 : A001                       	LDB	RH1,RH0		; To B
 2055/10D2 : A810                       	INCB	RH1,#1		; Width 255 (No limit)?
 2056/10D4 : 5E06 10EA                  	JP	Z,PRNTNB	; Yes - Output number string
 2057/10D8 : A810                       	INCB	RH1,#1		; Adjust it
 2058/10DA : 6000 810A                  	LDB	RH0,(CURPOS)	; Get cursor position
 2059/10DE : 0030                       	ADDB	RH0,@R3		; Add length of string
 2060/10E0 : AA00                       	DECB	RH0,#1		; Adjust it
 2061/10E2 : 8A10                       	CPB	RH0,RH1		; Will output fit on this line?
 2062/10E4 : E702                       	JR	C,PRNTNB
 2063/10E6 : 5F00 1114                  	CALL	PRCRLF		; No - CRLF first
 2064/10EA :                            PRNTNB:
 2065/10EA : 5F00 1CDE                  	CALL	PRS1		; Output string at (HL)
 2066/10EE : 8800                       	XORB	RH0,RH0
 2067/10F0 : 8D83                       	RESFLG	C		; Skip CALL by setting 'z' flag
 2068/10F2 :                            PRNTST:
 2069/10F2 : E602                       	JR	Z,PRNTST1
 2070/10F4 : 5F00 1CDE                  	CALL	PRS1		; Output string at (HL)
 2071/10F8 :                            PRNTST1:
 2072/10F8 : 97F3                       	POP	R3,@R15		; Restore code string address
 2073/10FA : 5E08 106C                  	JP	MRPRNT		; See if more to PRINT
 2074/10FE :                            ;
 2075/10FE :                            STTLIN:
 2076/10FE : 6000 810A                  	LDB	RH0,(CURPOS)	; Make sure on new line
 2077/1102 : 8400                       	ORB	RH0,RH0
 2078/1104 : 8D83                       	RESFLG	C		; Already at start?
 2079/1106 : 9E06                       	RET	Z		; Yes - Do nothing
 2080/1108 : 5E08 1114                  	JP	PRCRLF		; Start a new line
 2081/110C :                            ;
 2082/110C :                            ENDINP:
 2083/110C : 0C35 0000                  	LDB	@R3,#0		; Mark end of buffer
 2084/1110 : 2103 80BF                  	LD	R3,#BUFFER-1	; Point to buffer
 2085/1114 :                            PRCRLF:
 2086/1114 : C00D                       	LDB	RH0,#CR		; Load a CR
 2087/1116 : 5F00 09E6                  	CALL	OUTC		; Output character
 2088/111A : C00A                       	LDB	RH0,#LF		; Load a LF
 2089/111C : 5F00 09E6                  	CALL	OUTC		; Output character
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 36 - 2023/10/12 18時22分27秒


 2090/1120 :                            DONULL:
 2091/1120 : 8800                       	XORB	RH0,RH0
 2092/1122 : 8D83                       	RESFLG	C		; Set to position 0
 2093/1124 : 6E00 810A                  	LDB	(CURPOS),RH0	; Store it
 2094/1128 : 6000 809C                  	LDB	RH0,(NULLS)	; Get number of nulls
 2095/112C :                            NULLP:
 2096/112C : AA00                       	DECB	RH0,#1		; Count them
 2097/112E : 9E06                       	RET	Z		; Return if done
 2098/1130 : 8C81                       	LDCTLB	RL0,FLAGS
 2099/1132 : 93F0                       	PUSH	@R15,R0		; Save count
 2100/1134 : 8800                       	XORB	RH0,RH0
 2101/1136 : 8D83                       	RESFLG	C		; Load a null
 2102/1138 : 5F00 09E6                  	CALL	OUTC		; Output it
 2103/113C : 97F0                       	POP	R0,@R15		; Restore count
 2104/113E : 8C89                       	LDCTLB	FLAGS,RL0
 2105/1140 : 5E08 112C                  	JP	NULLP		; Keep counting
 2106/1144 :                            ;
 2107/1144 :                            DOCOM:
 2108/1144 : 6000 809E                  	LDB	RH0,(COMMAN)	; Get comma width
 2109/1148 : A001                       	LDB	RH1,RH0		; Save in B
 2110/114A : 6000 810A                  	LDB	RH0,(CURPOS)	; Get current position
 2111/114E : 8A10                       	CPB	RH0,RH1		; Within the limit?
 2112/1150 : E702                       	JR	C,DOCOM1
 2113/1152 : 5F00 1114                  	CALL	PRCRLF		; No - output CRLF
 2114/1156 :                            DOCOM1:
 2115/1156 : 5E0F 11AE                  	JP	NC,NEXITM	; Get next item
 2116/115A :                            ZONELP:
 2117/115A : 0200 0E0E                  	SUBB	RH0,#14		; Next zone of 14 characters
 2118/115E : 5E0F 115A                  	JP	NC,ZONELP	; Repeat if more zones
 2119/1162 : 8CC1                       	LDCTLB	RL4,FLAGS
 2120/1164 : 8C00                       	COMB	RH0		; Number of spaces to output
 2121/1166 : 8CC9                       	LDCTLB	FLAGS,RL4
 2122/1168 : 5E08 119E                  	JP	ASPCS		; Output them
 2123/116C :                            ;
 2124/116C :                            DOTAB:
 2125/116C : 8C81                       	LDCTLB	RL0,FLAGS
 2126/116E : 93F0                       	PUSH	@R15,R0		; Save token
 2127/1170 : 5F00 2160                  	CALL	FNDNUM		; Evaluate expression
 2128/1174 : C429                       	LD	RH4,#")"
 2129/1176 : 5F00 09DA                  	CALL	CHKSYN		; Make sure ")" follows
 2130/117A : 8CC1                       	LDCTLB	RL4,FLAGS
 2131/117C : AB30                       	DEC	R3,#1		; Back space on to ")"
 2132/117E : 8CC9                       	LDCTLB	FLAGS,RL4
 2133/1180 : 97F0                       	POP	R0,@R15		; Restore token
 2134/1182 : 8C89                       	LDCTLB	FLAGS,RL0
 2135/1184 : 0200 A8A8                  	SUBB	RH0,#ZSPC	; Was it "SPC(" ?
 2136/1188 : 93F3                       	PUSH	@R15,R3		; Save code string address
 2137/118A : 5E06 1192                  	JP	Z,DOSPC		; Yes - Do 'E' spaces
 2138/118E : 6000 810A                  	LDB	RH0,(CURPOS)	; Get current position
 2139/1192 :                            DOSPC:
 2140/1192 : 8CC1                       	LDCTLB	RL4,FLAGS
 2141/1194 : 8C00                       	COMB	RH0		; Number of spaces to print to
 2142/1196 : 8CC9                       	LDCTLB	FLAGS,RL4
 2143/1198 : 80A0                       	ADDB	RH0,RL2		; Total number to print
 2144/119A : 5E0F 11AE                  	JP	NC,NEXITM	; TAB < Current POS(X)
 2145/119E :                            ASPCS:
 2146/119E : A800                       	INCB	RH0,#1		; Output A spaces
 2147/11A0 : A001                       	LDB	RH1,RH0		; Save number to print
 2148/11A2 : C020                       	LDB	RH0,#' '	; Space
 2149/11A4 :                            SPCLP:
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 37 - 2023/10/12 18時22分27秒


 2150/11A4 : 5F00 09E6                  	CALL	OUTC		; Output character in A
 2151/11A8 : AA10                       	DECB	RH1,#1		; Count them
 2152/11AA : 5E0E 11A4                  	JP	NZ,SPCLP	; Repeat if more
 2153/11AE :                            NEXITM:
 2154/11AE : 97F3                       	POP	R3,@R15		; Restore code string address
 2155/11B0 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2156/11B4 : 5E08 107A                  	JP	PRNTLP		; More to print
 2157/11B8 :                            ;
 2158/11B8 :                            REDO:
 2159/11B8 : 3F 52 65 64 6F 20 66 72 6F 	DB	"?Redo from start",CR,LF,0
      11C1 : 6D 20 73 74 61 72 74 0D 0A
      11CA : 00                        
 2160/11CB :                            ;
 2161/11CB :                            	ALIGN	2
 2162/11CC :                            BADINP:
 2163/11CC : 6000 812C                  	LDB	RH0,(READFG)	; READ or INPUT?
 2164/11D0 : 8400                       	ORB	RH0,RH0
 2165/11D2 : 8D83                       	RESFLG	C
 2166/11D4 : 5E0E 04C8                  	JP	NZ,DATSNR	; READ - ?SN Error
 2167/11D8 : 97F1                       	POP	R1,@R15		; Throw away code string addr
 2168/11DA : 2103 11B8                  	LD	R3,#REDO	; "Redo from start" message
 2169/11DE : 5F00 1CDA                  	CALL	PRS		; Output string
 2170/11E2 : 5E08 073A                  	JP	DOAGN		; Do last INPUT again
 2171/11E6 :                            ;
 2172/11E6 :                            INPUT:
 2173/11E6 : 5F00 1BC8                  	CALL	IDTEST		; Test for illegal direct
 2174/11EA : 2030                       	LDB	RH0,@R3		; Get character after "INPUT"
 2175/11EC : 0A00 2222                  	CPB	RH0,#'"'	; Is there a prompt string?
 2176/11F0 : C000                       	LDB	RH0,#0		; Clear A and leave flags
 2177/11F2 : 6E00 80A0                  	LDB	(CTLOFG),RH0	; Enable output
 2178/11F6 : 5E0E 120C                  	JP	NZ,NOPMPT	; No prompt - get input
 2179/11FA : 5F00 1C68                  	CALL	QTSTR		; Get string terminated by '"'
 2180/11FE : C43B                       	LD	RH4,#';'
 2181/1200 : 5F00 09DA                  	CALL	CHKSYN		; Check for ';' after prompt
 2182/1204 : 93F3                       	PUSH	@R15,R3		; Save code string address
 2183/1206 : 5F00 1CDE                  	CALL	PRS1		; Output prompt string
 2184/120A : E801                       	JR	NOPMPT1		; Skip "PUSH HL"
 2185/120C :                            NOPMPT:
 2186/120C : 93F3                       	PUSH	@R15,R3		; Save code string address
 2187/120E :                            NOPMPT1:
 2188/120E : 5F00 0740                  	CALL	PROMPT		; Get input with "? " prompt
 2189/1212 : 97F1                       	POP	R1,@R15		; Restore code string address
 2190/1214 : 5E07 0D28                  	JP	C,INPBRK	; Break pressed - Exit
 2191/1218 : 8CC1                       	LDCTLB	RL4,FLAGS
 2192/121A : A930                       	INC	R3		; Next byte
 2193/121C : 8CC9                       	LDCTLB	FLAGS,RL4
 2194/121E : 2030                       	LDB	RH0,@R3		; Get it
 2195/1220 : 8400                       	ORB	RH0,RH0
 2196/1222 : 8D83                       	RESFLG	C		; End of line?
 2197/1224 : 8CC1                       	LDCTLB	RL4,FLAGS
 2198/1226 : AB30                       	DEC	R3,#1		; Back again
 2199/1228 : 8CC9                       	LDCTLB	FLAGS,RL4
 2200/122A : 93F1                       	PUSH	@R15,R1		; Re-save code string address
 2201/122C : 5E06 0F46                  	JP	Z,NXTDTA	; Yes - Find next DATA stmt
 2202/1230 : 0C35 2C2C                  	LDB	@R3,#','	; Store comma as separator
 2203/1234 : 5E08 1246                  	JP	NXTITM		; Get next item
 2204/1238 :                            ;
 2205/1238 :                            READ:
 2206/1238 : 93F3                       	PUSH	@R15,R3		; Save code string address
 2207/123A : 6103 813C                  	LD	R3,(NXTDAT)	; Next DATA statement
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 38 - 2023/10/12 18時22分27秒


 2208/123E : 0400 AFAF                  	ORB	RH0,#0AFH
 2209/1242 : 8D83                       	RESFLG	C
 2210/1244 : E802                       	JR	NXTITM1		; Flag "READ"
 2211/1246 :                            NXTITM:
 2212/1246 : 8800                       	XORB	RH0,RH0
 2213/1248 : 8D83                       	RESFLG	C		; Flag "INPUT"
 2214/124A :                            NXTITM1:
 2215/124A : 6E00 812C                  	LDB	(READFG),RH0	; Save "READ"/"INPUT" flag
 2216/124E : 2DF3                       	EX	@R15,R3		; Get code str' , Save pointer
 2217/1250 : 5E08 125A                  	JP	GTVLUS		; Get values
 2218/1254 :                            ;
 2219/1254 :                            NEDMOR:
 2220/1254 : C42C                       	LD	RH4,#','
 2221/1256 : 5F00 09DA                  	CALL	CHKSYN		; Check for comma between items
 2222/125A :                            GTVLUS:
 2223/125A : 5F00 17A8                  	CALL	GETVAR		; Get variable name
 2224/125E : 2DF3                       	EX	@R15,R3		; Save code str" , Get pointer
 2225/1260 : 93F2                       	PUSH	@R15,R2		; Save variable address
 2226/1262 : 2030                       	LDB	RH0,@R3		; Get next "INPUT"/"DATA" byte
 2227/1264 : 0A00 2C2C                  	CPB	RH0,#','	; Comma?
 2228/1268 : 5E06 12A4                  	JP	Z,ANTVLU	; Yes - Get another value
 2229/126C : 6000 812C                  	LDB	RH0,(READFG)	; Is it READ?
 2230/1270 : 8400                       	ORB	RH0,RH0
 2231/1272 : 8D83                       	RESFLG	C
 2232/1274 : 5E0E 1356                  	JP	NZ,FDTLP	; Yes - Find next DATA stmt
 2233/1278 : C03F                       	LDB	RH0,#'?'	; More INPUT needed
 2234/127A : 5F00 09E6                  	CALL	OUTC		; Output character
 2235/127E : 5F00 0740                  	CALL	PROMPT		; Get INPUT with prompt
 2236/1282 : 97F2                       	POP	R2,@R15		; Variable address
 2237/1284 : 97F1                       	POP	R1,@R15		; Code string address
 2238/1286 : 5E07 0D28                  	JP	C,INPBRK	; Break pressed
 2239/128A : 8CC1                       	LDCTLB	RL4,FLAGS
 2240/128C : A930                       	INC	R3		; Point to next DATA byte
 2241/128E : 8CC9                       	LDCTLB	FLAGS,RL4
 2242/1290 : 2030                       	LDB	RH0,@R3		; Get byte
 2243/1292 : 8400                       	ORB	RH0,RH0
 2244/1294 : 8D83                       	RESFLG	C		; Is it zero (No input) ?
 2245/1296 : 8CC1                       	LDCTLB	RL4,FLAGS
 2246/1298 : AB30                       	DEC	R3,#1		; Back space INPUT pointer
 2247/129A : 8CC9                       	LDCTLB	FLAGS,RL4
 2248/129C : 93F1                       	PUSH	@R15,R1		; Save code string address
 2249/129E : 5E06 0F46                  	JP	Z,NXTDTA	; Find end of buffer
 2250/12A2 : 93F2                       	PUSH	@R15,R2		; Save variable address
 2251/12A4 :                            ANTVLU:
 2252/12A4 : 6000 810C                  	LDB	RH0,(TYPE)	; Check data type
 2253/12A8 : 8400                       	ORB	RH0,RH0
 2254/12AA : 8D83                       	RESFLG	C		; Is it numeric?
 2255/12AC : 5E06 12EA                  	JP	Z,INPBIN	; Yes - Convert to binary
 2256/12B0 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2257/12B4 : A002                       	LDB	RH2,RH0		; Save input character
 2258/12B6 : A001                       	LDB	RH1,RH0		; Again
 2259/12B8 : 0A00 2222                  	CPB	RH0,#'"'	; Start of literal sting?
 2260/12BC : 5E06 12D8                  	JP	Z,STRENT	; Yes - Create string entry
 2261/12C0 : 6000 812C                  	LDB	RH0,(READFG)	; "READ" or "INPUT" ?
 2262/12C4 : 8400                       	ORB	RH0,RH0
 2263/12C6 : 8D83                       	RESFLG	C
 2264/12C8 : A002                       	LDB	RH2,RH0		; Save 00 if "INPUT"
 2265/12CA : 5E06 12D0                  	JP	Z,ITMSEP	; "INPUT" - End with 00
 2266/12CE : C23A                       	LDB	RH2,#':'	; "DATA" - End with 00 or ':'
 2267/12D0 :                            ITMSEP:
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 39 - 2023/10/12 18時22分27秒


 2268/12D0 : C12C                       	LDB	RH1,#','	; Item separator
 2269/12D2 : 8CC1                       	LDCTLB	RL4,FLAGS
 2270/12D4 : AB30                       	DEC	R3,#1		; Back space for DTSTR
 2271/12D6 : 8CC9                       	LDCTLB	FLAGS,RL4
 2272/12D8 :                            STRENT:
 2273/12D8 : 5F00 1C6C                  	CALL	DTSTR		; Get string terminated by D
 2274/12DC : AD23                       	EX	R3,R2		; String address to DE
 2275/12DE : 2103 12FA                  	LD	R3,#LTSTND	; Where to go after LETSTR
 2276/12E2 : 2DF3                       	EX	@R15,R3		; Save HL , get input pointer
 2277/12E4 : 93F2                       	PUSH	@R15,R2		; Save address of string
 2278/12E6 : 5E08 0FA0                  	JP	LETSTR		; Assign string to variable
 2279/12EA :                            ;
 2280/12EA :                            INPBIN:
 2281/12EA : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2282/12EE : 5F00 27FE                  	CALL	ASCTFP		; Convert ASCII to FP number
 2283/12F2 : 2DF3                       	EX	@R15,R3		; Save input ptr, Get var addr
 2284/12F4 : 5F00 269C                  	CALL	FPTHL		; Move FPREG to variable
 2285/12F8 : 97F3                       	POP	R3,@R15		; Restore input pointer
 2286/12FA :                            LTSTND:
 2287/12FA : 8CC1                       	LDCTLB	RL4,FLAGS
 2288/12FC : AB30                       	DEC	R3,#1		; DEC 'cos GETCHR INCs
 2289/12FE : 8CC9                       	LDCTLB	FLAGS,RL4
 2290/1300 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2291/1304 : 5E06 1310                  	JP	Z,MORDT		; End of line - More needed?
 2292/1308 : 0A00 2C2C                  	CPB	RH0,#','		; Another value?
 2293/130C : 5E0E 11CC                  	JP	NZ,BADINP	; No - Bad input
 2294/1310 :                            MORDT:
 2295/1310 : 2DF3                       	EX	@R15,R3		; Get code string address
 2296/1312 : 8CC1                       	LDCTLB	RL4,FLAGS
 2297/1314 : AB30                       	DEC	R3,#1		; DEC 'cos GETCHR INCs
 2298/1316 : 8CC9                       	LDCTLB	FLAGS,RL4
 2299/1318 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2300/131C : 5E0E 1254                  	JP	NZ,NEDMOR	; More needed - Get it
 2301/1320 : 97F2                       	POP	R2,@R15		; Restore DATA pointer
 2302/1322 : 6000 812C                  	LDB	RH0,(READFG)	; "READ" or "INPUT" ?
 2303/1326 : 8400                       	ORB	RH0,RH0
 2304/1328 : 8D83                       	RESFLG	C
 2305/132A : AD23                       	EX	R3,R2		; DATA pointer to HL
 2306/132C : 5E0E 0CDA                  	JP	NZ,UPDATA	; Update DATA pointer if "READ"
 2307/1330 : 93F2                       	PUSH	@R15,R2		; Save code string address
 2308/1332 : 0430                       	ORB	RH0,@R3
 2309/1334 : 8D83                       	RESFLG	C		; More input given?
 2310/1336 : 2103 1344                  	LD	R3,#EXTIG	; "?Extra ignored" message
 2311/133A : E602                       	JR	Z,MORDT1
 2312/133C : 5F00 1CDA                  	CALL	PRS		; Output string if extra given
 2313/1340 :                            MORDT1:
 2314/1340 : 97F3                       	POP	R3,@R15		; Restore code string address
 2315/1342 : 9E08                       	RET
 2316/1344 :                            ;
 2317/1344 :                            EXTIG:
 2318/1344 : 3F 45 78 74 72 61 20 69 67 	DB	"?Extra ignored",CR,LF,0
      134D : 6E 6F 72 65 64 0D 0A 00   
 2319/1355 :                            ;
 2320/1355 :                            	ALIGN	2
 2321/1356 :                            FDTLP:
 2322/1356 : 5F00 0F48                  	CALL	DATA		; Get next statement
 2323/135A : 8400                       	ORB	RH0,RH0
 2324/135C : 8D83                       	RESFLG	C		; End of line?
 2325/135E : 5E0E 138A                  	JP	NZ,FANDT	; No - See if DATA statement
 2326/1362 : 8CC1                       	LDCTLB	RL4,FLAGS
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 40 - 2023/10/12 18時22分27秒


 2327/1364 : A930                       	INC	R3
 2328/1366 : 2030                       	LDB	RH0,@R3		; End of program?
 2329/1368 : A930                       	INC	R3
 2330/136A : 8CC9                       	LDCTLB	FLAGS,RL4
 2331/136C : 0430                       	ORB	RH0,@R3
 2332/136E : 8D83                       	RESFLG	C		; 00 00 Ends program
 2333/1370 : CA06                       	LDB	RL2,#OD		; ?OD Error
 2334/1372 : 5E06 04EA                  	JP	Z,ERROR		; Yes - Out of DATA
 2335/1376 : 8CC1                       	LDCTLB	RL4,FLAGS
 2336/1378 : A930                       	INC	R3
 2337/137A : 203A                       	LDB	RL2,@R3		; LSB of line number
 2338/137C : A930                       	INC	R3
 2339/137E : 8CC9                       	LDCTLB	FLAGS,RL4
 2340/1380 : 2032                       	LDB	RH2,@R3		; MSB of line number
 2341/1382 : AD23                       	EX	R3,R2
 2342/1384 : 6F03 8128                  	LD	(DATLIN),R3	; Set line of current DATA item
 2343/1388 : AD23                       	EX	R3,R2
 2344/138A :                            FANDT:
 2345/138A : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2346/138E : 0A00 8383                  	CPB	RH0,#ZDATA	; "DATA" token
 2347/1392 : 5E0E 1356                  	JP	NZ,FDTLP	; No "DATA" - Keep looking
 2348/1396 : 5E08 12A4                  	JP	ANTVLU		; Found - Convert input
 2349/139A :                            ;
 2350/139A :                            NEXT:
 2351/139A : 2102 0000                  	LD	R2,#0		; In case no index given
 2352/139E :                            NEXT1:
 2353/139E : E602                       	JR	Z,NEXT2
 2354/13A0 : 5F00 17A8                  	CALL	GETVAR		; Get index address
 2355/13A4 :                            NEXT2:
 2356/13A4 : 6F03 812E                  	LD	(BRKLIN),R3	; Save code string address
 2357/13A8 : 5F00 043E                  	CALL	BAKSTK		; Look for "FOR" block
 2358/13AC : 5E0E 04D8                  	JP	NZ,NFERR	; No "FOR" - ?NF Error
 2359/13B0 : A13F                       	LD	R15,R3		; Clear nested loops
 2360/13B2 : ACA2                       	EXB	RH2,RL2
 2361/13B4 : 93F2                       	PUSH	@R15,R2		; Save index address
 2362/13B6 : 2030                       	LDB	RH0,@R3		; Get sign of STEP
 2363/13B8 : A930                       	INC	R3
 2364/13BA : A930                       	INC	R3
 2365/13BC : 93F0                       	PUSH	@R15,R0		; Save sign of STEP
 2366/13BE : 93F2                       	PUSH	@R15,R2		; Save index address
 2367/13C0 : 5F00 2660                  	CALL	PHLTFP		; Move index value to FPREG
 2368/13C4 : 2DF3                       	EX	@R15,R3		; Save address of TO value
 2369/13C6 : ACB3                       	EXB	RH3,RL3
 2370/13C8 : 93F3                       	PUSH	@R15,R3		; Save address of index
 2371/13CA : 5F00 21AC                  	CALL	ADDPHL		; Add STEP to index value
 2372/13CE : 97F3                       	POP	R3,@R15		; Restore address of index
 2373/13D0 : 5F00 269C                  	CALL	FPTHL		; Move value to index variable
 2374/13D4 : 97F3                       	POP	R3,@R15		; Restore address of TO value
 2375/13D6 : 5F00 2682                  	CALL	LOADFP		; Move TO value to BCDE
 2376/13DA : 93F3                       	PUSH	@R15,R3		; Save address of line of FOR
 2377/13DC : 5F00 26E4                  	CALL	CMPNUM		; Compare index with TO value
 2378/13E0 : 97F3                       	POP	R3,@R15		; Restore address of line num
 2379/13E2 : 97F1                       	POP	R1,@R15		; Address of sign of STEP
 2380/13E4 : 8210                       	SUBB	RH0,RH1		; Compare with expected sign
 2381/13E6 : 5F00 2682                  	CALL	LOADFP		; BC = Loop stmt,DE = Line num
 2382/13EA : AC91                       	EXB	RH1,RL1
 2383/13EC : ACA2                       	EXB	RH2,RL2
 2384/13EE : 5E06 1400                  	JP	Z,KILFOR	; Loop finished - Terminate it
 2385/13F2 : AD23                       	EX	R3,R2		; Loop statement line number
 2386/13F4 : 6F03 80BC                  	LD	(LINEAT),R3	; Set loop line number
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 41 - 2023/10/12 18時22分27秒


 2387/13F8 : A09B                       	LDB	RL3,RL1		; Set code string to loop
 2388/13FA : A013                       	LDB	RH3,RH1
 2389/13FC : 5E08 0C10                  	JP	PUTFID		; Put back "FOR" and continue
 2390/1400 :                            ;
 2391/1400 :                            KILFOR:
 2392/1400 : A13F                       	LD	R15,R3		; Remove "FOR" block
 2393/1402 : 6103 812E                  	LD	R3,(BRKLIN)	; Code string after "NEXT"
 2394/1406 : 2030                       	LDB	RH0,@R3		; Get next byte in code string
 2395/1408 : 0A00 2C2C                  	CPB	RH0,#','	; More NEXTs ?
 2396/140C : 5E0E 0C16                  	JP	NZ,RUNCNT	; No - Do next statement
 2397/1410 : 5F00 0C96                  	CALL	GETCHR		; Position to index name
 2398/1414 : 5F00 139E                  	CALL	NEXT1		; Re-enter NEXT routine
 2399/1418 :                            ; < will not RETurn to here , Exit to RUNCNT or Loop >
 2400/1418 :                            ;
 2401/1418 :                            GETNUM:
 2402/1418 : 5F00 1438                  	CALL	EVAL		; Get a numeric expression
 2403/141C :                            TSTNUM:
 2404/141C : 8D83                       	RESFLG	C
 2405/141E : E801                       	JR	CHKTYP		; Clear carry (numeric)
 2406/1420 :                            TSTSTR:
 2407/1420 : 8D81                       	SETFLG	C		; Set carry (string)
 2408/1422 :                            CHKTYP:
 2409/1422 : 6000 810C                  	LDB	RH0,(TYPE)	; Check types match
 2410/1426 : B400                       	ADCB	RH0,RH0		; Expected + actual
 2411/1428 : 8400                       	ORB	RH0,RH0
 2412/142A : 8D83                       	RESFLG	C		; Clear carry , set parity
 2413/142C : 9E04                       	RET	PE		; Even parity - Types match
 2414/142E : 5E08 04E8                  	JP	TMERR		; Different types - Error
 2415/1432 :                            ;
 2416/1432 :                            OPNPAR:
 2417/1432 : C428                       	LD	RH4,#"("
 2418/1434 : 5F00 09DA                  	CALL	CHKSYN		; Make sure "(" follows
 2419/1438 :                            EVAL:
 2420/1438 : 8CC1                       	LDCTLB	RL4,FLAGS
 2421/143A : AB30                       	DEC	R3,#1		; Evaluate expression & save
 2422/143C : 8CC9                       	LDCTLB	FLAGS,RL4
 2423/143E : C200                       	LDB	RH2,#0		; Precedence value
 2424/1440 :                            EVAL1:
 2425/1440 : 93F2                       	PUSH	@R15,R2		; Save precedence
 2426/1442 : C901                       	LDB	RL1,#1
 2427/1444 : 5F00 049C                  	CALL	CHKSTK		; Check for 1 level of stack
 2428/1448 : 5F00 150C                  	CALL	OPRND		; Get next expression value
 2429/144C :                            EVAL2:
 2430/144C : 6F03 8130                  	LD	(NXTOPR),R3	; Save address of next operator
 2431/1450 :                            EVAL3:
 2432/1450 : 6103 8130                  	LD	R3,(NXTOPR)	; Restore address of next opr
 2433/1454 : 97F1                       	POP	R1,@R15		; Precedence value and operator
 2434/1456 : A010                       	LDB	RH0,RH1		; Get precedence value
 2435/1458 : 0A00 7878                  	CPB	RH0,#78H	; "AND" or "OR" ?
 2436/145C : E702                       	JR	C,EVAL4
 2437/145E : 5F00 141C                  	CALL	TSTNUM		; No - Make sure it's a number
 2438/1462 :                            EVAL4:
 2439/1462 : 2030                       	LDB	RH0,@R3		; Get next operator / function
 2440/1464 : C200                       	LDB	RH2,#0		; Clear Last relation
 2441/1466 :                            RLTLP:
 2442/1466 : 0200 B3B3                  	SUBB	RH0,#ZGTR	; ">" Token
 2443/146A : 5E07 1494                  	JP	C,FOPRND	; + - * / ^ AND OR - Test it
 2444/146E : 0A00 0303                  	CPB	RH0,#ZLTH+1-ZGTR; < = >
 2445/1472 : 5E0F 1494                  	JP	NC,FOPRND	; Function - Call it
 2446/1476 : 0A00 0101                  	CPB	RH0,#ZEQUAL-ZGTR; "="
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 42 - 2023/10/12 18時22分27秒


 2447/147A : B208                       	RLCB	RH0,#1		; <- Test for legal
 2448/147C : 8820                       	XORB	RH0,RH2
 2449/147E : 8D83                       	RESFLG	C		; <- combinations of < = >
 2450/1480 : 8A20                       	CPB	RH0,RH2		; <- by combining last token
 2451/1482 : A002                       	LDB	RH2,RH0		; <- with current one
 2452/1484 : 5E07 04D0                  	JP	C,SNERR		; Error if "<<' '==" or ">>"
 2453/1488 : 6F03 8124                  	LD	(CUROPR),R3	; Save address of current token
 2454/148C : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2455/1490 : 5E08 1466                  	JP	RLTLP		; Treat the two as one
 2456/1494 :                            ;
 2457/1494 :                            FOPRND:
 2458/1494 : A020                       	LDB	RH0,RH2		; < = > found ?
 2459/1496 : 8400                       	ORB	RH0,RH0
 2460/1498 : 8D83                       	RESFLG	C
 2461/149A : 5E0E 16A6                  	JP	NZ,TSTRED	; Yes - Test for reduction
 2462/149E : 2030                       	LDB	RH0,@R3		; Get operator token
 2463/14A0 : 6F03 8124                  	LD	(CUROPR),R3	; Save operator address
 2464/14A4 : 0200 ACAC                  	SUBB	RH0,#ZPLUS	; Operator or function?
 2465/14A8 : 9E07                       	RET	C		; Neither - Exit
 2466/14AA : 0A00 0707                  	CPB	RH0,#ZOR+1-ZPLUS; Is it + - * / ^ AND OR ?
 2467/14AE : 9E0F                       	RET	NC		; No - Exit
 2468/14B0 : A00A                       	LDB	RL2,RH0		; Coded operator
 2469/14B2 : 6000 810C                  	LDB	RH0,(TYPE)	; Get data type
 2470/14B6 : AA00                       	DECB	RH0,#1		; FF = numeric , 00 = string
 2471/14B8 : 84A0                       	ORB	RH0,RL2
 2472/14BA : 8D83                       	RESFLG	C		; Combine with coded operator
 2473/14BC : A0A0                       	LDB	RH0,RL2		; Get coded operator
 2474/14BE : 5E06 1EAE                  	JP	Z,CONCAT	; String concatenation
 2475/14C2 : B200                       	RLB	RH0,#1		; Times 2
 2476/14C4 :                            ;	ADDB	RH0,RL2		; Times 3
 2477/14C4 : B200                       	RLB	RH0,#1		; Times 4 @@ word aligned
 2478/14C6 : A00A                       	LDB	RL2,RH0		; To DE (D is 0)
 2479/14C8 : 2103 0366                  	LD	R3,#PRITAB	; Precedence table
 2480/14CC : 8123                       	ADD	R3,R2		; To the operator concerned
 2481/14CE : A010                       	LDB	RH0,RH1		; Last operator precedence
 2482/14D0 : 2032                       	LDB	RH2,@R3		; Get evaluation precedence
 2483/14D2 : 8A20                       	CPB	RH0,RH2		; Compare with eval precedence
 2484/14D4 : 9E0F                       	RET	NC		; Exit if higher precedence
 2485/14D6 : 8CC1                       	LDCTLB	RL4,FLAGS
 2486/14D8 : A930                       	INC	R3		; Point to routine address
 2487/14DA : 8CC9                       	LDCTLB	FLAGS,RL4
 2488/14DC : 5F00 141C                  	CALL	TSTNUM		; Make sure it's a number
 2489/14E0 :                            ;
 2490/14E0 :                            STKTHS:
 2491/14E0 : 93F1                       	PUSH	@R15,R1		; Save last precedence & token
 2492/14E2 : 2101 1450                  	LD	R1,#EVAL3	; Where to go on prec' break
 2493/14E6 : 93F1                       	PUSH	@R15,R1		; Save on stack for return
 2494/14E8 : A0A1                       	LDB	RH1,RL2		; Save operator
 2495/14EA : A029                       	LDB	RL1,RH2		; Save precedence
 2496/14EC : 5F00 2646                  	CALL	STAKFP		; Move value to stack
 2497/14F0 : A01A                       	LDB	RL2,RH1		; Restore operator
 2498/14F2 : A092                       	LDB	RH2,RL1		; Restore precedence
 2499/14F4 : A930                       	INC	R3		; @@ word aligned
 2500/14F6 : 8CC9                       	LDCTLB	FLAGS,RL4
 2501/14F8 :                            ;	LDB	RL1,@R3		; Get LSB of routine address
 2502/14F8 : 2031                       	LDB	RH1,@R3		; @@@@ Get LSB of routine address
 2503/14FA : A930                       	INC	R3
 2504/14FC :                            ;	LDB	RH1,@R3		; Get MSB of routine address
 2505/14FC : 2039                       	LDB	RL1,@R3		; @@@@ Get MSB of routine address
 2506/14FE : A930                       	INC	R3
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 43 - 2023/10/12 18時22分27秒


 2507/1500 : 8CC9                       	LDCTLB	FLAGS,RL4
 2508/1502 : 93F1                       	PUSH	@R15,R1		; Save routine address
 2509/1504 : 6103 8124                  	LD	R3,(CUROPR)	; Address of current operator
 2510/1508 : 5E08 1440                  	JP	EVAL1		; Loop until prec' break
 2511/150C :                            ;
 2512/150C :                            OPRND:
 2513/150C : 8800                       	XORB	RH0,RH0
 2514/150E : 8D83                       	RESFLG	C		; Get operand routine
 2515/1510 : 6E00 810C                  	LDB	(TYPE),RH0	; Set numeric expected
 2516/1514 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2517/1518 : CA24                       	LDB	RL2,#MO		; ?MO Error
 2518/151A : 5E06 04EA                  	JP	Z,ERROR		; No operand - Error
 2519/151E : 5E07 27FE                  	JP	C,ASCTFP	; Number - Get value
 2520/1522 : 5F00 0DAA                  	CALL	CHKLTR		; See if a letter
 2521/1526 : 5E0F 15A6                  	JP	NC,CONVAR	; Letter - Find variable
 2522/152A : 0A00 2626                  	CPB	RH0,#'&'	; &H = HEX, &B = BINARY
 2523/152E : EE0D                       	JR	NZ,NOTAMP
 2524/1530 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2525/1534 : 0A00 4848                  	CPB	RH0,#'H'	; Hex number indicated? [function added]
 2526/1538 : 5E06 2F3E                  	JP	Z,HEXTFP	; Convert Hex to FPREG
 2527/153C : 0A00 4242                  	CPB	RH0,#'B'	; Binary number indicated? [function added]
 2528/1540 : 5E06 2FF8                  	JP	Z,BINTFP	; Convert Bin to FPREG
 2529/1544 : CA02                       	LDB	RL2,#SN		; If neither then a ?SN Error
 2530/1546 : 5E06 04EA                  	JP	Z,ERROR
 2531/154A :                            NOTAMP:
 2532/154A : 0A00 ACAC                  	CPB	RH0,#ZPLUS	; '+' Token ?
 2533/154E : 5E06 150C                  	JP	Z,OPRND		; Yes - Look for operand
 2534/1552 : 0A00 2E2E                  	CPB	RH0,#'.'	; '.' ?
 2535/1556 : 5E06 27FE                  	JP	Z,ASCTFP	; Yes - Create FP number
 2536/155A : 0A00 ADAD                  	CPB	RH0,#ZMINUS	; '-' Token ?
 2537/155E : 5E06 158E                  	JP	Z,MINUS		; Yes - Do minus
 2538/1562 : 0A00 2222                  	CPB	RH0,#'"'	; Literal string ?
 2539/1566 : 5E06 1C68                  	JP	Z,QTSTR		; Get string terminated by '"'
 2540/156A : 0A00 AAAA                  	CPB	RH0,#ZNOT	; "NOT" Token ?
 2541/156E : 5E06 1762                  	JP	Z,EVNOT		; Yes - Eval NOT expression
 2542/1572 : 0A00 A7A7                  	CPB	RH0,#ZFN	; "FN" Token ?
 2543/1576 : 5E06 1B4A                  	JP	Z,DOFN		; Yes - Do FN routine
 2544/157A : 0200 B6B6                  	SUBB	RH0,#ZSGN	; Is it a function?
 2545/157E : 5E0F 15C8                  	JP	NC,FNOFST	; Yes - Evaluate function
 2546/1582 :                            EVLPAR:
 2547/1582 : 5F00 1432                  	CALL	OPNPAR		; Evaluate expression in "()"
 2548/1586 : C429                       	LD	RH4,#")"
 2549/1588 : 5F00 09DA                  	CALL	CHKSYN		; Make sure ")" follows
 2550/158C : 9E08                       	RET
 2551/158E :                            ;
 2552/158E :                            MINUS:
 2553/158E : C27D                       	LDB	RH2,#7DH	; '-' precedence
 2554/1590 : 5F00 1440                  	CALL	EVAL1		; Evaluate until prec' break
 2555/1594 : 6103 8130                  	LD	R3,(NXTOPR)	; Get next operator address
 2556/1598 : 93F3                       	PUSH	@R15,R3		; Save next operator address
 2557/159A : 5F00 2636                  	CALL	INVSGN		; Negate value
 2558/159E :                            RETNUM:
 2559/159E : 5F00 141C                  	CALL	TSTNUM		; Make sure it's a number
 2560/15A2 : 97F3                       	POP	R3,@R15		; Restore next operator address
 2561/15A4 : 9E08                       	RET
 2562/15A6 :                            ;
 2563/15A6 :                            CONVAR:
 2564/15A6 : 5F00 17A8                  	CALL	GETVAR		; Get variable address to DE
 2565/15AA :                            FRMEVL:
 2566/15AA : 93F3                       	PUSH	@R15,R3		; Save code string address
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 44 - 2023/10/12 18時22分27秒


 2567/15AC : AD23                       	EX	R3,R2		; Variable address to HL
 2568/15AE : ACB3                       	EXB	RH3,RL3
 2569/15B0 : 6F03 8144                  	LD	(FPREG),R3	; Save address of variable
 2570/15B4 : ACB3                       	EXB	RH3,RL3
 2571/15B6 : 6000 810C                  	LDB	RH0,(TYPE)	; Get type
 2572/15BA : 8400                       	ORB	RH0,RH0
 2573/15BC : 8D83                       	RESFLG	C		; Numeric?
 2574/15BE : EE02                       	JR	NZ,FRMEVL1
 2575/15C0 : 5F00 2660                  	CALL	PHLTFP		; Yes - Move contents to FPREG
 2576/15C4 :                            FRMEVL1:
 2577/15C4 : 97F3                       	POP	R3,@R15		; Restore code string address
 2578/15C6 : 9E08                       	RET
 2579/15C8 :                            ;
 2580/15C8 :                            FNOFST:
 2581/15C8 : C100                       	LDB	RH1,#0		; Get address of function
 2582/15CA : B200                       	RLB	RH0,#1		; Double function offset
 2583/15CC : A009                       	LDB	RL1,RH0		; BC = Offset in function table
 2584/15CE : 93F1                       	PUSH	@R15,R1		; Save adjusted token value
 2585/15D0 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2586/15D4 : A090                       	LDB	RH0,RL1		; Get adjusted token value
 2587/15D6 : 0A00 3131                  	CPB	RH0,#2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
 2588/15DA : 5E07 1606                  	JP	C,FNVAL		; No - Do function
 2589/15DE : 5F00 1432                  	CALL	OPNPAR		; Evaluate expression	(X,...
 2590/15E2 : C42C                       	LD	RH4,#','
 2591/15E4 : 5F00 09DA                  	CALL	CHKSYN		; Make sure ',' follows
 2592/15E8 : 5F00 1420                  	CALL	TSTSTR		; Make sure it's a string
 2593/15EC : AD23                       	EX	R3,R2		; Save code string address
 2594/15EE : 6103 8144                  	LD	R3,(FPREG)	; Get address of string
 2595/15F2 : ACB3                       	EXB	RH3,RL3
 2596/15F4 : 2DF3                       	EX	@R15,R3		; Save address of string
 2597/15F6 : 93F3                       	PUSH	@R15,R3		; Save adjusted token value
 2598/15F8 : AD23                       	EX	R3,R2		; Restore code string address
 2599/15FA : 5F00 2164                  	CALL	GETINT		; Get integer 0-255
 2600/15FE : AD23                       	EX	R3,R2		; Save code string address
 2601/1600 : 2DF3                       	EX	@R15,R3		; Save integer,HL = adj' token
 2602/1602 : 5E08 1612                  	JP	GOFUNC		; Jump to string function
 2603/1606 :                            ;
 2604/1606 :                            FNVAL:
 2605/1606 : 5F00 1582                  	CALL	EVLPAR		; Evaluate expression
 2606/160A : 2DF3                       	EX	@R15,R3		; HL = Adjusted token value
 2607/160C : 2102 159E                  	LD	R2,#RETNUM	; Return number from function
 2608/1610 : 93F2                       	PUSH	@R15,R2		; Save on stack
 2609/1612 :                            GOFUNC:
 2610/1612 : 2101 01C4                  	LD	R1,#FNCTAB	; Function routine addresses
 2611/1616 : 8113                       	ADD	R3,R1		; Point to right address
 2612/1618 :                            ;	LDB	RL1,@R3		; Get LSB of address
 2613/1618 : 2031                       	LDB	RH1,@R3		; Get LSB of address
 2614/161A : 8CC1                       	LDCTLB	RL4,FLAGS
 2615/161C : A930                       	INC	R3
 2616/161E : 8CC9                       	LDCTLB	FLAGS,RL4	;
 2617/1620 :                            ;	LDB	RH3,@R3		; Get MSB of address
 2618/1620 : 203B                       	LDB	RL3,@R3		; Get MSB of address
 2619/1622 : A013                       	LDB	RH3,RH1		; Address to HL
 2620/1624 : 1E38                       	JP	@R3		; Jump to function
 2621/1626 :                            ;
 2622/1626 :                            SGNEXP:
 2623/1626 : AA20                       	DECB	RH2,#1		; Dee to flag negative exponent
 2624/1628 : 0A00 ADAD                  	CPB	RH0,#ZMINUS	; '-' token ?
 2625/162C : 9E06                       	RET	Z		; Yes - Return
 2626/162E : 0A00 2D2D                  	CPB	RH0,#'-'	; '-' ASCII ?
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 45 - 2023/10/12 18時22分27秒


 2627/1632 : 9E06                       	RET	Z		; Yes - Return
 2628/1634 : A820                       	INCB	RH2,#1		; Inc to flag positive exponent
 2629/1636 : 0A00 2B2B                  	CPB	RH0,#'+'	; '+' ASCII ?
 2630/163A : 9E06                       	RET	Z		; Yes - Return
 2631/163C : 0A00 ACAC                  	CPB	RH0,#ZPLUS	; '+' token ?
 2632/1640 : 9E06                       	RET	Z		; Yes - Return
 2633/1642 : 8CC1                       	LDCTLB	RL4,FLAGS
 2634/1644 : AB30                       	DEC	R3,#1		; DEC 'cos GETCHR INCs
 2635/1646 : 8CC9                       	LDCTLB	FLAGS,RL4
 2636/1648 : 9E08                       	RET			; Return "NZ"
 2637/164A :                            ;
 2638/164A :                            POR:
 2639/164A : 0400 AFAF                  	ORB	RH0,#0AFH	; Flag "OR"
 2640/164E : 8D83                       	RESFLG	C
 2641/1650 : E802                       	JR	PAND1
 2642/1652 :                            PAND:
 2643/1652 : 8800                       	XORB	RH0,RH0
 2644/1654 : 8D83                       	RESFLG	C		; Flag "AND"
 2645/1656 :                            PAND1:
 2646/1656 : 8C81                       	LDCTLB	RL0,FLAGS
 2647/1658 : 93F0                       	PUSH	@R15,R0		; Save "AND" / "OR" flag
 2648/165A : 5F00 141C                  	CALL	TSTNUM		; Make sure it's a number
 2649/165E : 5F00 0DCA                  	CALL	DEINT		; Get integer -32768 to 32767
 2650/1662 : 97F0                       	POP	R0,@R15		; Restore "AND" / "OR" flag
 2651/1664 : 8C89                       	LDCTLB	FLAGS,RL0
 2652/1666 : AD23                       	EX	R3,R2		; <- Get last
 2653/1668 : 97F1                       	POP	R1,@R15		; <- value
 2654/166A : 2DF3                       	EX	@R15,R3		; <- from
 2655/166C : AD23                       	EX	R3,R2		; <- stack
 2656/166E : 5F00 2664                  	CALL	FPBCDE		; Move last value to FPREG
 2657/1672 : 8C81                       	LDCTLB	RL0,FLAGS
 2658/1674 : 93F0                       	PUSH	@R15,R0		; Save "AND" / "OR" flag
 2659/1676 : 5F00 0DCA                  	CALL	DEINT		; Get integer -32768 to 32767
 2660/167A : 97F0                       	POP	R0,@R15		; Restore "AND" / "OR" flag
 2661/167C : 8C89                       	LDCTLB	FLAGS,RL0
 2662/167E : 97F1                       	POP	R1,@R15		; Get value
 2663/1680 : A090                       	LDB	RH0,RL1		; Get LSB
 2664/1682 : 2103 1ADA                  	LD	R3,#ACPASS	; Address of save AC as current
 2665/1686 : 5E0E 1698                  	JP	NZ,POR1		; Jump if OR
 2666/168A : 86A0                       	ANDB	RH0,RL2
 2667/168C : 8D83                       	RESFLG	C		; "AND" LSBs
 2668/168E : A009                       	LDB	RL1,RH0		; Save LSB
 2669/1690 : A010                       	LDB	RH0,RH1		; Get MBS
 2670/1692 : 8620                       	ANDB	RH0,RH2
 2671/1694 : 8D83                       	RESFLG	C		; "AND" MSBs
 2672/1696 : 1E38                       	JP	@R3		; Save AC as current (ACPASS)
 2673/1698 :                            ;
 2674/1698 :                            POR1:
 2675/1698 : 84A0                       	ORB	RH0,RL2
 2676/169A : 8D83                       	RESFLG	C		; "OR" LSBs
 2677/169C : A009                       	LDB	RL1,RH0		; Save LSB
 2678/169E : A010                       	LDB	RH0,RH1		; Get MSB
 2679/16A0 : 8420                       	ORB	RH0,RH2
 2680/16A2 : 8D83                       	RESFLG	C		; "OR" MSBs
 2681/16A4 : 1E38                       	JP	@R3		; Save AC as current (ACPASS)
 2682/16A6 :                            ;
 2683/16A6 :                            TSTRED:
 2684/16A6 : 2103 16C2                  	LD	R3,#CMPLOG	; Logical compare routine
 2685/16AA : 6000 810C                  	LDB	RH0,(TYPE)	; Get data type
 2686/16AE : B20C                       	RRCB	RH0,#1		; Carry set = string
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 46 - 2023/10/12 18時22分27秒


 2687/16B0 : A020                       	LDB	RH0,RH2		; Get last precedence value
 2688/16B2 : B208                       	RLCB	RH0,#1		; Times 2 plus carry
 2689/16B4 : A00A                       	LDB	RL2,RH0		; To E
 2690/16B6 : C264                       	LDB	RH2,#64H	; Relational precedence
 2691/16B8 : A010                       	LDB	RH0,RH1		; Get current precedence
 2692/16BA : 8A20                       	CPB	RH0,RH2		; Compare with last
 2693/16BC : 9E0F                       	RET	NC		; Eval if last was rel' or log'
 2694/16BE : 5E08 14E0                  	JP	STKTHS		; Stack this one and get next
 2695/16C2 :                            ;
 2696/16C2 :                            CMPLOG:
 2697/16C2 : 00                         	DB	0
 2698/16C3 : 16 C6                      	DW	CMPLG1		; Compare two values / strings
 2699/16C5 : 00                         	DB	0
 2700/16C6 :                            CMPLG1:
 2701/16C6 : A090                       	LDB	RH0,RL1		; Get data type
 2702/16C8 : 8400                       	ORB	RH0,RH0
 2703/16CA : 8D83                       	RESFLG	C
 2704/16CC : B20C                       	RRCB	RH0,#1
 2705/16CE : 97F1                       	POP	R1,@R15		; Get last expression to BCDE
 2706/16D0 : 97F2                       	POP	R2,@R15
 2707/16D2 : 8C81                       	LDCTLB	RL0,FLAGS
 2708/16D4 : 93F0                       	PUSH	@R15,R0		; Save status
 2709/16D6 : 5F00 1422                  	CALL	CHKTYP		; Check that types match
 2710/16DA : 2103 174E                  	LD	R3,#CMPRES	; Result to comparison
 2711/16DE : 93F3                       	PUSH	@R15,R3		; Save for RETurn
 2712/16E0 : 5E06 26E4                  	JP	Z,CMPNUM	; Compare values if numeric
 2713/16E4 : 8800                       	XORB	RH0,RH0
 2714/16E6 : 8D83                       	RESFLG	C		; Compare two strings
 2715/16E8 : 6E00 810C                  	LDB	(TYPE),RH0	; Set type to numeric
 2716/16EC : 93F2                       	PUSH	@R15,R2		; Save string name
 2717/16EE : 5F00 1F38                  	CALL	GSTRCU		; Get current string
 2718/16F2 : 2030                       	LDB	RH0,@R3		; Get length of string
 2719/16F4 : 8CC1                       	LDCTLB	RL4,FLAGS
 2720/16F6 : A930                       	INC	R3
 2721/16F8 : A930                       	INC	R3
 2722/16FA : 2039                       	LDB	RL1,@R3		; Get LSB of address
 2723/16FC : A930                       	INC	R3
 2724/16FE : 8CC9                       	LDCTLB	FLAGS,RL4
 2725/1700 : 2031                       	LDB	RH1,@R3		; Get MSB of address
 2726/1702 : 97F2                       	POP	R2,@R15		; Restore string name
 2727/1704 : 93F1                       	PUSH	@R15,R1		; Save address of string
 2728/1706 : 8C81                       	LDCTLB	RL0,FLAGS
 2729/1708 : 93F0                       	PUSH	@R15,R0		; Save length of string
 2730/170A : 5F00 1F40                  	CALL	GSTRDE		; Get second string
 2731/170E : 5F00 2682                  	CALL	LOADFP		; Get address of second string
 2732/1712 : 97F0                       	POP	R0,@R15		; Restore length of string 1
 2733/1714 : 8C89                       	LDCTLB	FLAGS,RL0
 2734/1716 : A002                       	LDB	RH2,RH0		; Length to D
 2735/1718 : 97F3                       	POP	R3,@R15		; Restore address of string 1
 2736/171A :                            CMPSTR:
 2737/171A : A0A0                       	LDB	RH0,RL2		; Bytes of string 2 to do
 2738/171C : 8420                       	ORB	RH0,RH2
 2739/171E : 8D83                       	RESFLG	C		; Bytes of string 1 to do
 2740/1720 : 9E06                       	RET	Z		; Exit if all bytes compared
 2741/1722 : A020                       	LDB	RH0,RH2		; Get bytes of string 1 to do
 2742/1724 : 0200 0101                  	SUBB	RH0,#1
 2743/1728 : 9E07                       	RET	C		; Exit if end of string 1
 2744/172A : 8800                       	XORB	RH0,RH0
 2745/172C : 8D83                       	RESFLG	C
 2746/172E : 8AA0                       	CPB	RH0,RL2		; Bytes of string 2 to do
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 47 - 2023/10/12 18時22分27秒


 2747/1730 : A800                       	INCB	RH0,#1
 2748/1732 : 9E0F                       	RET	NC		; Exit if end of string 2
 2749/1734 : AA20                       	DECB	RH2,#1		; Count bytes in string 1
 2750/1736 : AAA0                       	DECB	RL2,#1		; Count bytes in string 2
 2751/1738 : 2010                       	LDB	RH0,@R1		; Byte in string 2
 2752/173A : 0A30                       	CPB	RH0,@R3		; Compare to byte in string 1
 2753/173C : 8CC1                       	LDCTLB	RL4,FLAGS
 2754/173E : A930                       	INC	R3		; Move up string 1
 2755/1740 : A910                       	INC	R1		; Move up string 2
 2756/1742 : 8CC9                       	LDCTLB	FLAGS,RL4
 2757/1744 : 5E06 171A                  	JP	Z,CMPSTR	; Same - Try next bytes
 2758/1748 : 8D85                       	COMFLG	C		; Flag difference (">" or "<")
 2759/174A : 5E08 2604                  	JP	FLGDIF		; "<" gives -1 , ">" gives +1
 2760/174E :                            ;
 2761/174E :                            CMPRES:
 2762/174E : A800                       	INCB	RH0,#1		; Increment current value
 2763/1750 : B400                       	ADCB	RH0,RH0		; Double plus carry
 2764/1752 : 97F1                       	POP	R1,@R15		; Get other value
 2765/1754 : 8610                       	ANDB	RH0,RH1
 2766/1756 : 8D83                       	RESFLG	C		; Combine them
 2767/1758 : 0000 FFFF                  	ADDB	RH0,#-1		; Carry set if different
 2768/175C : B600                       	SBCB	RH0,RH0		; 00 - Equal , FF - Different
 2769/175E : 5E08 2610                  	JP	FLGREL		; Set current value & continue
 2770/1762 :                            ;
 2771/1762 :                            EVNOT:
 2772/1762 : C25A                       	LDB	RH2,#5AH	; Precedence value for "NOT"
 2773/1764 : 5F00 1440                  	CALL	EVAL1		; Eval until precedence break
 2774/1768 : 5F00 141C                  	CALL	TSTNUM		; Make sure it's a number
 2775/176C : 5F00 0DCA                  	CALL	DEINT		; Get integer -32768 - 32767
 2776/1770 : A0A0                       	LDB	RH0,RL2		; Get LSB
 2777/1772 : 8CC1                       	LDCTLB	RL4,FLAGS
 2778/1774 : 8C00                       	COMB	RH0		; Invert LSB
 2779/1776 : A009                       	LDB	RL1,RH0		; Save "NOT" of LSB
 2780/1778 : A020                       	LDB	RH0,RH2		; Get MSB
 2781/177A : 8C00                       	COMB	RH0		; Invert MSB
 2782/177C : 8CC9                       	LDCTLB	FLAGS,RL4
 2783/177E : 5F00 1ADA                  	CALL	ACPASS		; Save AC as current
 2784/1782 : 97F1                       	POP	R1,@R15		; Clean up stack
 2785/1784 : 5E08 1450                  	JP	EVAL3		; Continue evaluation
 2786/1788 :                            ;
 2787/1788 :                            DIMRET:
 2788/1788 : 8CC1                       	LDCTLB	RL4,FLAGS
 2789/178A : AB30                       	DEC	R3,#1		; DEC 'cos GETCHR INCs
 2790/178C : 8CC9                       	LDCTLB	FLAGS,RL4
 2791/178E : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2792/1792 : 9E06                       	RET	Z		; End of DIM statement
 2793/1794 : C42C                       	LD	RH4,#','
 2794/1796 : 5F00 09DA                  	CALL	CHKSYN		; Make sure ',' follows
 2795/179A :                            DIM:
 2796/179A : 2101 1788                  	LD	R1,#DIMRET	; Return to "DIMRET"
 2797/179E : 93F1                       	PUSH	@R15,R1		; Save on stack
 2798/17A0 : 0400 AFAF                  	ORB	RH0,#0AFH	; Flag "Create" variable
 2799/17A4 : 8D83                       	RESFLG	C
 2800/17A6 : E802                       	JR	GETVAR1
 2801/17A8 :                            GETVAR:
 2802/17A8 : 8800                       	XORB	RH0,RH0
 2803/17AA : 8D83                       	RESFLG	C		; Find variable address,to DE
 2804/17AC :                            GETVAR1:
 2805/17AC : 6E00 810B                  	LDB	(LCRFLG),RH0	; Set locate / create flag
 2806/17B0 : 2031                       	LDB	RH1,@R3		; Get First byte of name
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 48 - 2023/10/12 18時22分27秒


 2807/17B2 :                            GTFNAM:
 2808/17B2 : 5F00 0DAA                  	CALL	CHKLTR		; See if a letter
 2809/17B6 : 5E07 04D0                  	JP	C,SNERR		; ?SN Error if not a letter
 2810/17BA : 8800                       	XORB	RH0,RH0
 2811/17BC : 8D83                       	RESFLG	C
 2812/17BE : A009                       	LDB	RL1,RH0		; Clear second byte of name
 2813/17C0 : 6E00 810C                  	LDB	(TYPE),RH0	; Set type to numeric
 2814/17C4 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2815/17C8 : 5E07 17D4                  	JP	C,SVNAM2	; Numeric - Save in name
 2816/17CC : 5F00 0DAA                  	CALL	CHKLTR		; See if a letter
 2817/17D0 : 5E07 17E6                  	JP	C,CHARTY	; Not a letter - Check type
 2818/17D4 :                            SVNAM2:
 2819/17D4 : A009                       	LDB	RL1,RH0		; Save second byte of name
 2820/17D6 :                            ENDNAM:
 2821/17D6 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2822/17DA : 5E07 17D6                  	JP	C,ENDNAM	; Numeric - Get another
 2823/17DE : 5F00 0DAA                  	CALL	CHKLTR		; See if a letter
 2824/17E2 : 5E0F 17D6                  	JP	NC,ENDNAM	; Letter - Get another
 2825/17E6 :                            CHARTY:
 2826/17E6 : 0200 2424                  	SUBB	RH0,#'$'	; String variable?
 2827/17EA : 5E0E 17FE                  	JP	NZ,NOTSTR	; No - Numeric variable
 2828/17EE : A800                       	INCB	RH0,#1		; A = 1 (string type)
 2829/17F0 : 6E00 810C                  	LDB	(TYPE),RH0	; Set type to string
 2830/17F4 : B204                       	RRB	RH0,#1		; A = 80H , Flag for string
 2831/17F6 : 8090                       	ADDB	RH0,RL1		; 2nd byte of name has bit 7 on
 2832/17F8 : A009                       	LDB	RL1,RH0		; Resave second byte on name
 2833/17FA : 5F00 0C96                  	CALL	GETCHR		; Get next character
 2834/17FE :                            NOTSTR:
 2835/17FE : 6000 812A                  	LDB	RH0,(FORFLG)	; Array name needed ?
 2836/1802 : AA00                       	DECB	RH0,#1
 2837/1804 : 5E06 192C                  	JP	Z,ARLDSV	; Yes - Get array name
 2838/1808 : 5E0D 1816                  	JP	PL,NSCFOR	; No array with "FOR" or "FN"
 2839/180C : 2030                       	LDB	RH0,@R3		; Get byte again
 2840/180E : 0200 2828                  	SUBB	RH0,#'('	; Subscripted variable?
 2841/1812 : 5E06 18E8                  	JP	Z,SBSCPT	; Yes - Sort out subscript
 2842/1816 :                            ;
 2843/1816 :                            NSCFOR:
 2844/1816 : 8800                       	XORB	RH0,RH0
 2845/1818 : 8D83                       	RESFLG	C		; Simple variable
 2846/181A : 6E00 812A                  	LDB	(FORFLG),RH0	; Clear "FOR" flag
 2847/181E : 93F3                       	PUSH	@R15,R3		; Save code string address
 2848/1820 : A012                       	LDB	RH2,RH1		; DE = Variable name to find
 2849/1822 : A09A                       	LDB	RL2,RL1
 2850/1824 : 6103 813E                  	LD	R3,(FNRGNM)	; FN argument name
 2851/1828 : 5F00 09CE                  	CALL	CPDEHL		; Is it the FN argument?
 2852/182C : 2102 8140                  	LD	R2,#FNARG	; Point to argument value
 2853/1830 : 5E06 2488                  	JP	Z,POPHRT	; Yes - Return FN argument value
 2854/1834 : 6103 8138                  	LD	R3,(VAREND)	; End of variables
 2855/1838 : AD23                       	EX	R3,R2		; Address of end of search
 2856/183A : 6103 8136                  	LD	R3,(PROGND)	; Start of variables address
 2857/183E :                            FNDVAR:
 2858/183E : 5F00 09CE                  	CALL	CPDEHL		; End of variable list table?
 2859/1842 : 5E06 1872                  	JP	Z,CFEVAL	; Yes - Called from EVAL?
 2860/1846 : A090                       	LDB	RH0,RL1		; Get second byte of name
 2861/1848 : 0230                       	SUBB	RH0,@R3		; Compare with name in list
 2862/184A : 8CC1                       	LDCTLB	RL4,FLAGS
 2863/184C : A930                       	INC	R3		; Move on to first byte
 2864/184E : 8CC9                       	LDCTLB	FLAGS,RL4
 2865/1850 : 5E0E 1858                  	JP	NZ,FNTHR	; Different - Find another
 2866/1854 : A010                       	LDB	RH0,RH1		; Get first byte of name
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 49 - 2023/10/12 18時22分27秒


 2867/1856 : 0230                       	SUBB	RH0,@R3		; Compare with name in list
 2868/1858 :                            FNTHR:
 2869/1858 : 8CC1                       	LDCTLB	RL4,FLAGS
 2870/185A : A930                       	INC	R3		; Move on to LSB of value
 2871/185C : 8CC9                       	LDCTLB	FLAGS,RL4
 2872/185E : 5E06 18CE                  	JP	Z,RETADR	; Found - Return address
 2873/1862 : 8CC1                       	LDCTLB	RL4,FLAGS
 2874/1864 : A930                       	INC	R3		; <- Skip
 2875/1866 : A930                       	INC	R3		; <- over
 2876/1868 : A930                       	INC	R3		; <- F.P.
 2877/186A : A930                       	INC	R3		; <- value
 2878/186C : 8CC9                       	LDCTLB	FLAGS,RL4
 2879/186E : 5E08 183E                  	JP	FNDVAR		; Keep looking
 2880/1872 :                            ;
 2881/1872 :                            CFEVAL:
 2882/1872 : 97F3                       	POP	R3,@R15		; Restore code string address
 2883/1874 : 2DF3                       	EX	@R15,R3		; Get return address
 2884/1876 : 93F2                       	PUSH	@R15,R2		; Save address of variable
 2885/1878 : 2102 15AA                  	LD	R2,#FRMEVL	; Return address in EVAL
 2886/187C : 5F00 09CE                  	CALL	CPDEHL		; Called from EVAL ?
 2887/1880 : 97F2                       	POP	R2,@R15		; Restore address of variable
 2888/1882 : 5E06 18D4                  	JP	Z,RETNUL	; Yes - Return null variable
 2889/1886 : 2DF3                       	EX	@R15,R3		; Put back return
 2890/1888 : 93F3                       	PUSH	@R15,R3		; Save code string address
 2891/188A : 93F1                       	PUSH	@R15,R1		; Save variable name
 2892/188C : 2101 0006                  	LD	R1,#6		; 2 byte name plus 4 byte data
 2893/1890 : 6103 813A                  	LD	R3,(ARREND)	; End of arrays
 2894/1894 : 93F3                       	PUSH	@R15,R3		; Save end of arrays
 2895/1896 : 8113                       	ADD	R3,R1		; Move up 6 bytes
 2896/1898 : 97F1                       	POP	R1,@R15		; Source address in BC
 2897/189A : 93F3                       	PUSH	@R15,R3		; Save new end address
 2898/189C : 5F00 047C                  	CALL	MOVUP		; Move arrays up
 2899/18A0 : 97F3                       	POP	R3,@R15		; Restore new end address
 2900/18A2 : 6F03 813A                  	LD	(ARREND),R3	; Set new end address
 2901/18A6 : A013                       	LDB	RH3,RH1		; End of variables to HL
 2902/18A8 : A09B                       	LDB	RL3,RL1
 2903/18AA : 6F03 8138                  	LD	(VAREND),R3	; Set new end address
 2904/18AE :                            ;
 2905/18AE :                            ZEROLP:
 2906/18AE : 8CC1                       	LDCTLB	RL4,FLAGS
 2907/18B0 : AB30                       	DEC	R3,#1		; Back through to zero variable
 2908/18B2 : 8CC9                       	LDCTLB	FLAGS,RL4
 2909/18B4 : 0C35 0000                  	LDB	@R3,#0		; Zero byte in variable
 2910/18B8 : 5F00 09CE                  	CALL	CPDEHL		; Done them all?
 2911/18BC : 5E0E 18AE                  	JP	NZ,ZEROLP	; No - Keep on going
 2912/18C0 : 97F2                       	POP	R2,@R15		; Get variable name
 2913/18C2 : 2E3A                       	LDB	@R3,RL2		; Store second character
 2914/18C4 : 8CC1                       	LDCTLB	RL4,FLAGS
 2915/18C6 : A930                       	INC	R3
 2916/18C8 : 2E32                       	LDB	@R3,RH2		; Store first character
 2917/18CA : A930                       	INC	R3
 2918/18CC : 8CC9                       	LDCTLB	FLAGS,RL4
 2919/18CE :                            RETADR:
 2920/18CE : AD23                       	EX	R3,R2		; Address of variable in DE
 2921/18D0 : 97F3                       	POP	R3,@R15		; Restore code string address
 2922/18D2 : 9E08                       	RET
 2923/18D4 :                            ;
 2924/18D4 :                            RETNUL:
 2925/18D4 : 6E00 8147                  	LDB	(FPEXP),RH0	; Set result to zero
 2926/18D8 : 2103 0431                  	LD	R3,#ZERBYT	; Also set a null string
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 50 - 2023/10/12 18時22分27秒


 2927/18DC : ACB3                       	EXB	RH3,RL3
 2928/18DE : 6F03 8144                  	LD	(FPREG),R3	; Save for EVAL
 2929/18E2 : ACB3                       	EXB	RH3,RL3
 2930/18E4 : 97F3                       	POP	R3,@R15		; Restore code string address
 2931/18E6 : 9E08                       	RET
 2932/18E8 :                            ;
 2933/18E8 :                            SBSCPT:
 2934/18E8 : 93F3                       	PUSH	@R15,R3		; Save code string address
 2935/18EA : 6103 810B                  	LD	R3,(LCRFLG)	; Locate/Create and Type
 2936/18EE : 2DF3                       	EX	@R15,R3		; Save and get code string
 2937/18F0 : A002                       	LDB	RH2,RH0		; Zero number of dimensions
 2938/18F2 :                            SCPTLP:
 2939/18F2 : 93F2                       	PUSH	@R15,R2		; Save number of dimensions
 2940/18F4 : 93F1                       	PUSH	@R15,R1		; Save array name
 2941/18F6 : 5F00 0DBA                  	CALL	FPSINT		; Get subscript (0-32767)
 2942/18FA : 97F1                       	POP	R1,@R15		; Restore array name
 2943/18FC : 97F0                       	POP	R0,@R15		; Get number of dimensions
 2944/18FE : 8C89                       	LDCTLB	FLAGS,RL0
 2945/1900 : AD23                       	EX	R3,R2
 2946/1902 : 2DF3                       	EX	@R15,R3		; Save subscript value
 2947/1904 : 93F3                       	PUSH	@R15,R3		; Save LCRFLG and TYPE
 2948/1906 : AD23                       	EX	R3,R2
 2949/1908 : A800                       	INCB	RH0,#1		; Count dimensions
 2950/190A : A002                       	LDB	RH2,RH0		; Save in D
 2951/190C : 2030                       	LDB	RH0,@R3		; Get next byte in code string
 2952/190E : 0A00 2C2C                  	CPB	RH0,#','	; Comma (more to come)?
 2953/1912 : 5E06 18F2                  	JP	Z,SCPTLP	; Yes - More subscripts
 2954/1916 : C429                       	LD	RH4,#")"
 2955/1918 : 5F00 09DA                  	CALL	CHKSYN		; Make sure ")" follows
 2956/191C : 6F03 8130                  	LD	(NXTOPR),R3	; Save code string address
 2957/1920 : 97F3                       	POP	R3,@R15		; Get LCRFLG and TYPE
 2958/1922 : 6F03 810B                  	LD	(LCRFLG),R3	; Restore Locate/create & type
 2959/1926 : CA00                       	LDB	RL2,#0		; Flag not CSAVE* or CLOAD*
 2960/1928 : 93F2                       	PUSH	@R15,R2		; Save number of dimensions (D)
 2961/192A : E803                       	JR	ARLDSV1		; Skip "PUSH HL" and "PUSH AF'
 2962/192C :                            ;
 2963/192C :                            ARLDSV:
 2964/192C : 93F3                       	PUSH	@R15,R3		; Save code string address
 2965/192E : 8C81                       	LDCTLB	RL0,FLAGS
 2966/1930 : 93F0                       	PUSH	@R15,R0		; A = 00 , Flags set = Z,N
 2967/1932 :                            ARLDSV1:
 2968/1932 : 6103 8138                  	LD	R3,(VAREND)	; Start of arrays
 2969/1936 : E801                       	JR	FNDARY1		; Skip "ADD HL,DE"
 2970/1938 :                            FNDARY:
 2971/1938 : 8123                       	ADD	R3,R2		; Move to next array start
 2972/193A :                            FNDARY1:
 2973/193A : AD23                       	EX	R3,R2
 2974/193C : 6103 813A                  	LD	R3,(ARREND)	; End of arrays
 2975/1940 : AD23                       	EX	R3,R2		; Current array pointer
 2976/1942 : 5F00 09CE                  	CALL	CPDEHL		; End of arrays found?
 2977/1946 : 5E06 1992                  	JP	Z,CREARY	; Yes - Create array
 2978/194A : 2030                       	LDB	RH0,@R3		; Get second byte of name
 2979/194C : 8A90                       	CPB	RH0,RL1		; Compare with name given
 2980/194E : 8CC1                       	LDCTLB	RL4,FLAGS
 2981/1950 : A930                       	INC	R3		; Move on
 2982/1952 : 8CC9                       	LDCTLB	FLAGS,RL4
 2983/1954 : 5E0E 195C                  	JP	NZ,NXTARY	; Different - Find next array
 2984/1958 : 2030                       	LDB	RH0,@R3		; Get first byte of name
 2985/195A : 8A10                       	CPB	RH0,RH1		; Compare with name given
 2986/195C :                            NXTARY:
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 51 - 2023/10/12 18時22分27秒


 2987/195C : 8CC1                       	LDCTLB	RL4,FLAGS
 2988/195E : A930                       	INC	R3		; Move on
 2989/1960 : 203A                       	LDB	RL2,@R3		; Get LSB of next array address
 2990/1962 : A930                       	INC	R3
 2991/1964 : 2032                       	LDB	RH2,@R3		; Get MSB of next array address
 2992/1966 : A930                       	INC	R3
 2993/1968 : 8CC9                       	LDCTLB	FLAGS,RL4
 2994/196A : 5E0E 1938                  	JP	NZ,FNDARY	; Not found - Keep looking
 2995/196E : 6000 810B                  	LDB	RH0,(LCRFLG)	; Found Locate or Create it?
 2996/1972 : 8400                       	ORB	RH0,RH0
 2997/1974 : 8D83                       	RESFLG	C
 2998/1976 : 5E0E 04DC                  	JP	NZ,DDERR	; Create - ?DD Error
 2999/197A : 97F0                       	POP	R0,@R15		; Locate - Get number of dim'ns
 3000/197C : 8C89                       	LDCTLB	FLAGS,RL0
 3001/197E : A031                       	LDB	RH1,RH3		; BC Points to array dim'ns
 3002/1980 : A0B9                       	LDB	RL1,RL3
 3003/1982 : 5E06 2488                  	JP	Z,POPHRT	; Jump if array load/save
 3004/1986 : 0230                       	SUBB	RH0,@R3		; Same number of dimensions?
 3005/1988 : 5E06 1A54                  	JP	Z,FINDEL	; Yes - Find element
 3006/198C :                            BSERR:
 3007/198C : CA10                       	LDB	RL2,#BS		; ?BS Error
 3008/198E : 5E08 04EA                  	JP	ERROR		; Output error
 3009/1992 :                            ;
 3010/1992 :                            CREARY:
 3011/1992 : 2102 0004                  	LD	R2,#4		; 4 Bytes per entry
 3012/1996 : 97F0                       	POP	R0,@R15		; Array to save or 0 dim'ns?
 3013/1998 : 8C89                       	LDCTLB	FLAGS,RL0
 3014/199A : 5E06 0DEA                  	JP	Z,FCERR		; Yes - ?FC Error
 3015/199E : 2E39                       	LDB	@R3,RL1		; Save second byte of name
 3016/19A0 : 8CC1                       	LDCTLB	RL4,FLAGS
 3017/19A2 : A930                       	INC	R3
 3018/19A4 : 2E31                       	LDB	@R3,RH1		; Save first byte of name
 3019/19A6 : A930                       	INC	R3
 3020/19A8 : 8CC9                       	LDCTLB	FLAGS,RL4
 3021/19AA : A009                       	LDB	RL1,RH0		; Number of dimensions to C
 3022/19AC : 5F00 049C                  	CALL	CHKSTK		; Check if enough memory
 3023/19B0 : 8CC1                       	LDCTLB	RL4,FLAGS
 3024/19B2 : A930                       	INC	R3		; Point to number of dimensions
 3025/19B4 : A930                       	INC	R3
 3026/19B6 : 8CC9                       	LDCTLB	FLAGS,RL4
 3027/19B8 : 6F03 8124                  	LD	(CUROPR),R3	; Save address of pointer
 3028/19BC : 2E39                       	LDB	@R3,RL1		; Set number of dimensions
 3029/19BE : 8CC1                       	LDCTLB	RL4,FLAGS
 3030/19C0 : A930                       	INC	R3
 3031/19C2 : 8CC9                       	LDCTLB	FLAGS,RL4
 3032/19C4 : 6000 810B                  	LDB	RH0,(LCRFLG)	; Locate of Create?
 3033/19C8 : B208                       	RLCB	RH0,#1		; Carry set = Create
 3034/19CA : A090                       	LDB	RH0,RL1		; Get number of dimensions
 3035/19CC :                            CRARLP:
 3036/19CC : 2101 000B                  	LD	R1,#10+1	; Default dimension size 10
 3037/19D0 : 5E0F 19DC                  	JP	NC,DEFSIZ	; Locate - Set default size
 3038/19D4 : 97F1                       	POP	R1,@R15		; Get specified dimension size
 3039/19D6 : 8CC1                       	LDCTLB	RL4,FLAGS
 3040/19D8 : A910                       	INC	R1		; Include zero element
 3041/19DA : 8CC9                       	LDCTLB	FLAGS,RL4
 3042/19DC :                            DEFSIZ:
 3043/19DC : 2E39                       	LDB	@R3,RL1		; Save LSB of dimension size
 3044/19DE : 8CC1                       	LDCTLB	RL4,FLAGS
 3045/19E0 : A930                       	INC	R3
 3046/19E2 : 2E31                       	LDB	@R3,RH1		; Save MSB of dimension size
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 52 - 2023/10/12 18時22分27秒


 3047/19E4 : A930                       	INC	R3
 3048/19E6 : 8CC9                       	LDCTLB	FLAGS,RL4
 3049/19E8 : 8C81                       	LDCTLB	RL0,FLAGS
 3050/19EA : 93F0                       	PUSH	@R15,R0		; Save num' of dim'ns an status
 3051/19EC : 93F3                       	PUSH	@R15,R3		; Save address of dim'n size
 3052/19EE : 5F00 27D2                  	CALL	MLDEBC		; Multiply DE by BC to find
 3053/19F2 : AD23                       	EX	R3,R2		; amount of mem needed (to DE)
 3054/19F4 : 97F3                       	POP	R3,@R15		; Restore address of dimension
 3055/19F6 : 97F0                       	POP	R0,@R15		; Restore number of dimensions
 3056/19F8 : 8C89                       	LDCTLB	FLAGS,RL0
 3057/19FA : AA00                       	DECB	RH0,#1		; Count them
 3058/19FC : 5E0E 19CC                  	JP	NZ,CRARLP	; Do next dimension if more
 3059/1A00 : 8C81                       	LDCTLB	RL0,FLAGS
 3060/1A02 : 93F0                       	PUSH	@R15,R0		; Save locate/create flag
 3061/1A04 : A021                       	LDB	RH1,RH2		; MSB of memory needed
 3062/1A06 : A0A9                       	LDB	RL1,RL2		; LSB of memory needed
 3063/1A08 : AD23                       	EX	R3,R2
 3064/1A0A : 8123                       	ADD	R3,R2		; Add bytes to array start
 3065/1A0C : 5E07 04C2                  	JP	C,OMERR		; Too big - Error
 3066/1A10 : 5F00 04AA                  	CALL	ENFMEM		; See if enough memory
 3067/1A14 : 6F03 813A                  	LD	(ARREND),R3	; Save new end of array
 3068/1A18 :                            ;
 3069/1A18 :                            ZERARY:
 3070/1A18 : 8CC1                       	LDCTLB	RL4,FLAGS
 3071/1A1A : AB30                       	DEC	R3,#1		; Back through array data
 3072/1A1C : 8CC9                       	LDCTLB	FLAGS,RL4
 3073/1A1E : 0C35 0000                  	LDB	@R3,#0		; Set array element to zero
 3074/1A22 : 5F00 09CE                  	CALL	CPDEHL		; All elements zeroed?
 3075/1A26 : 5E0E 1A18                  	JP	NZ,ZERARY	; No - Keep on going
 3076/1A2A : 8CC1                       	LDCTLB	RL4,FLAGS
 3077/1A2C : A910                       	INC	R1		; Number of bytes + 1
 3078/1A2E : 8CC9                       	LDCTLB	FLAGS,RL4
 3079/1A30 : A002                       	LDB	RH2,RH0		; A=0
 3080/1A32 : 6103 8124                  	LD	R3,(CUROPR)	; Get address of array
 3081/1A36 : 203A                       	LDB	RL2,@R3		; Number of dimensions
 3082/1A38 : AD23                       	EX	R3,R2		; To HL
 3083/1A3A : 8133                       	ADD	R3,R3		; Two bytes per dimension size
 3084/1A3C : 8113                       	ADD	R3,R1		; Add number of bytes
 3085/1A3E : AD23                       	EX	R3,R2		; Bytes needed to DE
 3086/1A40 : AB30                       	DEC	R3,#1
 3087/1A42 : AB30                       	DEC	R3,#1
 3088/1A44 : 2E3A                       	LDB	@R3,RL2		; Save LSB of bytes needed
 3089/1A46 : A930                       	INC	R3
 3090/1A48 : 2E32                       	LDB	@R3,RH2		; Save MSB of bytes needed
 3091/1A4A : A930                       	INC	R3
 3092/1A4C : 97F0                       	POP	R0,@R15		; Locate / Create?
 3093/1A4E : 8C89                       	LDCTLB	FLAGS,RL0
 3094/1A50 : 5E07 1AA0                  	JP	C,ENDDIM	; A is 0 , End if create
 3095/1A54 :                            FINDEL:
 3096/1A54 : A001                       	LDB	RH1,RH0		; Find array element
 3097/1A56 : A009                       	LDB	RL1,RH0
 3098/1A58 : 2030                       	LDB	RH0,@R3		; Number of dimensions
 3099/1A5A : 8CC1                       	LDCTLB	RL4,FLAGS
 3100/1A5C : A930                       	INC	R3
 3101/1A5E : 8CC9                       	LDCTLB	FLAGS,RL4
 3102/1A60 : E801                       	JR	FNDELP1		; Skip "POP HL"
 3103/1A62 :                            FNDELP:
 3104/1A62 : 97F3                       	POP	R3,@R15		; Address of next dim' size
 3105/1A64 :                            FNDELP1:
 3106/1A64 : 203A                       	LDB	RL2,@R3		; Get LSB of dim'n size
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 53 - 2023/10/12 18時22分27秒


 3107/1A66 : 8CC1                       	LDCTLB	RL4,FLAGS
 3108/1A68 : A930                       	INC	R3
 3109/1A6A : 2032                       	LDB	RH2,@R3		; Get MSB of dim'n size
 3110/1A6C : A930                       	INC	R3
 3111/1A6E : 8CC9                       	LDCTLB	FLAGS,RL4
 3112/1A70 : 2DF3                       	EX	@R15,R3		; Save address - Get index
 3113/1A72 : 8C81                       	LDCTLB	RL0,FLAGS
 3114/1A74 : 93F0                       	PUSH	@R15,R0		; Save number of dim'ns
 3115/1A76 : 5F00 09CE                  	CALL	CPDEHL		; Dimension too large?
 3116/1A7A : 5E0F 198C                  	JP	NC,BSERR	; Yes - ?BS Error
 3117/1A7E : 93F3                       	PUSH	@R15,R3		; Save index
 3118/1A80 : 5F00 27D2                  	CALL	MLDEBC		; Multiply previous by size
 3119/1A84 : 97F2                       	POP	R2,@R15		; Index supplied to DE
 3120/1A86 : 8123                       	ADD	R3,R2		; Add index to pointer
 3121/1A88 : 97F0                       	POP	R0,@R15		; Number of dimensions
 3122/1A8A : 8C89                       	LDCTLB	FLAGS,RL0
 3123/1A8C : AA00                       	DECB	RH0,#1		; Count them
 3124/1A8E : A031                       	LDB	RH1,RH3		; MSB of pointer
 3125/1A90 : A0B9                       	LDB	RL1,RL3		; LSB of pointer
 3126/1A92 : 5E0E 1A62                  	JP	NZ,FNDELP	; More - Keep going
 3127/1A96 : 8133                       	ADD	R3,R3		; 4 Bytes per element
 3128/1A98 : 8133                       	ADD	R3,R3
 3129/1A9A : 97F1                       	POP	R1,@R15		; Start of array
 3130/1A9C : 8113                       	ADD	R3,R1		; Point to element
 3131/1A9E : AD23                       	EX	R3,R2		; Address of element to DE
 3132/1AA0 :                            ENDDIM:
 3133/1AA0 : 6103 8130                  	LD	R3,(NXTOPR)	; Got code string address
 3134/1AA4 : 9E08                       	RET
 3135/1AA6 :                            ;
 3136/1AA6 :                            FRE:
 3137/1AA6 : 6103 813A                  	LD	R3,(ARREND)	; Start of free memory
 3138/1AAA : AD23                       	EX	R3,R2		; To DE
 3139/1AAC : 2103 0000                  	LD	R3,#0		; End of free memory
 3140/1AB0 : 81F3                       	ADD	R3,R15		; Current stack value
 3141/1AB2 : 6000 810C                  	LDB	RH0,(TYPE)	; Dummy argument type
 3142/1AB6 : 8400                       	ORB	RH0,RH0
 3143/1AB8 : 8D83                       	RESFLG	C
 3144/1ABA : 5E06 1AD0                  	JP	Z,FRENUM	; Numeric - Free variable space
 3145/1ABE : 5F00 1F38                  	CALL	GSTRCU		; Current string to pool
 3146/1AC2 : 5F00 1D60                  	CALL	GARBGE		; Garbage collection
 3147/1AC6 : 6103 80BA                  	LD	R3,(STRSPC)	; Bottom of string space in use
 3148/1ACA : AD23                       	EX	R3,R2		; To DE
 3149/1ACC : 6103 8122                  	LD	R3,(STRBOT)	; Bottom of string space
 3150/1AD0 :                            FRENUM:
 3151/1AD0 : A0B0                       	LDB	RH0,RL3		; Get LSB of end
 3152/1AD2 : 82A0                       	SUBB	RH0,RL2		; Subtract LSB of beginning
 3153/1AD4 : A009                       	LDB	RL1,RH0		; Save difference if C
 3154/1AD6 : A030                       	LDB	RH0,RH3		; Get MSB of end
 3155/1AD8 : B620                       	SBCB	RH0,RH2		; Subtract MSB of beginning
 3156/1ADA :                            ACPASS:
 3157/1ADA : A091                       	LDB	RH1,RL1		; Return integer AC
 3158/1ADC :                            ABPASS:
 3159/1ADC : A012                       	LDB	RH2,RH1		; Return integer AB
 3160/1ADE : CA00                       	LDB	RL2,#0		; Point to type
 3161/1AE0 : 2103 810C                  	LD	R3,#TYPE
 3162/1AE4 : 2E3A                       	LDB	@R3,RL2		; Set type to numeric
 3163/1AE6 : C190                       	LDB	RH1,#80H+16	; 16 bit integer
 3164/1AE8 : 5E08 2616                  	JP	RETINT		; Return the integr
 3165/1AEC :                            ;
 3166/1AEC :                            POS:
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 54 - 2023/10/12 18時22分27秒


 3167/1AEC : 6000 810A                  	LDB	RH0,(CURPOS)	; Get cursor position
 3168/1AF0 :                            PASSA:
 3169/1AF0 : A001                       	LDB	RH1,RH0		; Put A into AB
 3170/1AF2 : 8800                       	XORB	RH0,RH0
 3171/1AF4 : 8D83                       	RESFLG	C		; Zero A
 3172/1AF6 : 5E08 1ADC                  	JP	ABPASS		; Return integer AB
 3173/1AFA :                            ;
 3174/1AFA :                            DEF:
 3175/1AFA : 5F00 1BE4                  	CALL	CHEKFN		; Get "FN" and name
 3176/1AFE : 5F00 1BC8                  	CALL	IDTEST		; Test for illegal direct
 3177/1B02 : 2101 0F48                  	LD	R1,#DATA	; To get next statement
 3178/1B06 : 93F1                       	PUSH	@R15,R1		; Save address for RETurn
 3179/1B08 : 93F2                       	PUSH	@R15,R2		; Save address of function ptr
 3180/1B0A : C428                       	LD	RH4,#"("
 3181/1B0C : 5F00 09DA                  	CALL	CHKSYN		; Make sure "(" follows
 3182/1B10 : 5F00 17A8                  	CALL	GETVAR		; Get argument variable name
 3183/1B14 : 93F3                       	PUSH	@R15,R3		; Save code string address
 3184/1B16 : AD23                       	EX	R3,R2		; Argument address to HL
 3185/1B18 : 8CC1                       	LDCTLB	RL4,FLAGS
 3186/1B1A : AB30                       	DEC	R3,#1
 3187/1B1C : 2032                       	LDB	RH2,@R3		; Get first byte of arg name
 3188/1B1E : AB30                       	DEC	R3,#1
 3189/1B20 : 8CC9                       	LDCTLB	FLAGS,RL4
 3190/1B22 : 203A                       	LDB	RL2,@R3		; Get second byte of arg name
 3191/1B24 : 97F3                       	POP	R3,@R15		; Restore code string address
 3192/1B26 : 5F00 141C                  	CALL	TSTNUM		; Make sure numeric argument
 3193/1B2A : C429                       	LD	RH4,#")"
 3194/1B2C : 5F00 09DA                  	CALL	CHKSYN		; Make sure ")" follows
 3195/1B30 : C4B4                       	LD	RH4,#ZEQUAL	; "=" token
 3196/1B32 : 5F00 09DA                  	CALL	CHKSYN		; Make sure "=" follows
 3197/1B36 : A031                       	LDB	RH1,RH3		; Code string address to BC
 3198/1B38 : A0B9                       	LDB	RL1,RL3
 3199/1B3A : 2DF3                       	EX	@R15,R3		; Save code str , Get FN ptr
 3200/1B3C : 2E39                       	LDB	@R3,RL1		; Save LSB of FN code string
 3201/1B3E : 8CC1                       	LDCTLB	RL4,FLAGS
 3202/1B40 : A930                       	INC	R3
 3203/1B42 : 8CC9                       	LDCTLB	FLAGS,RL4
 3204/1B44 : 2E31                       	LDB	@R3,RH1		; Save MSB of FN code string
 3205/1B46 : 5E08 1C52                  	JP	SVSTAD		; Save address and do function
 3206/1B4A :                            ;
 3207/1B4A :                            DOFN:
 3208/1B4A : 5F00 1BE4                  	CALL	CHEKFN		; Make sure FN follows
 3209/1B4E : 93F2                       	PUSH	@R15,R2		; Save function pointer address
 3210/1B50 : 5F00 1582                  	CALL	EVLPAR		; Evaluate expression in "()"
 3211/1B54 : 5F00 141C                  	CALL	TSTNUM		; Make sure numeric result
 3212/1B58 : 2DF3                       	EX	@R15,R3		; Save code str , Get FN ptr
 3213/1B5A : 203A                       	LDB	RL2,@R3		; Get LSB of FN code string
 3214/1B5C : 8CC1                       	LDCTLB	RL4,FLAGS
 3215/1B5E : A930                       	INC	R3
 3216/1B60 : 2032                       	LDB	RH2,@R3		; Get MSB of FN code string
 3217/1B62 : A930                       	INC	R3
 3218/1B64 : 8CC9                       	LDCTLB	FLAGS,RL4
 3219/1B66 : A020                       	LDB	RH0,RH2		; And function DEFined?
 3220/1B68 : 84A0                       	ORB	RH0,RL2
 3221/1B6A : 8D83                       	RESFLG	C
 3222/1B6C : 5E06 04E0                  	JP	Z,UFERR		; No - ?UF Error
 3223/1B70 : 2030                       	LDB	RH0,@R3		; Get LSB of argument address
 3224/1B72 : 8CC1                       	LDCTLB	RL4,FLAGS
 3225/1B74 : A930                       	INC	R3
 3226/1B76 : 8CC9                       	LDCTLB	FLAGS,RL4
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 55 - 2023/10/12 18時22分27秒


 3227/1B78 : 2033                       	LDB	RH3,@R3		; Get MSB of argument address
 3228/1B7A : A00B                       	LDB	RL3,RH0		; HL = Arg variable address
 3229/1B7C : 93F3                       	PUSH	@R15,R3		; Save it
 3230/1B7E : 6103 813E                  	LD	R3,(FNRGNM)	; Get old argument name
 3231/1B82 : 2DF3                       	EX	@R15,R3;	; Save old , Get new
 3232/1B84 : 6F03 813E                  	LD	(FNRGNM),R3	; Set new argument name
 3233/1B88 : 6103 8142                  	LD	R3,(FNARG+2)	; Get LSB,NLSB of old arg value
 3234/1B8C : 93F3                       	PUSH	@R15,R3		; Save it
 3235/1B8E : 6103 8140                  	LD	R3,(FNARG)	; Get MSB,EXP of old arg value
 3236/1B92 : 93F3                       	PUSH	@R15,R3		; Save it
 3237/1B94 : 2103 8140                  	LD	R3,#FNARG	; HL = Value of argument
 3238/1B98 : 93F2                       	PUSH	@R15,R2		; Save FN code string address
 3239/1B9A : 5F00 269C                  	CALL	FPTHL		; Move FPREG to argument
 3240/1B9E : 97F3                       	POP	R3,@R15		; Get FN code string address
 3241/1BA0 : 5F00 1418                  	CALL	GETNUM		; Get value from function
 3242/1BA4 : 8CC1                       	LDCTLB	RL4,FLAGS
 3243/1BA6 : AB30                       	DEC	R3,#1		; DEC 'cos GETCHR INCs
 3244/1BA8 : 8CC9                       	LDCTLB	FLAGS,RL4
 3245/1BAA : 5F00 0C96                  	CALL	GETCHR		; Get next character
 3246/1BAE : 5E0E 04D0                  	JP	NZ,SNERR	; Bad character in FN - Error
 3247/1BB2 : 97F3                       	POP	R3,@R15		; Get MSB,EXP of old arg
 3248/1BB4 : 6F03 8140                  	LD	(FNARG),R3	; Restore it
 3249/1BB8 : 97F3                       	POP	R3,@R15		; Get LSB,NLSB of old arg
 3250/1BBA : 6F03 8142                  	LD	(FNARG+2),R3	; Restore it
 3251/1BBE : 97F3                       	POP	R3,@R15		; Get name of old arg
 3252/1BC0 : 6F03 813E                  	LD	(FNRGNM),R3	; Restore it
 3253/1BC4 : 97F3                       	POP	R3,@R15		; Restore code string address
 3254/1BC6 : 9E08                       	RET
 3255/1BC8 :                            ;
 3256/1BC8 :                            IDTEST:
 3257/1BC8 : 93F3                       	PUSH	@R15,R3		; Save code string address
 3258/1BCA : 6103 80BC                  	LD	R3,(LINEAT)	; Get current line number
 3259/1BCE : 8CC1                       	LDCTLB	RL4,FLAGS
 3260/1BD0 : A930                       	INC	R3		; -1 means direct statement
 3261/1BD2 : 8CC9                       	LDCTLB	FLAGS,RL4
 3262/1BD4 : A030                       	LDB	RH0,RH3
 3263/1BD6 : 84B0                       	ORB	RH0,RL3
 3264/1BD8 : 8D83                       	RESFLG	C
 3265/1BDA : 97F3                       	POP	R3,@R15		; Restore code string address
 3266/1BDC : 9E0E                       	RET	NZ		; Return if in program
 3267/1BDE : CA16                       	LDB	RL2,#ID		; ?ID Error
 3268/1BE0 : 5E08 04EA                  	JP	ERROR
 3269/1BE4 :                            ;
 3270/1BE4 :                            CHEKFN:
 3271/1BE4 : C4A7                       	LD	RH4,#ZFN	; "FN" token
 3272/1BE6 : 5F00 09DA                  	CALL	CHKSYN		; Make sure FN follows
 3273/1BEA : C080                       	LDB	RH0,#80H
 3274/1BEC : 6E00 812A                  	LDB	(FORFLG),RH0	; Flag FN name to find
 3275/1BF0 : 0430                       	ORB	RH0,@R3
 3276/1BF2 : 8D83                       	RESFLG	C		; FN name has bit 7 set
 3277/1BF4 : A001                       	LDB	RH1,RH0		; in first byte of name
 3278/1BF6 : 5F00 17B2                  	CALL	GTFNAM		; Get FN name
 3279/1BFA : 5E08 141C                  	JP	TSTNUM		; Make sure numeric function
 3280/1BFE :                            ;
 3281/1BFE :                            STR:
 3282/1BFE : 5F00 141C                  	CALL	TSTNUM		; Make sure it's a number
 3283/1C02 : 5F00 291A                  	CALL	NUMASC		; Turn number into text
 3284/1C06 :                            STR1:
 3285/1C06 : 5F00 1C62                  	CALL	CRTST		; Create string entry for it
 3286/1C0A : 5F00 1F38                  	CALL	GSTRCU		; Current string to pool
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 56 - 2023/10/12 18時22分27秒


 3287/1C0E : 2101 1FE0                  	LD	R1,#TOPOOL	; Save in string pool
 3288/1C12 : 93F1                       	PUSH	@R15,R1		; Save address on stack
 3289/1C14 :                            ;
 3290/1C14 :                            SAVSTR:
 3291/1C14 : 2030                       	LDB	RH0,@R3		; Get string length
 3292/1C16 : 8CC1                       	LDCTLB	RL4,FLAGS
 3293/1C18 : A930                       	INC	R3
 3294/1C1A : A930                       	INC	R3
 3295/1C1C : 8CC9                       	LDCTLB	FLAGS,RL4
 3296/1C1E : 93F3                       	PUSH	@R15,R3		; Save pointer to string
 3297/1C20 : 5F00 1D06                  	CALL	TESTR		; See if enough string space
 3298/1C24 : 97F3                       	POP	R3,@R15		; Restore pointer to string
 3299/1C26 : 2039                       	LDB	RL1,@R3		; Get LSB of address
 3300/1C28 : 8CC1                       	LDCTLB	RL4,FLAGS
 3301/1C2A : A930                       	INC	R3
 3302/1C2C : 8CC9                       	LDCTLB	FLAGS,RL4
 3303/1C2E : 2031                       	LDB	RH1,@R3		; Get MSB of address
 3304/1C30 : 5F00 1C44                  	CALL	CRTMST		; Create string entry
 3305/1C34 : 93F3                       	PUSH	@R15,R3		; Save pointer to MSB of addr
 3306/1C36 : A00B                       	LDB	RL3,RH0		; Length of string
 3307/1C38 : 5F00 1F1E                  	CALL	TOSTRA		; Move to string area
 3308/1C3C : 97F2                       	POP	R2,@R15		; Restore pointer to MSB
 3309/1C3E : 9E08                       	RET
 3310/1C40 :                            ;
 3311/1C40 :                            MKTMST:
 3312/1C40 : 5F00 1D06                  	CALL	TESTR		; See if enough string space
 3313/1C44 :                            CRTMST:
 3314/1C44 : 2103 811E                  	LD	R3,#TMPSTR	; Temporary string
 3315/1C48 : 93F3                       	PUSH	@R15,R3		; Save it
 3316/1C4A : 2E30                       	LDB	@R3,RH0		; Save length of string
 3317/1C4C : 8CC1                       	LDCTLB	RL4,FLAGS
 3318/1C4E : A930                       	INC	R3
 3319/1C50 : 8CC9                       	LDCTLB	FLAGS,RL4
 3320/1C52 :                            SVSTAD:
 3321/1C52 : 8CC1                       	LDCTLB	RL4,FLAGS
 3322/1C54 : A930                       	INC	R3
 3323/1C56 : 8CC9                       	LDCTLB	FLAGS,RL4
 3324/1C58 : 2E3A                       	LDB	@R3,RL2		; Save LSB of address
 3325/1C5A : A930                       	INC	R3
 3326/1C5C : 2E32                       	LDB	@R3,RH2		; Save MSB of address
 3327/1C5E : 97F3                       	POP	R3,@R15		; Restore pointer
 3328/1C60 : 9E08                       	RET
 3329/1C62 :                            ;
 3330/1C62 :                            CRTST:
 3331/1C62 : 8CC1                       	LDCTLB	RL4,FLAGS
 3332/1C64 : AB30                       	DEC	R3,#1		; DEC - INCed after
 3333/1C66 : 8CC9                       	LDCTLB	FLAGS,RL4
 3334/1C68 :                            QTSTR:
 3335/1C68 : C122                       	LDB	RH1,#'"'	; Terminating quote
 3336/1C6A : A012                       	LDB	RH2,RH1		; Quote to D
 3337/1C6C :                            DTSTR:
 3338/1C6C : 93F3                       	PUSH	@R15,R3		; Save start
 3339/1C6E : C9FF                       	LDB	RL1,#-1		; Set counter to -1
 3340/1C70 :                            QTSTLP:
 3341/1C70 : 8CC1                       	LDCTLB	RL4,FLAGS
 3342/1C72 : A930                       	INC	R3		; Move on
 3343/1C74 : 8CC9                       	LDCTLB	FLAGS,RL4
 3344/1C76 : 2030                       	LDB	RH0,@R3		; Get byte
 3345/1C78 : A890                       	INCB	RL1,#1		; Count bytes
 3346/1C7A : 8400                       	ORB	RH0,RH0
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 57 - 2023/10/12 18時22分27秒


 3347/1C7C :                            ;	RESFLG	C		; End of line?
 3348/1C7C : 5E06 1C8C                  	JP	Z,CRTSTE	; Yes - Create string entry
 3349/1C80 : 8A20                       	CPB	RH0,RH2		; Terminator D found?
 3350/1C82 : 5E06 1C8C                  	JP	Z,CRTSTE	; Yes - Create string entry
 3351/1C86 : 8A10                       	CPB	RH0,RH1		; Terminator B found?
 3352/1C88 : 5E0E 1C70                  	JP	NZ,QTSTLP	; No - Keep looking
 3353/1C8C :                            CRTSTE:
 3354/1C8C : 0A00 2222                  	CPB	RH0,#'"'	; End with '"'?
 3355/1C90 : EE02                       	JR	NZ,CRTSTE1
 3356/1C92 : 5F00 0C96                  	CALL	GETCHR		; Yes - Get next character
 3357/1C96 :                            CRTSTE1:
 3358/1C96 : 2DF3                       	EX	@R15,R3		; Starting quote
 3359/1C98 : 8CC1                       	LDCTLB	RL4,FLAGS
 3360/1C9A : A930                       	INC	R3		; First byte of string
 3361/1C9C : 8CC9                       	LDCTLB	FLAGS,RL4
 3362/1C9E : AD23                       	EX	R3,R2		; To DE
 3363/1CA0 : A090                       	LDB	RH0,RL1		; Get length
 3364/1CA2 : 5F00 1C44                  	CALL	CRTMST		; Create string entry
 3365/1CA6 :                            TSTOPL:
 3366/1CA6 : 2102 811E                  	LD	R2,#TMPSTR	; Temporary string
 3367/1CAA : 6103 8110                  	LD	R3,(TMSTPT)	; Temporary string pool pointer
 3368/1CAE : ACB3                       	EXB	RH3,RL3
 3369/1CB0 : 6F03 8144                  	LD	(FPREG),R3	; Save address of string ptr
 3370/1CB4 : ACB3                       	EXB	RH3,RL3
 3371/1CB6 : C001                       	LDB	RH0,#1
 3372/1CB8 : 6E00 810C                  	LDB	(TYPE),RH0	; Set type to string
 3373/1CBC : 5F00 26A0                  	CALL	DETHL4		; Move string to pool
 3374/1CC0 : 5F00 09CE                  	CALL	CPDEHL		; Out of string pool?
 3375/1CC4 : 6F03 8110                  	LD	(TMSTPT),R3	; Save new pointer
 3376/1CC8 : 97F3                       	POP	R3,@R15		; Restore code string address
 3377/1CCA : 2030                       	LDB	RH0,@R3		; Get next code byte
 3378/1CCC : 9E0E                       	RET	NZ		; Return if pool OK
 3379/1CCE : CA1E                       	LDB	RL2,#ST		; ?ST Error
 3380/1CD0 : 5E08 04EA                  	JP	ERROR		; String pool overflow
 3381/1CD4 :                            ;
 3382/1CD4 :                            PRNUMS:
 3383/1CD4 : 8CC1                       	LDCTLB	RL4,FLAGS
 3384/1CD6 : A930                       	INC	R3		; Skip leading space
 3385/1CD8 : 8CC9                       	LDCTLB	FLAGS,RL4
 3386/1CDA :                            PRS:
 3387/1CDA : 5F00 1C62                  	CALL	CRTST		; Create string entry for it
 3388/1CDE :                            PRS1:
 3389/1CDE : 5F00 1F38                  	CALL	GSTRCU		; Current string to pool
 3390/1CE2 : 5F00 2682                  	CALL	LOADFP		; Move string block to BCDE
 3391/1CE6 : A8A0                       	INCB	RL2,#1		; Length + 1
 3392/1CE8 :                            PRSLP:
 3393/1CE8 : AAA0                       	DECB	RL2,#1		; Count characters
 3394/1CEA : 9E06                       	RET	Z		; End of string
 3395/1CEC : 2010                       	LDB	RH0,@R1		; Get byte to output
 3396/1CEE : 5F00 09E6                  	CALL	OUTC		; Output character in A
 3397/1CF2 : 0A00 0D0D                  	CPB	RH0,#CR		; Return?
 3398/1CF6 : EE02                       	JR	NZ,PRSLP1
 3399/1CF8 : 5F00 1120                  	CALL	DONULL		; Yes - Do nulls
 3400/1CFC :                            PRSLP1:
 3401/1CFC : 8CC1                       	LDCTLB	RL4,FLAGS
 3402/1CFE : A910                       	INC	R1		; Next byte in string
 3403/1D00 : 8CC9                       	LDCTLB	FLAGS,RL4
 3404/1D02 : 5E08 1CE8                  	JP	PRSLP		; More characters to output
 3405/1D06 :                            ;
 3406/1D06 :                            TESTR:
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 58 - 2023/10/12 18時22分27秒


 3407/1D06 : 8400                       	ORB	RH0,RH0
 3408/1D08 : 8D83                       	RESFLG	C		; Test if enough room
 3409/1D0A : E802                       	JR	GRBDON1		; No garbage collection done
 3410/1D0C :                            GRBDON:
 3411/1D0C : 97F0                       	POP	R0,@R15		; Garbage collection done
 3412/1D0E : 8C89                       	LDCTLB	FLAGS,RL0
 3413/1D10 :                            GRBDON1:
 3414/1D10 : 8C81                       	LDCTLB	RL0,FLAGS
 3415/1D12 : 93F0                       	PUSH	@R15,R0		; Save status
 3416/1D14 : 6103 80BA                  	LD	R3,(STRSPC)	; Bottom of string space in use
 3417/1D18 : AD23                       	EX	R3,R2		; To DE
 3418/1D1A : 6103 8122                  	LD	R3,(STRBOT)	; Bottom of string area
 3419/1D1E : 8CC1                       	LDCTLB	RL4,FLAGS
 3420/1D20 : 8C00                       	COMB	RH0		; Negate length (Top down)
 3421/1D22 : 8CC9                       	LDCTLB	FLAGS,RL4
 3422/1D24 : A009                       	LDB	RL1,RH0		; -Length to BC
 3423/1D26 : C1FF                       	LDB	RH1,#-1		; BC = -ve length of string
 3424/1D28 : 8113                       	ADD	R3,R1		; Add to bottom of space in use
 3425/1D2A : 8CC1                       	LDCTLB	RL4,FLAGS
 3426/1D2C : A930                       	INC	R3		; Plus one for 2's complement
 3427/1D2E : 8CC9                       	LDCTLB	FLAGS,RL4
 3428/1D30 : 5F00 09CE                  	CALL	CPDEHL		; Below string RAM area?
 3429/1D34 : 5E07 1D4A                  	JP	C,TESTOS	; Tidy up if not done else err
 3430/1D38 : 6F03 8122                  	LD	(STRBOT),R3	; Save new bottom of area
 3431/1D3C : 8CC1                       	LDCTLB	RL4,FLAGS
 3432/1D3E : A930                       	INC	R3		; Point to first byte of string
 3433/1D40 : 8CC9                       	LDCTLB	FLAGS,RL4
 3434/1D42 : AD23                       	EX	R3,R2		; Address to DE
 3435/1D44 :                            POPAF:
 3436/1D44 : 97F0                       	POP	R0,@R15		; Throw away status push
 3437/1D46 : 8C89                       	LDCTLB	FLAGS,RL0
 3438/1D48 : 9E08                       	RET
 3439/1D4A :                            ;
 3440/1D4A :                            TESTOS:
 3441/1D4A : 97F0                       	POP	R0,@R15		; Garbage collect been done?
 3442/1D4C : 8C89                       	LDCTLB	FLAGS,RL0
 3443/1D4E : CA1A                       	LDB	RL2,#OS		; ?OS Error
 3444/1D50 : 5E06 04EA                  	JP	Z,ERROR		; Yes - Not enough string apace
 3445/1D54 : 8A00                       	CPB	RH0,RH0		; Flag garbage collect done
 3446/1D56 : 8C81                       	LDCTLB	RL0,FLAGS
 3447/1D58 : 93F0                       	PUSH	@R15,R0		; Save status
 3448/1D5A : 2101 1D0C                  	LD	R1,#GRBDON	; Garbage collection done
 3449/1D5E : 93F1                       	PUSH	@R15,R1		; Save for RETurn
 3450/1D60 :                            GARBGE:
 3451/1D60 : 6103 810E                  	LD	R3,(LSTRAM)	; Get end of RAM pointer
 3452/1D64 :                            GARBLP:
 3453/1D64 : 6F03 8122                  	LD	(STRBOT),R3	; Reset string pointer
 3454/1D68 : 2103 0000                  	LD	R3,#0
 3455/1D6C : 93F3                       	PUSH	@R15,R3		; Flag no string found
 3456/1D6E : 6103 80BA                  	LD	R3,(STRSPC)	; Get bottom of string space
 3457/1D72 : 93F3                       	PUSH	@R15,R3		; Save bottom of string space
 3458/1D74 : 2103 8112                  	LD	R3,#TMSTPL	; Temporary string pool
 3459/1D78 :                            GRBLP:
 3460/1D78 : AD23                       	EX	R3,R2
 3461/1D7A : 6103 8110                  	LD	R3,(TMSTPT)	; Temporary string pool pointer
 3462/1D7E : AD23                       	EX	R3,R2
 3463/1D80 : 5F00 09CE                  	CALL	CPDEHL		; Temporary string pool done?
 3464/1D84 : 2101 1D78                  	LD	R1,#GRBLP	; Loop until string pool done
 3465/1D88 : 5E0E 1E02                  	JP	NZ,STPOOL	; No - See if in string area
 3466/1D8C : 6103 8136                  	LD	R3,(PROGND)	; Start of simple variables
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 59 - 2023/10/12 18時22分27秒


 3467/1D90 :                            SMPVAR:
 3468/1D90 : AD23                       	EX	R3,R2
 3469/1D92 : 6103 8138                  	LD	R3,(VAREND)	; End of simple variables
 3470/1D96 : AD23                       	EX	R3,R2
 3471/1D98 : 5F00 09CE                  	CALL	CPDEHL		; All simple strings done?
 3472/1D9C : 5E06 1DB8                  	JP	Z,ARRLP		; Yes - Do string arrays
 3473/1DA0 : 2030                       	LDB	RH0,@R3		; Get type of variable
 3474/1DA2 : 8CC1                       	LDCTLB	RL4,FLAGS
 3475/1DA4 : A930                       	INC	R3
 3476/1DA6 : A930                       	INC	R3
 3477/1DA8 : 8CC9                       	LDCTLB	FLAGS,RL4
 3478/1DAA : 8400                       	ORB	RH0,RH0
 3479/1DAC : 8D83                       	RESFLG	C		; "S" flag set if string
 3480/1DAE : 5F00 1E0A                  	CALL	STRADD		; See if string in string area
 3481/1DB2 : 5E08 1D90                  	JP	SMPVAR		; Loop until simple ones done
 3482/1DB6 :                            ;
 3483/1DB6 :                            GNXARY:
 3484/1DB6 : 97F1                       	POP	R1,@R15		; Scrap address of this array
 3485/1DB8 :                            ARRLP:
 3486/1DB8 : AD23                       	EX	R3,R2
 3487/1DBA : 6103 813A                  	LD	R3,(ARREND)	; End of string arrays
 3488/1DBE : AD23                       	EX	R3,R2
 3489/1DC0 : 5F00 09CE                  	CALL	CPDEHL		; All string arrays done?
 3490/1DC4 : 5E06 1E5A                  	JP	Z,SCNEND	; Yes - Move string if found
 3491/1DC8 : 5F00 2682                  	CALL	LOADFP		; Get array name to BCDE
 3492/1DCC : A0A0                       	LDB	RH0,RL2		; Get type of array
 3493/1DCE : 93F3                       	PUSH	@R15,R3		; Save address of num of dim'ns
 3494/1DD0 : 8113                       	ADD	R3,R1		; Start of next array
 3495/1DD2 : 8400                       	ORB	RH0,RH0
 3496/1DD4 : 8D83                       	RESFLG	C		; Test type of array
 3497/1DD6 : 5E0D 1DB6                  	JP	PL,GNXARY	; Numeric array - Ignore it
 3498/1DDA : 6F03 8124                  	LD	(CUROPR),R3	; Save address of next array
 3499/1DDE : 97F3                       	POP	R3,@R15		; Get address of num of dim'ns
 3500/1DE0 : 2039                       	LDB	RL1,@R3		; BC = Number of dimensions
 3501/1DE2 : C100                       	LDB	RH1,#0
 3502/1DE4 : 8113                       	ADD	R3,R1		; Two bytes per dimension size
 3503/1DE6 : 8113                       	ADD	R3,R1
 3504/1DE8 : 8CC1                       	LDCTLB	RL4,FLAGS
 3505/1DEA : A930                       	INC	R3		; Plus one for number of dim'ns
 3506/1DEC : 8CC9                       	LDCTLB	FLAGS,RL4
 3507/1DEE :                            GRBARY:
 3508/1DEE : AD23                       	EX	R3,R2
 3509/1DF0 : 6103 8124                  	LD	R3,(CUROPR)	; Get address of next array
 3510/1DF4 : AD23                       	EX	R3,R2
 3511/1DF6 : 5F00 09CE                  	CALL	CPDEHL		; Is this array finished?
 3512/1DFA : 5E06 1DB8                  	JP	Z,ARRLP		; Yes - Get next one
 3513/1DFE : 2101 1DEE                  	LD	R1,#GRBARY	; Loop until array all done
 3514/1E02 :                            STPOOL:
 3515/1E02 : 93F1                       	PUSH	@R15,R1		; Save return address
 3516/1E04 : 0400 8080                  	ORB	RH0,#80H	; Flag string type
 3517/1E08 : 8D83                       	RESFLG	C
 3518/1E0A :                            STRADD:
 3519/1E0A : 2030                       	LDB	RH0,@R3		; Get string length
 3520/1E0C : 8CC1                       	LDCTLB	RL4,FLAGS
 3521/1E0E : A930                       	INC	R3
 3522/1E10 : A930                       	INC	R3
 3523/1E12 : 203A                       	LDB	RL2,@R3		; Get LSB of string address
 3524/1E14 : A930                       	INC	R3
 3525/1E16 : 2032                       	LDB	RH2,@R3		; Get MSB of string address
 3526/1E18 : A930                       	INC	R3
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 60 - 2023/10/12 18時22分27秒


 3527/1E1A : 8CC9                       	LDCTLB	FLAGS,RL4
 3528/1E1C : 9E0D                       	RET	PL		; Not a string - Return
 3529/1E1E : 8400                       	ORB	RH0,RH0
 3530/1E20 : 8D83                       	RESFLG	C		; Set flags on string length
 3531/1E22 : 9E06                       	RET	Z		; Null string - Return
 3532/1E24 : A031                       	LDB	RH1,RH3		; Save variable pointer
 3533/1E26 : A0B9                       	LDB	RL1,RL3
 3534/1E28 : 6103 8122                  	LD	R3,(STRBOT)	; Bottom of new area
 3535/1E2C : 5F00 09CE                  	CALL	CPDEHL		; String been done?
 3536/1E30 : A013                       	LDB	RH3,RH1		; Restore variable pointer
 3537/1E32 : A09B                       	LDB	RL3,RL1
 3538/1E34 : 9E07                       	RET	C		; String done - Ignore
 3539/1E36 : 97F3                       	POP	R3,@R15		; Return address
 3540/1E38 : 2DF3                       	EX	@R15,R3		; Lowest available string area
 3541/1E3A : 5F00 09CE                  	CALL	CPDEHL		; String within string area?
 3542/1E3E : 2DF3                       	EX	@R15,R3		; Lowest available string area
 3543/1E40 : 93F3                       	PUSH	@R15,R3		; Re-save return address
 3544/1E42 : A013                       	LDB	RH3,RH1		; Restore variable pointer
 3545/1E44 : A09B                       	LDB	RL3,RL1
 3546/1E46 : 9E0F                       	RET	NC		; Outside string area - Ignore
 3547/1E48 : 97F1                       	POP	R1,@R15		; Get return , Throw 2 away
 3548/1E4A : 97F0                       	POP	R0,@R15		;
 3549/1E4C : 8C89                       	LDCTLB	FLAGS,RL0
 3550/1E4E : 97F0                       	POP	R0,@R15		;
 3551/1E50 : 8C89                       	LDCTLB	FLAGS,RL0
 3552/1E52 : 93F3                       	PUSH	@R15,R3		; Save variable pointer
 3553/1E54 : 93F2                       	PUSH	@R15,R2		; Save address of current
 3554/1E56 : 93F1                       	PUSH	@R15,R1		; Put back return address
 3555/1E58 : 9E08                       	RET			; Go to it
 3556/1E5A :                            ;
 3557/1E5A :                            SCNEND:
 3558/1E5A : 97F2                       	POP	R2,@R15		; Addresses of strings
 3559/1E5C : 97F3                       	POP	R3,@R15		;
 3560/1E5E : A0B0                       	LDB	RH0,RL3		; HL = 0 if no more to do
 3561/1E60 : 8430                       	ORB	RH0,RH3
 3562/1E62 : 8D83                       	RESFLG	C
 3563/1E64 : 9E06                       	RET	Z		; No more to do - Return
 3564/1E66 : 8CC1                       	LDCTLB	RL4,FLAGS
 3565/1E68 : AB30                       	DEC	R3,#1
 3566/1E6A : 2031                       	LDB	RH1,@R3		; MSB of address of string
 3567/1E6C : AB30                       	DEC	R3,#1
 3568/1E6E : 2039                       	LDB	RL1,@R3		; LSB of address of string
 3569/1E70 : 93F3                       	PUSH	@R15,R3		; Save variable address
 3570/1E72 : AB30                       	DEC	R3,#1
 3571/1E74 : AB30                       	DEC	R3,#1
 3572/1E76 : 8CC9                       	LDCTLB	FLAGS,RL4
 3573/1E78 : 203B                       	LDB	RL3,@R3		; HL = Length of string
 3574/1E7A : C300                       	LDB	RH3,#0
 3575/1E7C : 8113                       	ADD	R3,R1		; Address of end of string+1
 3576/1E7E : A012                       	LDB	RH2,RH1		; String address to DE
 3577/1E80 : A09A                       	LDB	RL2,RL1
 3578/1E82 : 8CC1                       	LDCTLB	RL4,FLAGS
 3579/1E84 : AB30                       	DEC	R3,#1		; Last byte in string
 3580/1E86 : 8CC9                       	LDCTLB	FLAGS,RL4
 3581/1E88 : A031                       	LDB	RH1,RH3		; Address to BC
 3582/1E8A : A0B9                       	LDB	RL1,RL3
 3583/1E8C : 6103 8122                  	LD	R3,(STRBOT)	; Current bottom of string area
 3584/1E90 : 5F00 0480                  	CALL	MOVSTR		; Move string to new address
 3585/1E94 : 97F3                       	POP	R3,@R15		; Restore variable address
 3586/1E96 : 2E39                       	LDB	@R3,RL1		; Save new LSB of address
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 61 - 2023/10/12 18時22分27秒


 3587/1E98 : 8CC1                       	LDCTLB	RL4,FLAGS
 3588/1E9A : A930                       	INC	R3
 3589/1E9C : 8CC9                       	LDCTLB	FLAGS,RL4
 3590/1E9E : 2E31                       	LDB	@R3,RH1		; Save new MSB of address
 3591/1EA0 : A09B                       	LDB	RL3,RL1		; Next string area+1 to HL
 3592/1EA2 : A013                       	LDB	RH3,RH1
 3593/1EA4 : 8CC1                       	LDCTLB	RL4,FLAGS
 3594/1EA6 : AB30                       	DEC	R3,#1		; Next string area address
 3595/1EA8 : 8CC9                       	LDCTLB	FLAGS,RL4
 3596/1EAA : 5E08 1D64                  	JP	GARBLP		; Look for more strings
 3597/1EAE :                            ;
 3598/1EAE :                            CONCAT:
 3599/1EAE : 93F1                       	PUSH	@R15,R1		; Save prec' opr & code string
 3600/1EB0 : 93F3                       	PUSH	@R15,R3		;
 3601/1EB2 : 6103 8144                  	LD	R3,(FPREG)	; Get first string
 3602/1EB6 : ACB3                       	EXB	RH3,RL3
 3603/1EB8 : 2DF3                       	EX	@R15,R3		; Save first string
 3604/1EBA : 5F00 150C                  	CALL	OPRND		; Get second string
 3605/1EBE : 2DF3                       	EX	@R15,R3		; Restore first string
 3606/1EC0 : 5F00 1420                  	CALL	TSTSTR		; Make sure it's a string
 3607/1EC4 : 2030                       	LDB	RH0,@R3		; Get length of second string
 3608/1EC6 : 93F3                       	PUSH	@R15,R3		; Save first string
 3609/1EC8 : 6103 8144                  	LD	R3,(FPREG)	; Get second string
 3610/1ECC : ACB3                       	EXB	RH3,RL3
 3611/1ECE : 93F3                       	PUSH	@R15,R3		; Save second string
 3612/1ED0 : 0030                       	ADDB	RH0,@R3		; Add length of second string
 3613/1ED2 : CA1C                       	LDB	RL2,#LS		; ?LS Error
 3614/1ED4 : 5E07 04EA                  	JP	C,ERROR		; String too long - Error
 3615/1ED8 : 5F00 1C40                  	CALL	MKTMST		; Make temporary string
 3616/1EDC : 97F2                       	POP	R2,@R15		; Get second string to DE
 3617/1EDE : 5F00 1F40                  	CALL	GSTRDE		; Move to string pool if needed
 3618/1EE2 : 2DF3                       	EX	@R15,R3		; Get first string
 3619/1EE4 : 5F00 1F3E                  	CALL	GSTRHL		; Move to string pool if needed
 3620/1EE8 : 93F3                       	PUSH	@R15,R3		; Save first string
 3621/1EEA : 6103 8120                  	LD	R3,(TMPSTR+2)	; Temporary string address
 3622/1EEE : AD23                       	EX	R3,R2		; To DE
 3623/1EF0 : 5F00 1F04                  	CALL	SSTSA		; First string to string area
 3624/1EF4 : 5F00 1F04                  	CALL	SSTSA		; Second string to string area
 3625/1EF8 : 2103 144C                  	LD	R3,#EVAL2	; Return to evaluation loop
 3626/1EFC : 2DF3                       	EX	@R15,R3		; Save return,get code string
 3627/1EFE : 93F3                       	PUSH	@R15,R3		; Save code string address
 3628/1F00 : 5E08 1CA6                  	JP	TSTOPL		; To temporary string to pool
 3629/1F04 :                            ;
 3630/1F04 :                            SSTSA:
 3631/1F04 : 97F3                       	POP	R3,@R15		; Return address
 3632/1F06 : 2DF3                       	EX	@R15,R3		; Get string block,save return
 3633/1F08 : 2030                       	LDB	RH0,@R3		; Get length of string
 3634/1F0A : 8CC1                       	LDCTLB	RL4,FLAGS
 3635/1F0C : A930                       	INC	R3
 3636/1F0E : A930                       	INC	R3
 3637/1F10 : 8CC9                       	LDCTLB	FLAGS,RL4
 3638/1F12 : 2039                       	LDB	RL1,@R3		; Get LSB of string address
 3639/1F14 : 8CC1                       	LDCTLB	RL4,FLAGS
 3640/1F16 : A930                       	INC	R3
 3641/1F18 : 8CC9                       	LDCTLB	FLAGS,RL4
 3642/1F1A : 2031                       	LDB	RH1,@R3		; Get MSB of string address
 3643/1F1C : A00B                       	LDB	RL3,RH0		; Length to L
 3644/1F1E :                            TOSTRA:
 3645/1F1E : A8B0                       	INCB	RL3,#1		; INC - DECed after
 3646/1F20 :                            TSALP:
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 62 - 2023/10/12 18時22分27秒


 3647/1F20 : AAB0                       	DECB	RL3,#1		; Count bytes moved
 3648/1F22 : 9E06                       	RET	Z		; End of string - Return
 3649/1F24 : 2010                       	LDB	RH0,@R1		; Get source
 3650/1F26 : 2E20                       	LDB	@R2,RH0		; Save destination
 3651/1F28 : 8CC1                       	LDCTLB	RL4,FLAGS
 3652/1F2A : A910                       	INC	R1		; Next source
 3653/1F2C : A920                       	INC	R2		; Next destination
 3654/1F2E : 8CC9                       	LDCTLB	FLAGS,RL4
 3655/1F30 : 5E08 1F20                  	JP	TSALP		; Loop until string moved
 3656/1F34 :                            ;
 3657/1F34 :                            GETSTR:
 3658/1F34 : 5F00 1420                  	CALL	TSTSTR		; Make sure it's a string
 3659/1F38 :                            GSTRCU:
 3660/1F38 : 6103 8144                  	LD	R3,(FPREG)	; Get current string
 3661/1F3C : ACB3                       	EXB	RH3,RL3
 3662/1F3E :                            GSTRHL:
 3663/1F3E : AD23                       	EX	R3,R2		; Save DE
 3664/1F40 :                            GSTRDE:
 3665/1F40 : 5F00 1F6E                  	CALL	BAKTMP		; Was it last tmp-str?
 3666/1F44 : AD23                       	EX	R3,R2		; Restore DE
 3667/1F46 : 9E0E                       	RET	NZ		; No - Return
 3668/1F48 : 93F2                       	PUSH	@R15,R2		; Save string
 3669/1F4A : A012                       	LDB	RH2,RH1		; String block address to DE
 3670/1F4C : A09A                       	LDB	RL2,RL1
 3671/1F4E : 8CC1                       	LDCTLB	RL4,FLAGS
 3672/1F50 : AB20                       	DEC	R2,#1		; Point to length
 3673/1F52 : 8CC9                       	LDCTLB	FLAGS,RL4
 3674/1F54 : 2039                       	LDB	RL1,@R3		; Get string length
 3675/1F56 : 6103 8122                  	LD	R3,(STRBOT)	; Current bottom of string area
 3676/1F5A : 5F00 09CE                  	CALL	CPDEHL		; Last one in string area?
 3677/1F5E : 5E0E 1F6A                  	JP	NZ,POPHL	; No - Return
 3678/1F62 : A001                       	LDB	RH1,RH0		; Clear B (A=0)
 3679/1F64 : 8113                       	ADD	R3,R1		; Remove string from str' area
 3680/1F66 : 6F03 8122                  	LD	(STRBOT),R3	; Save new bottom of str' area
 3681/1F6A :                            POPHL:
 3682/1F6A : 97F3                       	POP	R3,@R15		; Restore string
 3683/1F6C : 9E08                       	RET
 3684/1F6E :                            ;
 3685/1F6E :                            BAKTMP:
 3686/1F6E : 6103 8110                  	LD	R3,(TMSTPT)	; Get temporary string pool top
 3687/1F72 : 8CC1                       	LDCTLB	RL4,FLAGS
 3688/1F74 : AB30                       	DEC	R3,#1		; Back
 3689/1F76 : 2031                       	LDB	RH1,@R3		; Get MSB of address
 3690/1F78 : AB30                       	DEC	R3,#1		; Back
 3691/1F7A : 2039                       	LDB	RL1,@R3		; Get LSB of address
 3692/1F7C : AB30                       	DEC	R3,#1		; Back
 3693/1F7E : AB30                       	DEC	R3,#1		; Back
 3694/1F80 : 8CC9                       	LDCTLB	FLAGS,RL4
 3695/1F82 : 5F00 09CE                  	CALL	CPDEHL		; String last in string pool?
 3696/1F86 : 9E0E                       	RET	NZ		; Yes - Leave it
 3697/1F88 : 6F03 8110                  	LD	(TMSTPT),R3	; Save new string pool top
 3698/1F8C : 9E08                       	RET
 3699/1F8E :                            ;
 3700/1F8E :                            LEN:
 3701/1F8E : 2101 1AF0                  	LD	R1,#PASSA	; To return integer A
 3702/1F92 : 93F1                       	PUSH	@R15,R1		; Save address
 3703/1F94 :                            GETLEN:
 3704/1F94 : 5F00 1F34                  	CALL	GETSTR		; Get string and its length
 3705/1F98 : 8800                       	XORB	RH0,RH0
 3706/1F9A : 8D83                       	RESFLG	C
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 63 - 2023/10/12 18時22分27秒


 3707/1F9C : A002                       	LDB	RH2,RH0		; Clear D
 3708/1F9E : 6E00 810C                  	LDB	(TYPE),RH0	; Set type to numeric
 3709/1FA2 : 2030                       	LDB	RH0,@R3		; Get length of string
 3710/1FA4 : 8400                       	ORB	RH0,RH0
 3711/1FA6 : 8D83                       	RESFLG	C		; Set status flags
 3712/1FA8 : 9E08                       	RET
 3713/1FAA :                            ;
 3714/1FAA :                            ASC:
 3715/1FAA : 2101 1AF0                  	LD	R1,#PASSA	; To return integer A
 3716/1FAE : 93F1                       	PUSH	@R15,R1		; Save address
 3717/1FB0 :                            GTFLNM:
 3718/1FB0 : 5F00 1F94                  	CALL	GETLEN		; Get length of string
 3719/1FB4 : 5E06 0DEA                  	JP	Z,FCERR		; Null string - Error
 3720/1FB8 : 8CC1                       	LDCTLB	RL4,FLAGS
 3721/1FBA : A930                       	INC	R3
 3722/1FBC : A930                       	INC	R3
 3723/1FBE : 8CC9                       	LDCTLB	FLAGS,RL4
 3724/1FC0 : 203A                       	LDB	RL2,@R3		; Get LSB of address
 3725/1FC2 : 8CC1                       	LDCTLB	RL4,FLAGS
 3726/1FC4 : A930                       	INC	R3
 3727/1FC6 : 8CC9                       	LDCTLB	FLAGS,RL4
 3728/1FC8 : 2032                       	LDB	RH2,@R3		; Get MSB of address
 3729/1FCA : 2020                       	LDB	RH0,@R2		; Get first byte of string
 3730/1FCC : 9E08                       	RET
 3731/1FCE :                            ;
 3732/1FCE :                            CHR:
 3733/1FCE : C001                       	LDB	RH0,#1		; One character string
 3734/1FD0 : 5F00 1C40                  	CALL	MKTMST		; Make a temporary string
 3735/1FD4 : 5F00 2168                  	CALL	MAKINT		; Make it integer A
 3736/1FD8 : 6103 8120                  	LD	R3,(TMPSTR+2)	; Get address of string
 3737/1FDC : ACB3                       	EXB	RH3,RL3		; @@@
 3738/1FDE : 2E3A                       	LDB	@R3,RL2		; Save character
 3739/1FE0 :                            TOPOOL:
 3740/1FE0 : 97F1                       	POP	R1,@R15		; Clean up stack
 3741/1FE2 : 5E08 1CA6                  	JP	TSTOPL		; Temporary string to pool
 3742/1FE6 :                            ;
 3743/1FE6 :                            LEFT:
 3744/1FE6 : 5F00 20EA                  	CALL	LFRGNM		; Get number and ending ")"
 3745/1FEA : 8800                       	XORB	RH0,RH0
 3746/1FEC : 8D83                       	RESFLG	C		; Start at first byte in string
 3747/1FEE :                            RIGHT1:
 3748/1FEE : 2DF3                       	EX	@R15,R3		; Save code string,Get string
 3749/1FF0 : A009                       	LDB	RL1,RH0		; Starting position in string
 3750/1FF2 :                            MID1:
 3751/1FF2 : 93F3                       	PUSH	@R15,R3		; Save string block address
 3752/1FF4 : 2030                       	LDB	RH0,@R3		; Get length of string
 3753/1FF6 : 8A10                       	CPB	RH0,RH1		; Compare with number given
 3754/1FF8 : 5E07 2000                  	JP	C,ALLFOL	; All following bytes required
 3755/1FFC : A010                       	LDB	RH0,RH1		; Get new length
 3756/1FFE : E801                       	JR	ALLFOL1		; Skip "LD C,0"
 3757/2000 :                            ALLFOL:
 3758/2000 : C900                       	LDB	RL1,#0		; First byte of string
 3759/2002 :                            ALLFOL1:
 3760/2002 : 93F1                       	PUSH	@R15,R1		; Save position in string
 3761/2004 : 5F00 1D06                  	CALL	TESTR		; See if enough string space
 3762/2008 : 97F1                       	POP	R1,@R15		; Get position in string
 3763/200A : 97F3                       	POP	R3,@R15		; Restore string block address
 3764/200C : 93F3                       	PUSH	@R15,R3		; And re-save it
 3765/200E : 8CC1                       	LDCTLB	RL4,FLAGS
 3766/2010 : A930                       	INC	R3
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 64 - 2023/10/12 18時22分27秒


 3767/2012 : A930                       	INC	R3
 3768/2014 : 2031                       	LDB	RH1,@R3		; Get LSB of address
 3769/2016 : A930                       	INC	R3
 3770/2018 : 8CC9                       	LDCTLB	FLAGS,RL4
 3771/201A : 2033                       	LDB	RH3,@R3		; Get MSB of address
 3772/201C : A01B                       	LDB	RL3,RH1		; HL = address of string
 3773/201E : C100                       	LDB	RH1,#0		; BC = starting address
 3774/2020 : 8113                       	ADD	R3,R1		; Point to that byte
 3775/2022 : A031                       	LDB	RH1,RH3		; BC = source string
 3776/2024 : A0B9                       	LDB	RL1,RL3
 3777/2026 : 5F00 1C44                  	CALL	CRTMST		; Create a string entry
 3778/202A : A00B                       	LDB	RL3,RH0		; Length of new string
 3779/202C : 5F00 1F1E                  	CALL	TOSTRA		; Move string to string area
 3780/2030 : 97F2                       	POP	R2,@R15		; Clear stack
 3781/2032 : 5F00 1F40                  	CALL	GSTRDE		; Move to string pool if needed
 3782/2036 : 5E08 1CA6                  	JP	TSTOPL		; Temporary string to pool
 3783/203A :                            ;
 3784/203A :                            RIGHT:
 3785/203A : 5F00 20EA                  	CALL	LFRGNM		; Get number and ending ")"
 3786/203E : 97F2                       	POP	R2,@R15		; Get string length
 3787/2040 : 93F2                       	PUSH	@R15,R2		; And re-save
 3788/2042 : 2020                       	LDB	RH0,@R2		; Get length
 3789/2044 : 8210                       	SUBB	RH0,RH1		; Move back N bytes
 3790/2046 : 5E08 1FEE                  	JP	RIGHT1		; Go and get sub-string
 3791/204A :                            ;
 3792/204A :                            MID:
 3793/204A : AD23                       	EX	R3,R2		; Get code string address
 3794/204C : 2030                       	LDB	RH0,@R3		; Get next byte ',' or ")"
 3795/204E : 5F00 20F2                  	CALL	MIDNUM		; Get number supplied
 3796/2052 : A810                       	INCB	RH1,#1		; Is it character zero?
 3797/2054 : AA10                       	DECB	RH1,#1
 3798/2056 : 5E06 0DEA                  	JP	Z,FCERR		; Yes - Error
 3799/205A : 93F1                       	PUSH	@R15,R1		; Save starting position
 3800/205C : CAFF                       	LDB	RL2,#255	; All of string
 3801/205E : 0A00 2929                  	CPB	RH0,#')'	; Any length given?
 3802/2062 : 5E06 2070                  	JP	Z,RSTSTR	; No - Rest of string
 3803/2066 : C42C                       	LD	RH4,#','
 3804/2068 : 5F00 09DA                  	CALL	CHKSYN		; Make sure ',' follows
 3805/206C : 5F00 2164                  	CALL	GETINT		; Get integer 0-255
 3806/2070 :                            RSTSTR:
 3807/2070 : C429                       	LD	RH4,#")"
 3808/2072 : 5F00 09DA                  	CALL	CHKSYN		; Make sure ")" follows
 3809/2076 : 97F0                       	POP	R0,@R15		; Restore starting position
 3810/2078 : 8C89                       	LDCTLB	FLAGS,RL0
 3811/207A : 2DF3                       	EX	@R15,R3		; Get string,8ave code string
 3812/207C : 2101 1FF2                  	LD	R1,#MID1	; Continuation of MID$ routine
 3813/2080 : 93F1                       	PUSH	@R15,R1		; Save for return
 3814/2082 : AA00                       	DECB	RH0,#1		; Starting position-1
 3815/2084 : 0A30                       	CPB	RH0,@R3		; Compare with length
 3816/2086 : C100                       	LDB	RH1,#0		; Zero bytes length
 3817/2088 : 9E0F                       	RET	NC		; Null string if start past end
 3818/208A : A009                       	LDB	RL1,RH0		; Save starting position-1
 3819/208C : 2030                       	LDB	RH0,@R3		; Get length of string
 3820/208E : 8290                       	SUBB	RH0,RL1		; Subtract start
 3821/2090 : 8AA0                       	CPB	RH0,RL2		; Enough string for it?
 3822/2092 : A001                       	LDB	RH1,RH0		; Save maximum length available
 3823/2094 : 9E07                       	RET	C		; Truncate string if needed
 3824/2096 : A0A1                       	LDB	RH1,RL2		; Set specified length
 3825/2098 : 9E08                       	RET			; Go and create string
 3826/209A :                            ;
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 65 - 2023/10/12 18時22分27秒


 3827/209A :                            VAL:
 3828/209A : 5F00 1F94                  	CALL	GETLEN		; Get length of string
 3829/209E : 5E06 228C                  	JP	Z,RESZER	; Result zero
 3830/20A2 : A00A                       	LDB	RL2,RH0		; Save length
 3831/20A4 : 8CC1                       	LDCTLB	RL4,FLAGS
 3832/20A6 : A930                       	INC	R3
 3833/20A8 : A930                       	INC	R3
 3834/20AA : 2030                       	LDB	RH0,@R3		; Get LSB of address
 3835/20AC : A930                       	INC	R3
 3836/20AE : 8CC9                       	LDCTLB	FLAGS,RL4
 3837/20B0 : 2033                       	LDB	RH3,@R3		; Get MSB of address
 3838/20B2 : A00B                       	LDB	RL3,RH0		; HL = String address
 3839/20B4 : 93F3                       	PUSH	@R15,R3		; Save string address
 3840/20B6 : 8123                       	ADD	R3,R2
 3841/20B8 : 2031                       	LDB	RH1,@R3		; Get end of string+1 byte
 3842/20BA : 2E32                       	LDB	@R3,RH2		; Zero it to terminate
 3843/20BC : 2DF3                       	EX	@R15,R3		; Save string end,get start
 3844/20BE : 93F1                       	PUSH	@R15,R1		; Save end+1 byte
 3845/20C0 : 2030                       	LDB	RH0,@R3		; Get starting byte
 3846/20C2 : 0A00 2424                  	CPB	RH0,#'$'	; Hex number indicated? [function added]
 3847/20C6 : 5E0E 20D0                  	JP	NZ,VAL1
 3848/20CA : 5F00 2F3E                  	CALL	HEXTFP		; Convert Hex to FPREG
 3849/20CE : E809                       	JR	VAL3
 3850/20D0 :                            VAL1:
 3851/20D0 : 0A00 2525                  	CPB	RH0,#'%'	; Binary number indicated? [function added]
 3852/20D4 : 5E0E 20DE                  	JP	NZ,VAL2
 3853/20D8 : 5F00 2FF8                  	CALL	BINTFP		; Convert Bin to FPREG
 3854/20DC : E802                       	JR	VAL3
 3855/20DE :                            VAL2:
 3856/20DE : 5F00 27FE                  	CALL	ASCTFP		; Convert ASCII string to FP
 3857/20E2 :                            VAL3:
 3858/20E2 : 97F1                       	POP	R1,@R15		; Restore end+1 byte
 3859/20E4 : 97F3                       	POP	R3,@R15		; Restore end+1 address
 3860/20E6 : 2E31                       	LDB	@R3,RH1		; Put back original byte
 3861/20E8 : 9E08                       	RET
 3862/20EA :                            ;
 3863/20EA :                            LFRGNM:
 3864/20EA : AD23                       	EX	R3,R2		; Code string address to HL
 3865/20EC : C429                       	LD	RH4,#")"
 3866/20EE : 5F00 09DA                  	CALL	CHKSYN		; Make sure ")" follows
 3867/20F2 :                            MIDNUM:
 3868/20F2 : 97F1                       	POP	R1,@R15		; Get return address
 3869/20F4 : 97F2                       	POP	R2,@R15		; Get number supplied
 3870/20F6 : 93F1                       	PUSH	@R15,R1		; Re-save return address
 3871/20F8 : A0A1                       	LDB	RH1,RL2		; Number to B
 3872/20FA : 9E08                       	RET
 3873/20FC :                            ;
 3874/20FC :                            INP:
 3875/20FC : 5F00 2168                  	CALL	MAKINT		; Make it integer A
 3876/2100 : 6E00 8099                  	LDB	(INPORT),RH0	; Set input port
 3877/2104 : 5F00 8096                  	CALL	INPSUB		; Get input from port
 3878/2108 : 5E08 1AF0                  	JP	PASSA		; Return integer A
 3879/210C :                            ;
 3880/210C :                            POUT:
 3881/210C : 5F00 214A                  	CALL	SETIO		; Set up port number
 3882/2110 : 5E08 804E                  	JP	OUTSUB		; Output data and return
 3883/2114 :                            ;
 3884/2114 :                            WAIT:
 3885/2114 : 5F00 214A                  	CALL	SETIO		; Set up port number
 3886/2118 : 8C81                       	LDCTLB	RL0,FLAGS
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 66 - 2023/10/12 18時22分27秒


 3887/211A : 93F0                       	PUSH	@R15,R0		; Save AND mask
 3888/211C : CA00                       	LDB	RL2,#0		; Assume zero if none given
 3889/211E : 8CC1                       	LDCTLB	RL4,FLAGS
 3890/2120 : AB30                       	DEC	R3,#1		; DEC 'cos GETCHR INCs
 3891/2122 : 8CC9                       	LDCTLB	FLAGS,RL4
 3892/2124 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 3893/2128 : 5E06 2136                  	JP	Z,NOXOR		; No XOR byte given
 3894/212C : C42C                       	LD	RH4,#','
 3895/212E : 5F00 09DA                  	CALL	CHKSYN		; Make sure ',' follows
 3896/2132 : 5F00 2164                  	CALL	GETINT		; Get integer 0-255 to XOR with
 3897/2136 :                            NOXOR:
 3898/2136 : 97F1                       	POP	R1,@R15		; Restore AND mask
 3899/2138 :                            WAITLP:
 3900/2138 : 5F00 8096                  	CALL	INPSUB		; Get input
 3901/213C : 88A0                       	XORB	RH0,RL2
 3902/213E : 8D83                       	RESFLG	C		; Flip selected bits
 3903/2140 : 8610                       	ANDB	RH0,RH1
 3904/2142 : 8D83                       	RESFLG	C		; Result non-zero?
 3905/2144 : 5E06 2138                  	JP	Z,WAITLP	; No = keep waiting
 3906/2148 : 9E08                       	RET
 3907/214A :                            ;
 3908/214A :                            SETIO:
 3909/214A : 5F00 2164                  	CALL	GETINT		; Get integer 0-255
 3910/214E : 6E00 8099                  	LDB	(INPORT),RH0	; Set input port
 3911/2152 : 6E00 8051                  	LDB	(OTPORT),RH0	; Set output port
 3912/2156 : C42C                       	LD	RH4,#','
 3913/2158 : 5F00 09DA                  	CALL	CHKSYN		; Make sure ',' follows
 3914/215C : 5E08 2164                  	JP	GETINT		; Get integer 0-255 and return
 3915/2160 :                            ;
 3916/2160 :                            FNDNUM:
 3917/2160 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 3918/2164 :                            GETINT:
 3919/2164 : 5F00 1418                  	CALL	GETNUM		; Get a number from 0 to 255
 3920/2168 :                            MAKINT:
 3921/2168 : 5F00 0DC2                  	CALL	DEPINT		; Make sure value 0 - 255
 3922/216C : A020                       	LDB	RH0,RH2		; Get MSB of number
 3923/216E : 8400                       	ORB	RH0,RH0
 3924/2170 : 8D83                       	RESFLG	C		; Zero?
 3925/2172 : 5E0E 0DEA                  	JP	NZ,FCERR	; No - Error
 3926/2176 : 8CC1                       	LDCTLB	RL4,FLAGS
 3927/2178 : AB30                       	DEC	R3,#1		; DEC 'cos GETCHR INCs
 3928/217A : 8CC9                       	LDCTLB	FLAGS,RL4
 3929/217C : 5F00 0C96                  	CALL	GETCHR		; Get next character
 3930/2180 : A0A0                       	LDB	RH0,RL2		; Get number to A
 3931/2182 : 9E08                       	RET
 3932/2184 :                            ;
 3933/2184 :                            PEEK:
 3934/2184 : 5F00 0DCA                  	CALL	DEINT		; Get memory address
 3935/2188 : 2020                       	LDB	RH0,@R2		; Get byte in memory
 3936/218A : 5E08 1AF0                  	JP	PASSA		; Return integer A
 3937/218E :                            ;
 3938/218E :                            POKE:
 3939/218E : 5F00 1418                  	CALL	GETNUM		; Get memory address
 3940/2192 : 5F00 0DCA                  	CALL	DEINT		; Get integer -32768 to 3276
 3941/2196 : 93F2                       	PUSH	@R15,R2		; Save memory address
 3942/2198 : C42C                       	LD	RH4,#','
 3943/219A : 5F00 09DA                  	CALL	CHKSYN		; Make sure ',' follows
 3944/219E : 5F00 2164                  	CALL	GETINT		; Get integer 0-255
 3945/21A2 : 97F2                       	POP	R2,@R15		; Restore memory address
 3946/21A4 : 2E20                       	LDB	@R2,RH0		; Load it into memory
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 67 - 2023/10/12 18時22分27秒


 3947/21A6 : 9E08                       	RET
 3948/21A8 :                            ;
 3949/21A8 :                            ROUND:
 3950/21A8 : 2103 2AD8                  	LD	R3,#HALF	; Add 0.5 to FPREG
 3951/21AC :                            ADDPHL:
 3952/21AC : 5F00 2682                  	CALL	LOADFP		; Load FP at (HL) to BCDE
 3953/21B0 : 5E08 21C2                  	JP	FPADD		; Add BCDE to FPREG
 3954/21B4 :                            ;
 3955/21B4 :                            SUBPHL:
 3956/21B4 : 5F00 2682                  	CALL	LOADFP		; FPREG = -FPREG + number at HL
 3957/21B8 : E802                       	JR	SUBCDE		; Skip "POP BC" and "POP DE"
 3958/21BA :                            PSUB:
 3959/21BA : 97F1                       	POP	R1,@R15		; Get FP number from stack
 3960/21BC : 97F2                       	POP	R2,@R15
 3961/21BE :                            SUBCDE:
 3962/21BE : 5F00 2636                  	CALL	INVSGN		; Negate FPREG
 3963/21C2 :                            FPADD:
 3964/21C2 : A010                       	LDB	RH0,RH1		; Get FP exponent
 3965/21C4 : 8400                       	ORB	RH0,RH0
 3966/21C6 : 8D83                       	RESFLG	C		; Is number zero?
 3967/21C8 : 9E06                       	RET	Z		; Yes - Nothing to add
 3968/21CA : 6000 8147                  	LDB	RH0,(FPEXP)	; Get FPREG exponent
 3969/21CE : 8400                       	ORB	RH0,RH0
 3970/21D0 : 8D83                       	RESFLG	C		; Is this number zero?
 3971/21D2 : 5E06 2664                  	JP	Z,FPBCDE	; Yes - Move BCDE to FPREG
 3972/21D6 : 8210                       	SUBB	RH0,RH1		; BCDE number larger?
 3973/21D8 : 5E0F 21F4                  	JP	NC,NOSWAP	; No - Don't swap them
 3974/21DC : 8CC1                       	LDCTLB	RL4,FLAGS
 3975/21DE : 8C00                       	COMB	RH0		; Two's complement
 3976/21E0 : 8CC9                       	LDCTLB	FLAGS,RL4
 3977/21E2 : A800                       	INCB	RH0,#1		; FP exponent
 3978/21E4 : AD23                       	EX	R3,R2
 3979/21E6 : 5F00 2646                  	CALL	STAKFP		; Put FPREG on stack
 3980/21EA : AD23                       	EX	R3,R2
 3981/21EC : 5F00 2664                  	CALL	FPBCDE		; Move BCDE to FPREG
 3982/21F0 : 97F1                       	POP	R1,@R15		; Restore number from stack
 3983/21F2 : 97F2                       	POP	R2,@R15
 3984/21F4 :                            NOSWAP:
 3985/21F4 : 0A00 1919                  	CPB	RH0,#24+1	; Second number insignificant?
 3986/21F8 : 9E0F                       	RET	NC		; Yes - First number is result
 3987/21FA : 8C81                       	LDCTLB	RL0,FLAGS
 3988/21FC : 93F0                       	PUSH	@R15,R0		; Save number of bits to scale
 3989/21FE : 5F00 26B6                  	CALL	SIGNS		; Set MSBs & sign of result
 3990/2202 : A003                       	LDB	RH3,RH0		; Save sign of result
 3991/2204 : 97F0                       	POP	R0,@R15		; Restore scaling factor
 3992/2206 : 8C89                       	LDCTLB	FLAGS,RL0
 3993/2208 : 5F00 2350                  	CALL	SCALE		; Scale BCDE to same exponent
 3994/220C : 8430                       	ORB	RH0,RH3
 3995/220E : 8D83                       	RESFLG	C		; Result to be positive?
 3996/2210 : 2103 8144                  	LD	R3,#FPREG	; Point to FPREG
 3997/2214 : 5E0D 2236                  	JP	PL,MINCDE	; No - Subtract FPREG from CDE
 3998/2218 : 5F00 2304                  	CALL	PLUCDE		; Add FPREG to CDE
 3999/221C : 5E0F 22C6                  	JP	NC,RONDUP	; No overflow - Round it up
 4000/2220 : 8CC1                       	LDCTLB	RL4,FLAGS
 4001/2222 : A930                       	INC	R3		; Point to exponent
 4002/2224 : 8CC9                       	LDCTLB	FLAGS,RL4
 4003/2226 : 2830                       	INCB	@R3,#1		; Increment it
 4004/2228 : 5E06 04E4                  	JP	Z,OVERR		; Number overflowed - Error
 4005/222C : CB01                       	LDB	RL3,#1		; 1 bit to shift right
 4006/222E : 5F00 2376                  	CALL	SHRT1		; Shift result right
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 68 - 2023/10/12 18時22分27秒


 4007/2232 : 5E08 22C6                  	JP	RONDUP		; Round it up
 4008/2236 :                            ;
 4009/2236 :                            MINCDE:
 4010/2236 : 8800                       	XORB	RH0,RH0
 4011/2238 : 8D83                       	RESFLG	C		; Clear A and carry
 4012/223A : 8210                       	SUBB	RH0,RH1		; Negate exponent
 4013/223C : A001                       	LDB	RH1,RH0		; Re-save exponent
 4014/223E : 2030                       	LDB	RH0,@R3		; Get LSB of FPREG
 4015/2240 : B6A0                       	SBCB	RH0,RL2		; Subtract LSB of BCDE
 4016/2242 : A00A                       	LDB	RL2,RH0		; Save LSB of BCDE
 4017/2244 : 8CC1                       	LDCTLB	RL4,FLAGS
 4018/2246 : A930                       	INC	R3
 4019/2248 : 8CC9                       	LDCTLB	FLAGS,RL4
 4020/224A : 2030                       	LDB	RH0,@R3		; Get NMSB of FPREG
 4021/224C : B620                       	SBCB	RH0,RH2		; Subtract NMSB of BCDE
 4022/224E : A002                       	LDB	RH2,RH0		; Save NMSB of BCDE
 4023/2250 : 8CC1                       	LDCTLB	RL4,FLAGS
 4024/2252 : A930                       	INC	R3
 4025/2254 : 8CC9                       	LDCTLB	FLAGS,RL4
 4026/2256 : 2030                       	LDB	RH0,@R3		; Get MSB of FPREG
 4027/2258 : B690                       	SBCB	RH0,RL1		; Subtract MSB of BCDE
 4028/225A : A009                       	LDB	RL1,RH0		; Save MSB of BCDE
 4029/225C :                            CONPOS:
 4030/225C : EF02                       	JR	NC,BNORM
 4031/225E : 5F00 2324                  	CALL	COMPL		; Overflow - Make it positive
 4032/2262 :                            ;
 4033/2262 :                            BNORM:
 4034/2262 : A01B                       	LDB	RL3,RH1		; L = Exponent
 4035/2264 : A0A3                       	LDB	RH3,RL2		; H = LSB
 4036/2266 : 8800                       	XORB	RH0,RH0
 4037/2268 : 8D83                       	RESFLG	C
 4038/226A :                            BNRMLP:
 4039/226A : A001                       	LDB	RH1,RH0		; Save bit count
 4040/226C : A090                       	LDB	RH0,RL1		; Get MSB
 4041/226E : 8400                       	ORB	RH0,RH0
 4042/2270 : 8D83                       	RESFLG	C		; Is it zero?
 4043/2272 : 5E0E 22A6                  	JP	NZ,PNORM	; No - Do it bit at a time
 4044/2276 : A029                       	LDB	RL1,RH2		; MSB = NMSB
 4045/2278 : A032                       	LDB	RH2,RH3		; NMSB= LSB
 4046/227A : A0B3                       	LDB	RH3,RL3		; LSB = VLSB
 4047/227C : A00B                       	LDB	RL3,RH0		; VLSB= 0
 4048/227E : A010                       	LDB	RH0,RH1		; Get exponent
 4049/2280 : 0200 0808                  	SUBB	RH0,#8		; Count 8 bits
 4050/2284 : 0A00 E0E0                  	CPB	RH0,#0E0H	; -24-8 Was number zero?
 4051/2288 : 5E0E 226A                  	JP	NZ,BNRMLP	; No - Keep normalising
 4052/228C :                            RESZER:
 4053/228C : 8800                       	XORB	RH0,RH0
 4054/228E : 8D83                       	RESFLG	C		; Result is zero
 4055/2290 :                            SAVEXP:
 4056/2290 : 6E00 8147                  	LDB	(FPEXP),RH0	; Save result as zero
 4057/2294 : 9E08                       	RET
 4058/2296 :                            ;
 4059/2296 :                            NORMAL:
 4060/2296 : AA10                       	DECB	RH1,#1		; Count bits
 4061/2298 : 8133                       	ADD	R3,R3		; Shift HL left
 4062/229A : A020                       	LDB	RH0,RH2		; Get NMSB
 4063/229C : B208                       	RLCB	RH0,#1		; Shift left with last bit
 4064/229E : A002                       	LDB	RH2,RH0		; Save NMSB
 4065/22A0 : A090                       	LDB	RH0,RL1		; Get MSB
 4066/22A2 : B400                       	ADCB	RH0,RH0		; Shift left with last bit
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 69 - 2023/10/12 18時22分27秒


 4067/22A4 : A009                       	LDB	RL1,RH0		; Save MSB
 4068/22A6 :                            PNORM:
 4069/22A6 : 5E0D 2296                  	JP	PL,NORMAL	; Not done - Keep going
 4070/22AA : A010                       	LDB	RH0,RH1		; Number of bits shifted
 4071/22AC : A03A                       	LDB	RL2,RH3		; Save HL in EB
 4072/22AE : A0B1                       	LDB	RH1,RL3
 4073/22B0 : 8400                       	ORB	RH0,RH0
 4074/22B2 : 8D83                       	RESFLG	C		; Any shifting done?
 4075/22B4 : 5E06 22C6                  	JP	Z,RONDUP	; No - Round it up
 4076/22B8 : 2103 8147                  	LD	R3,#FPEXP	; Point to exponent
 4077/22BC : 0030                       	ADDB	RH0,@R3		; Add shifted bits
 4078/22BE : 2E30                       	LDB	@R3,RH0		; Re-save exponent
 4079/22C0 : 5E0F 228C                  	JP	NC,RESZER	; Underflow - Result is zero
 4080/22C4 : 9E06                       	RET	Z		; Result is zero
 4081/22C6 :                            RONDUP:
 4082/22C6 : A010                       	LDB	RH0,RH1		; Get VLSB of number
 4083/22C8 :                            RONDB:
 4084/22C8 : 2103 8147                  	LD	R3,#FPEXP	; Point to exponent
 4085/22CC : 8400                       	ORB	RH0,RH0
 4086/22CE : 8D83                       	RESFLG	C		; Any rounding?
 4087/22D0 : ED02                       	JR	PL,RONDB1
 4088/22D2 : 5F00 22EE                  	CALL	FPROND		; Yes - Round number up
 4089/22D6 :                            RONDB1:
 4090/22D6 : 2031                       	LDB	RH1,@R3		; B = Exponent
 4091/22D8 : 8CC1                       	LDCTLB	RL4,FLAGS
 4092/22DA : A930                       	INC	R3
 4093/22DC : 8CC9                       	LDCTLB	FLAGS,RL4
 4094/22DE : 2030                       	LDB	RH0,@R3		; Get sign of result
 4095/22E0 : 0600 8080                  	ANDB	RH0,#10000000B	; Only bit 7 needed
 4096/22E4 : 8890                       	XORB	RH0,RL1
 4097/22E6 : 8D83                       	RESFLG	C		; Set correct sign
 4098/22E8 : A009                       	LDB	RL1,RH0		; Save correct sign in number
 4099/22EA : 5E08 2664                  	JP	FPBCDE		; Move BCDE to FPREG
 4100/22EE :                            ;
 4101/22EE :                            FPROND:
 4102/22EE : A8A0                       	INCB	RL2,#1		; Round LSB
 4103/22F0 : 9E0E                       	RET	NZ		; Return if ok
 4104/22F2 : A820                       	INCB	RH2,#1		; Round NMSB
 4105/22F4 : 9E0E                       	RET	NZ		; Return if ok
 4106/22F6 : A890                       	INCB	RL1,#1		; Round MSB
 4107/22F8 : 9E0E                       	RET	NZ		; Return if ok
 4108/22FA : C980                       	LDB	RL1,#80H		; Set normal value
 4109/22FC : 2830                       	INCB	@R3,#1		; Increment exponent
 4110/22FE : 9E0E                       	RET	NZ		; Return if ok
 4111/2300 : 5E08 04E4                  	JP	OVERR		; Overflow error
 4112/2304 :                            ;
 4113/2304 :                            PLUCDE:
 4114/2304 : 2030                       	LDB	RH0,@R3		; Get LSB of FPREG
 4115/2306 : 80A0                       	ADDB	RH0,RL2		; Add LSB of BCDE
 4116/2308 : A00A                       	LDB	RL2,RH0		; Save LSB of BCDE
 4117/230A : 8CC1                       	LDCTLB	RL4,FLAGS
 4118/230C : A930                       	INC	R3
 4119/230E : 8CC9                       	LDCTLB	FLAGS,RL4
 4120/2310 : 2030                       	LDB	RH0,@R3		; Get NMSB of FPREG
 4121/2312 : B420                       	ADCB	RH0,RH2		; Add NMSB of BCDE
 4122/2314 : A002                       	LDB	RH2,RH0		; Save NMSB of BCDE
 4123/2316 : 8CC1                       	LDCTLB	RL4,FLAGS
 4124/2318 : A930                       	INC	R3
 4125/231A : 8CC9                       	LDCTLB	FLAGS,RL4
 4126/231C : 2030                       	LDB	RH0,@R3		; Get MSB of FPREG
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 70 - 2023/10/12 18時22分27秒


 4127/231E : B490                       	ADCB	RH0,RL1		; Add MSB of BCDE
 4128/2320 : A009                       	LDB	RL1,RH0		; Save MSB of BCDE
 4129/2322 : 9E08                       	RET
 4130/2324 :                            ;
 4131/2324 :                            COMPL:
 4132/2324 : 2103 8148                  	LD	R3,#SGNRES	; Sign of result
 4133/2328 : 2030                       	LDB	RH0,@R3		; Get sign of result
 4134/232A : 8CC1                       	LDCTLB	RL4,FLAGS
 4135/232C : 8C00                       	COMB	RH0			; Negate it
 4136/232E : 8CC9                       	LDCTLB	FLAGS,RL4
 4137/2330 : 2E30                       	LDB	@R3,RH0		; Put it back
 4138/2332 : 8800                       	XORB	RH0,RH0
 4139/2334 : 8D83                       	RESFLG	C
 4140/2336 : A00B                       	LDB	RL3,RH0		; Set L to zero
 4141/2338 : 8210                       	SUBB	RH0,RH1		; Negate exponent,set carry
 4142/233A : A001                       	LDB	RH1,RH0		; Re-save exponent
 4143/233C : A0B0                       	LDB	RH0,RL3		; Load zero
 4144/233E : B6A0                       	SBCB	RH0,RL2		; Negate LSB
 4145/2340 : A00A                       	LDB	RL2,RH0		; Re-save LSB
 4146/2342 : A0B0                       	LDB	RH0,RL3		; Load zero
 4147/2344 : B620                       	SBCB	RH0,RH2		; Negate NMSB
 4148/2346 : A002                       	LDB	RH2,RH0		; Re-save NMSB
 4149/2348 : A0B0                       	LDB	RH0,RL3		; Load zero
 4150/234A : B690                       	SBCB	RH0,RL1		; Negate MSB
 4151/234C : A009                       	LDB	RL1,RH0		; Re-save MSB
 4152/234E : 9E08                       	RET
 4153/2350 :                            ;
 4154/2350 :                            SCALE:
 4155/2350 : C100                       	LDB	RH1,#0		; Clear underflow
 4156/2352 :                            SCALLP:
 4157/2352 : 0200 0808                  	SUBB	RH0,#8		; 8 bits (a whole byte)?
 4158/2356 : 5E07 2366                  	JP	C,SHRITE	; No - Shift right A bits
 4159/235A : A0A1                       	LDB	RH1,RL2		; <- Shift
 4160/235C : A02A                       	LDB	RL2,RH2		; <- right
 4161/235E : A092                       	LDB	RH2,RL1		; <- eight
 4162/2360 : C900                       	LDB	RL1,#0		; <- bits
 4163/2362 : 5E08 2352                  	JP	SCALLP		; More bits to shift
 4164/2366 :                            ;
 4165/2366 :                            SHRITE:
 4166/2366 : 0000 0909                  	ADDB	RH0,#8+1	; Adjust count
 4167/236A : A00B                       	LDB	RL3,RH0		; Save bits to shift
 4168/236C :                            SHRLP:
 4169/236C : 8800                       	XORB	RH0,RH0
 4170/236E : 8D83                       	RESFLG	C		; Flag for all done
 4171/2370 : AAB0                       	DECB	RL3,#1		; All shifting done?
 4172/2372 : 9E06                       	RET	Z		; Yes - Return
 4173/2374 : A090                       	LDB	RH0,RL1		; Get MSB
 4174/2376 :                            SHRT1:
 4175/2376 : B20C                       	RRCB	RH0,#1		; Shift it right
 4176/2378 : A009                       	LDB	RL1,RH0		; Re-save
 4177/237A : A020                       	LDB	RH0,RH2		; Get NMSB
 4178/237C : B20C                       	RRCB	RH0,#1		; Shift right with last bit
 4179/237E : A002                       	LDB	RH2,RH0		; Re-save it
 4180/2380 : A0A0                       	LDB	RH0,RL2		; Get LSB
 4181/2382 : B20C                       	RRCB	RH0,#1		; Shift right with last bit
 4182/2384 : A00A                       	LDB	RL2,RH0		; Re-save it
 4183/2386 : A010                       	LDB	RH0,RH1		; Get underflow
 4184/2388 : B20C                       	RRCB	RH0,#1		; Shift right with last bit
 4185/238A : A001                       	LDB	RH1,RH0		; Re-save underflow
 4186/238C : 5E08 236C                  	JP	SHRLP		; More bits to do
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 71 - 2023/10/12 18時22分27秒


 4187/2390 :                            ;
 4188/2390 :                            UNITY:
 4189/2390 : 00 00 00 81                	DB	 000H,000H,000H,081H	; 1.00000
 4190/2394 :                            ;
 4191/2394 :                            LOGTAB:
 4192/2394 : 03                         	DB	3			; Table used by LOG
 4193/2395 : AA 56 19 80                	DB	0AAH,056H,019H,080H	; 0.59898
 4194/2399 : F1 22 76 80                	DB	0F1H,022H,076H,080H	; 0.96147
 4195/239D : 45 AA 38 82                	DB	045H,0AAH,038H,082H	; 2.88539
 4196/23A1 :                            ;
 4197/23A1 :                            	ALIGN	2
 4198/23A2 :                            LOG:
 4199/23A2 : 5F00 25E8                  	CALL	TSTSGN		; Test sign of value
 4200/23A6 : 8400                       	ORB	RH0,RH0
 4201/23A8 : 8D83                       	RESFLG	C
 4202/23AA : 5E04 0DEA                  	JP	PE,FCERR	; ?FC Error if <= zero
 4203/23AE : 2103 8147                  	LD	R3,#FPEXP	; Point to exponent
 4204/23B2 : 2030                       	LDB	RH0,@R3		; Get exponent
 4205/23B4 : 2101 8035                  	LD	R1,#8035H	; BCDE = SQR(1/2)
 4206/23B8 : 2102 04F3                  	LD	R2,#04F3H
 4207/23BC : 8210                       	SUBB	RH0,RH1		; Scale value to be < 1
 4208/23BE : 8C81                       	LDCTLB	RL0,FLAGS
 4209/23C0 : 93F0                       	PUSH	@R15,R0		; Save scale factor
 4210/23C2 : 2E31                       	LDB	@R3,RH1		; Save new exponent
 4211/23C4 : 93F2                       	PUSH	@R15,R2		; Save SQR(1/2)
 4212/23C6 : 93F1                       	PUSH	@R15,R1
 4213/23C8 : 5F00 21C2                  	CALL	FPADD		; Add SQR(1/2) to value
 4214/23CC : 97F1                       	POP	R1,@R15		; Restore SQR(1/2)
 4215/23CE : 97F2                       	POP	R2,@R15
 4216/23D0 : A810                       	INCB	RH1,#1		; Make it SQR(2)
 4217/23D2 : 5F00 24AA                  	CALL	DVBCDE		; Divide by SQR(2)
 4218/23D6 : 2103 2390                  	LD	R3,#UNITY	; Point to 1.
 4219/23DA : 5F00 21B4                  	CALL	SUBPHL		; Subtract FPREG from 1
 4220/23DE : 2103 2394                  	LD	R3,#LOGTAB	; Coefficient table
 4221/23E2 : 5F00 2C08                  	CALL	SUMSER		; Evaluate sum of series
 4222/23E6 : 2101 8080                  	LD	R1,#8080H	; BCDE = -0.5
 4223/23EA : 2102 0000                  	LD	R2,#0000H
 4224/23EE : 5F00 21C2                  	CALL	FPADD		; Subtract 0.5 from FPREG
 4225/23F2 : 97F0                       	POP	R0,@R15		; Restore scale factor
 4226/23F4 : 8C89                       	LDCTLB	FLAGS,RL0
 4227/23F6 : 5F00 28D6                  	CALL	RSCALE		; Re-scale number
 4228/23FA :                            MULLN2:
 4229/23FA : 2101 8031                  	LD	R1,#8031H	; BCDE = Ln(2)
 4230/23FE : 2102 7218                  	LD	R2,#7218H
 4231/2402 : E802                       	JR	FPMULT		; Skip "POP BC" and "POP DE"
 4232/2404 :                            ;
 4233/2404 :                            MULT:
 4234/2404 : 97F1                       	POP	R1,@R15		; Get number from stack
 4235/2406 : 97F2                       	POP	R2,@R15
 4236/2408 :                            FPMULT:
 4237/2408 : 5F00 25E8                  	CALL	TSTSGN		; Test sign of FPREG
 4238/240C : 9E06                       	RET	Z		; Return zero if zero
 4239/240E : CB00                       	LDB	RL3,#0		; Flag add exponents
 4240/2410 : 5F00 2570                  	CALL	ADDEXP		; Add exponents
 4241/2414 : A090                       	LDB	RH0,RL1		; Get MSB of multiplier
 4242/2416 : 6E00 8159                  	LDB	(MULVAL),RH0	; Save MSB of multiplier
 4243/241A : AD23                       	EX	R3,R2
 4244/241C : 6F03 815A                  	LD	(MULVAL+1),R3	; Save rest of multiplier
 4245/2420 : 2101 0000                  	LD	R1,#0		; Partial product (BCDE) = zero
 4246/2424 : A012                       	LDB	RH2,RH1
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 72 - 2023/10/12 18時22分27秒


 4247/2426 : A01A                       	LDB	RL2,RH1
 4248/2428 : 2103 2262                  	LD	R3,#BNORM	; Address of normalise
 4249/242C : 93F3                       	PUSH	@R15,R3		; Save for return
 4250/242E : 2103 243A                  	LD	R3,#MULT8	; Address of 8 bit multiply
 4251/2432 : 93F3                       	PUSH	@R15,R3		; Save for NMSB,MSB
 4252/2434 : 93F3                       	PUSH	@R15,R3		;
 4253/2436 : 2103 8144                  	LD	R3,#FPREG	; Point to number
 4254/243A :                            MULT8:
 4255/243A : 2030                       	LDB	RH0,@R3		; Get LSB of number
 4256/243C : 8CC1                       	LDCTLB	RL4,FLAGS
 4257/243E : A930                       	INC	R3		; Point to NMSB
 4258/2440 : 8CC9                       	LDCTLB	FLAGS,RL4
 4259/2442 : 8400                       	ORB	RH0,RH0
 4260/2444 : 8D83                       	RESFLG	C		; Test LSB
 4261/2446 : 5E06 248C                  	JP	Z,BYTSFT	; Zero - shift to next byte
 4262/244A : 93F3                       	PUSH	@R15,R3		; Save address of number
 4263/244C : CB08                       	LDB	RL3,#8		; 8 bits to multiply by
 4264/244E :                            MUL8LP:
 4265/244E : B20C                       	RRCB	RH0,#1		; Shift LSB right
 4266/2450 : A003                       	LDB	RH3,RH0		; Save LSB
 4267/2452 : A090                       	LDB	RH0,RL1		; Get MSB
 4268/2454 : 5E0F 246A                  	JP	NC,NOMADD	; Bit was zero - Don't add
 4269/2458 : 93F3                       	PUSH	@R15,R3		; Save LSB and count
 4270/245A : 6103 815A                  	LD	R3,(MULVAL+1)	; Get LSB and NMSB
 4271/245E : 8123                       	ADD	R3,R2		; Add NMSB and LSB
 4272/2460 : AD23                       	EX	R3,R2		; Leave sum in DE
 4273/2462 : 97F3                       	POP	R3,@R15		; Restore MSB and count
 4274/2464 : 6000 8159                  	LDB	RH0,(MULVAL)	; Get MSB of multiplier
 4275/2468 : B490                       	ADCB	RH0,RL1		; Add MSB
 4276/246A :                            NOMADD:
 4277/246A : B20C                       	RRCB	RH0,#1		; Shift MSB right
 4278/246C : A009                       	LDB	RL1,RH0		; Re-save MSB
 4279/246E : A020                       	LDB	RH0,RH2		; Get NMSB
 4280/2470 : B20C                       	RRCB	RH0,#1		; Shift NMSB right
 4281/2472 : A002                       	LDB	RH2,RH0		; Re-save NMSB
 4282/2474 : A0A0                       	LDB	RH0,RL2		; Get LSB
 4283/2476 : B20C                       	RRCB	RH0,#1		; Shift LSB right
 4284/2478 : A00A                       	LDB	RL2,RH0		; Re-save LSB
 4285/247A : A010                       	LDB	RH0,RH1		; Get VLSB
 4286/247C : B20C                       	RRCB	RH0,#1		; Shift VLSB right
 4287/247E : A001                       	LDB	RH1,RH0		; Re-save VLSB
 4288/2480 : AAB0                       	DECB	RL3,#1		; Count bits multiplied
 4289/2482 : A030                       	LDB	RH0,RH3		; Get LSB of multiplier
 4290/2484 : 5E0E 244E                  	JP	NZ,MUL8LP	; More - Do it
 4291/2488 :                            POPHRT:
 4292/2488 : 97F3                       	POP	R3,@R15		; Restore address of number
 4293/248A : 9E08                       	RET
 4294/248C :                            ;
 4295/248C :                            BYTSFT:
 4296/248C : A0A1                       	LDB	RH1,RL2		; Shift partial product left
 4297/248E : A02A                       	LDB	RL2,RH2
 4298/2490 : A092                       	LDB	RH2,RL1
 4299/2492 : A009                       	LDB	RL1,RH0
 4300/2494 : 9E08                       	RET
 4301/2496 :                            ;
 4302/2496 :                            DIV10:
 4303/2496 : 5F00 2646                  	CALL	STAKFP		; Save FPREG on stack
 4304/249A : 2101 8420                  	LD	R1,#8420H	; BCDE = 10.
 4305/249E : 2102 0000                  	LD	R2,#0000H
 4306/24A2 : 5F00 2664                  	CALL	FPBCDE		; Move 10 to FPREG
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 73 - 2023/10/12 18時22分27秒


 4307/24A6 :                            ;
 4308/24A6 :                            DIV:
 4309/24A6 : 97F1                       	POP	R1,@R15		; Get number from stack
 4310/24A8 : 97F2                       	POP	R2,@R15
 4311/24AA :                            DVBCDE:
 4312/24AA : 5F00 25E8                  	CALL	TSTSGN		; Test sign of FPREG
 4313/24AE : 5E06 04D4                  	JP	Z,DZERR		; Error if division by zero
 4314/24B2 : CBFF                       	LDB	RL3,#-1		; Flag subtract exponents
 4315/24B4 : 5F00 2570                  	CALL	ADDEXP		; Subtract exponents
 4316/24B8 : 2830                       	INCB	@R3,#1		; Add 2 to exponent to adjust
 4317/24BA : 2830                       	INCB	@R3,#1
 4318/24BC : 8CC1                       	LDCTLB	RL4,FLAGS
 4319/24BE : AB30                       	DEC	R3,#1		; Point to MSB
 4320/24C0 : 8CC9                       	LDCTLB	FLAGS,RL4
 4321/24C2 : 2030                       	LDB	RH0,@R3		; Get MSB of dividend
 4322/24C4 : 6E00 8065                  	LDB	(DIV3),RH0	; Save for subtraction
 4323/24C8 : 8CC1                       	LDCTLB	RL4,FLAGS
 4324/24CA : AB30                       	DEC	R3,#1
 4325/24CC : 8CC9                       	LDCTLB	FLAGS,RL4
 4326/24CE : 2030                       	LDB	RH0,@R3		; Get NMSB of dividend
 4327/24D0 : 6E00 805D                  	LDB	(DIV2),RH0	; Save for subtraction
 4328/24D4 : 8CC1                       	LDCTLB	RL4,FLAGS
 4329/24D6 : AB30                       	DEC	R3,#1
 4330/24D8 : 8CC9                       	LDCTLB	FLAGS,RL4
 4331/24DA : 2030                       	LDB	RH0,@R3		; Get MSB of dividend
 4332/24DC : 6E00 8055                  	LDB	(DIV1),RH0	; Save for subtraction
 4333/24E0 : A091                       	LDB	RH1,RL1		; Get MSB
 4334/24E2 : AD23                       	EX	R3,R2		; NMSB,LSB to HL
 4335/24E4 : 8800                       	XORB	RH0,RH0
 4336/24E6 : 8D83                       	RESFLG	C
 4337/24E8 : A009                       	LDB	RL1,RH0		; Clear MSB of quotient
 4338/24EA : A002                       	LDB	RH2,RH0		; Clear NMSB of quotient
 4339/24EC : A00A                       	LDB	RL2,RH0		; Clear LSB of quotient
 4340/24EE : 6E00 806B                  	LDB	(DIV4),RH0	; Clear overflow count
 4341/24F2 :                            DIVLP:
 4342/24F2 : 93F3                       	PUSH	@R15,R3		; Save divisor
 4343/24F4 : 93F1                       	PUSH	@R15,R1
 4344/24F6 : A0B0                       	LDB	RH0,RL3		; Get LSB of number
 4345/24F8 : 5F00 8054                  	CALL	DIVSUP		; Subt' divisor from dividend
 4346/24FC : CC00                       	LDB	RL4,#0
 4347/24FE : B6C0                       	SBCB	RH0,RL4		; Count for overflows
 4348/2500 : 8D85                       	COMFLG	C
 4349/2502 : 5E0F 2516                  	JP	NC,RESDIV	; Restore divisor if borrow
 4350/2506 : 6E00 806B                  	LDB	(DIV4),RH0	; Re-save overflow count
 4351/250A : 97F0                       	POP	R0,@R15		; Scrap divisor
 4352/250C : 8C89                       	LDCTLB	FLAGS,RL0
 4353/250E : 97F0                       	POP	R0,@R15
 4354/2510 : 8C89                       	LDCTLB	FLAGS,RL0
 4355/2512 : 8D81                       	SETFLG	C		; Set carry to
 4356/2514 : E802                       	JR	RESDIV1		; Skip "POP BC" and "POP HL"
 4357/2516 :                            ;
 4358/2516 :                            RESDIV:
 4359/2516 : 97F1                       	POP	R1,@R15		; Restore divisor
 4360/2518 : 97F3                       	POP	R3,@R15
 4361/251A :                            RESDIV1:
 4362/251A : A090                       	LDB	RH0,RL1		; Get MSB of quotient
 4363/251C : A800                       	INCB	RH0,#1
 4364/251E : AA00                       	DECB	RH0,#1
 4365/2520 : 8CC1                       	LDCTLB	RL4,FLAGS
 4366/2522 : B20C                       	RRCB	RH0,#1		; Bit 0 to bit 7
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 74 - 2023/10/12 18時22分27秒


 4367/2524 : 8CC9                       	LDCTLB	FLAGS,RL4
 4368/2526 : 5E05 22C8                  	JP	MI,RONDB	; Done - Normalise result
 4369/252A : B208                       	RLCB	RH0,#1		; Restore carry
 4370/252C : A0A0                       	LDB	RH0,RL2		; Get LSB of quotient
 4371/252E : B208                       	RLCB	RH0,#1		; Double it
 4372/2530 : A00A                       	LDB	RL2,RH0		; Put it back
 4373/2532 : A020                       	LDB	RH0,RH2		; Get NMSB of quotient
 4374/2534 : B208                       	RLCB	RH0,#1		; Double it
 4375/2536 : A002                       	LDB	RH2,RH0		; Put it back
 4376/2538 : A090                       	LDB	RH0,RL1		; Get MSB of quotient
 4377/253A : B208                       	RLCB	RH0,#1		; Double it
 4378/253C : A009                       	LDB	RL1,RH0		; Put it back
 4379/253E : 8133                       	ADD	R3,R3		; Double NMSB,LSB of divisor
 4380/2540 : A010                       	LDB	RH0,RH1		; Get MSB of divisor
 4381/2542 : B208                       	RLCB	RH0,#1		; Double it
 4382/2544 : A001                       	LDB	RH1,RH0		; Put it back
 4383/2546 : 6000 806B                  	LDB	RH0,(DIV4)	; Get VLSB of quotient
 4384/254A : B208                       	RLCB	RH0,#1		; Double it
 4385/254C : 6E00 806B                  	LDB	(DIV4),RH0	; Put it back
 4386/2550 : A090                       	LDB	RH0,RL1		; Get MSB of quotient
 4387/2552 : 8420                       	ORB	RH0,RH2		; Merge NMSB
 4388/2554 : 8D83                       	RESFLG	C
 4389/2556 : 84A0                       	ORB	RH0,RL2		; Merge LSB
 4390/2558 : 8D83                       	RESFLG	C
 4391/255A : 5E0E 24F2                  	JP	NZ,DIVLP	; Not done - Keep dividing
 4392/255E : 93F3                       	PUSH	@R15,R3		; Save divisor
 4393/2560 : 2103 8147                  	LD	R3,#FPEXP	; Point to exponent
 4394/2564 : 2A30                       	DECB	@R3		; Divide by 2
 4395/2566 : 97F3                       	POP	R3,@R15		; Restore divisor
 4396/2568 : 5E0E 24F2                  	JP	NZ,DIVLP	; Ok - Keep going
 4397/256C : 5E08 04E4                  	JP	OVERR		; Overflow error
 4398/2570 :                            ;
 4399/2570 :                            ADDEXP:
 4400/2570 : A010                       	LDB	RH0,RH1		; Get exponent of dividend
 4401/2572 : 8400                       	ORB	RH0,RH0
 4402/2574 : 8D83                       	RESFLG	C		; Test it
 4403/2576 : 5E06 25B8                  	JP	Z,OVTST3	; Zero - Result zero
 4404/257A : A0B0                       	LDB	RH0,RL3		; Get add/subtract flag
 4405/257C : 2103 8147                  	LD	R3,#FPEXP	; Point to exponent
 4406/2580 : 0830                       	XORB	RH0,@R3
 4407/2582 :                            ;	RESFLG	C		; Add or subtract it
 4408/2582 : 8010                       	ADDB	RH0,RH1		; Add the other exponent
 4409/2584 : A001                       	LDB	RH1,RH0		; Save new exponent
 4410/2586 : B20C                       	RRCB	RH0,#1		; Test exponent for overflow
 4411/2588 : 8810                       	XORB	RH0,RH1
 4412/258A :                            ;	RESFLG	C
 4413/258A : A010                       	LDB	RH0,RH1		; Get exponent
 4414/258C : 5E0D 25B4                  	JP	PL,OVTST2	; Positive - Test for overflow
 4415/2590 : 0000 8080                  	ADDB	RH0,#80H	; Add excess 128
 4416/2594 : 2E30                       	LDB	@R3,RH0		; Save new exponent
 4417/2596 : 5E06 2488                  	JP	Z,POPHRT	; Zero - Result zero
 4418/259A : 5F00 26B6                  	CALL	SIGNS		; Set MSBs and sign of result
 4419/259E : 2E30                       	LDB	@R3,RH0		; Save new exponent
 4420/25A0 : 8CC1                       	LDCTLB	RL4,FLAGS
 4421/25A2 : AB30                       	DEC	R3,#1		; Point to MSB
 4422/25A4 : 8CC9                       	LDCTLB	FLAGS,RL4
 4423/25A6 : 9E08                       	RET
 4424/25A8 :                            ;
 4425/25A8 :                            OVTST1:
 4426/25A8 : 5F00 25E8                  	CALL	TSTSGN		; Test sign of FPREG
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 75 - 2023/10/12 18時22分27秒


 4427/25AC : 8CC1                       	LDCTLB	RL4,FLAGS
 4428/25AE : 8C00                       	COMB	RH0		; Invert sign
 4429/25B0 : 8CC9                       	LDCTLB	FLAGS,RL4
 4430/25B2 : 97F3                       	POP	R3,@R15		; Clean up stack
 4431/25B4 :                            OVTST2:
 4432/25B4 : 8400                       	ORB	RH0,RH0
 4433/25B6 : 8D83                       	RESFLG	C		; Test if new exponent zero
 4434/25B8 :                            OVTST3:
 4435/25B8 : 97F3                       	POP	R3,@R15		; Clear off return address
 4436/25BA : 5E0D 228C                  	JP	PL,RESZER	; Result zero
 4437/25BE : 5E08 04E4                  	JP	OVERR		; Overflow error
 4438/25C2 :                            ;
 4439/25C2 :                            MLSP10:
 4440/25C2 : 5F00 267E                  	CALL	BCDEFP		; Move FPREG to BCDE
 4441/25C6 : A010                       	LDB	RH0,RH1		; Get exponent
 4442/25C8 : 8400                       	ORB	RH0,RH0
 4443/25CA : 8D83                       	RESFLG	C		; Is it zero?
 4444/25CC : 9E06                       	RET	Z		; Yes - Result is zero
 4445/25CE : 0000 0202                  	ADDB	RH0,#2		; Multiply by 4
 4446/25D2 : 5E07 04E4                  	JP	C,OVERR		; Overflow - ?OV Error
 4447/25D6 : A001                       	LDB	RH1,RH0		; Re-save exponent
 4448/25D8 : 5F00 21C2                  	CALL	FPADD		; Add BCDE to FPREG (Times 5)
 4449/25DC : 2103 8147                  	LD	R3,#FPEXP	; Point to exponent
 4450/25E0 : 2830                       	INCB	@R3,#1		; Double number (Times 10)
 4451/25E2 : 9E0E                       	RET	NZ		; Ok - Return
 4452/25E4 : 5E08 04E4                  	JP	OVERR		; Overflow error
 4453/25E8 :                            ;
 4454/25E8 :                            TSTSGN:
 4455/25E8 : 6000 8147                  	LDB	RH0,(FPEXP)	; Get sign of FPREG
 4456/25EC : 8400                       	ORB	RH0,RH0
 4457/25EE : 8D83                       	RESFLG	C
 4458/25F0 : 9E06                       	RET	Z		; RETurn if number is zero
 4459/25F2 : 6000 8146                  	LDB	RH0,(FPREG+2)	; Get MSB of FPREG
 4460/25F6 : 0A00 2F2F                  	CPB	RH0,#02FH	; Test sign
 4461/25FA : E803                       	JR	RETREL1
 4462/25FC :                            RETREL:
 4463/25FC : 8CC1                       	LDCTLB	RL4,FLAGS
 4464/25FE : 8C00                       	COMB	RH0		; Invert sign
 4465/2600 : 8CC9                       	LDCTLB	FLAGS,RL4
 4466/2602 :                            RETREL1:
 4467/2602 : B208                       	RLCB	RH0,#1		; Sign bit to carry
 4468/2604 :                            FLGDIF:
 4469/2604 : B600                       	SBCB	RH0,RH0		; Carry to all bits of A
 4470/2606 : 9E0E                       	RET	NZ		; Return -1 if negative
 4471/2608 : A800                       	INCB	RH0,#1		; Bump to +1
 4472/260A : 9E08                       	RET			; Positive - Return +1
 4473/260C :                            ;
 4474/260C :                            SGN:
 4475/260C : 5F00 25E8                  	CALL	TSTSGN		; Test sign of FPREG
 4476/2610 :                            FLGREL:
 4477/2610 : C188                       	LDB	RH1,#80H+8	; 8 bit integer in exponent
 4478/2612 : 2102 0000                  	LD	R2,#0		; Zero NMSB and LSB
 4479/2616 :                            RETINT:
 4480/2616 : 2103 8147                  	LD	R3,#FPEXP	; Point to exponent
 4481/261A : A009                       	LDB	RL1,RH0		; CDE = MSB,NMSB and LSB
 4482/261C : 2E31                       	LDB	@R3,RH1		; Save exponent
 4483/261E : C100                       	LDB	RH1,#0		; CDE = integer to normalise
 4484/2620 : 8CC1                       	LDCTLB	RL4,FLAGS
 4485/2622 : A930                       	INC	R3
 4486/2624 : 8CC9                       	LDCTLB	FLAGS,RL4	; Point to sign of result
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 76 - 2023/10/12 18時22分27秒


 4487/2626 : 0C35 8080                  	LDB	@R3,#80H	; Set sign of result
 4488/262A : B208                       	RLCB	RH0,#1		; Carry = sign of integer
 4489/262C : 5E08 225C                  	JP	CONPOS		; Set sign of result
 4490/2630 :                            ;
 4491/2630 :                            ABS:
 4492/2630 : 5F00 25E8                  	CALL	TSTSGN		; Test sign of FPREG
 4493/2634 : 9E0D                       	RET	PL		; Return if positive
 4494/2636 :                            INVSGN:
 4495/2636 : 2103 8146                  	LD	R3,#FPREG+2	; Point to MSB
 4496/263A : 2030                       	LDB	RH0,@R3		; Get sign of mantissa
 4497/263C : 0800 8080                  	XORB	RH0,#80H	; Invert sign of mantissa
 4498/2640 : 8D83                       	RESFLG	C
 4499/2642 : 2E30                       	LDB	@R3,RH0		; Re-save sign of mantissa
 4500/2644 : 9E08                       	RET
 4501/2646 :                            ;
 4502/2646 :                            STAKFP:
 4503/2646 : AD23                       	EX	R3,R2		; Save code string address
 4504/2648 : 6103 8144                  	LD	R3,(FPREG)	; LSB,NLSB of FPREG
 4505/264C : ACB3                       	EXB	RH3,RL3
 4506/264E : 2DF3                       	EX	@R15,R3		; Stack them,get return
 4507/2650 : 93F3                       	PUSH	@R15,R3		; Re-save return
 4508/2652 : 6103 8146                  	LD	R3,(FPREG+2)	; MSB and exponent of FPREG
 4509/2656 : ACB3                       	EXB	RH3,RL3
 4510/2658 : 2DF3                       	EX	@R15,R3		; Stack them,get return
 4511/265A : 93F3                       	PUSH	@R15,R3		; Re-save return
 4512/265C : AD23                       	EX	R3,R2		; Restore code string address
 4513/265E : 9E08                       	RET
 4514/2660 :                            ;
 4515/2660 :                            PHLTFP:
 4516/2660 : 5F00 2682                  	CALL	LOADFP		; Number at HL to BCDE
 4517/2664 :                            FPBCDE:
 4518/2664 : AD23                       	EX	R3,R2		; Save code string address
 4519/2666 : ACB3                       	EXB	RH3,RL3
 4520/2668 : 6F03 8144                  	LD	(FPREG),R3	; Save LSB,NLSB of number
 4521/266C : ACB3                       	EXB	RH3,RL3
 4522/266E : A013                       	LDB	RH3,RH1		; Exponent of number
 4523/2670 : A09B                       	LDB	RL3,RL1		; MSB of number
 4524/2672 : ACB3                       	EXB	RH3,RL3
 4525/2674 : 6F03 8146                  	LD	(FPREG+2),R3	; Save MSB and exponent
 4526/2678 : ACB3                       	EXB	RH3,RL3
 4527/267A : AD23                       	EX	R3,R2		; Restore code string address
 4528/267C : 9E08                       	RET
 4529/267E :                            ;
 4530/267E :                            BCDEFP:
 4531/267E : 2103 8144                  	LD	R3,#FPREG	; Point to FPREG
 4532/2682 :                            LOADFP:
 4533/2682 : 203A                       	LDB	RL2,@R3		; Get LSB of number
 4534/2684 : 8CC1                       	LDCTLB	RL4,FLAGS
 4535/2686 : A930                       	INC	R3
 4536/2688 : 2032                       	LDB	RH2,@R3		; Get NMSB of number
 4537/268A : A930                       	INC	R3
 4538/268C : 2039                       	LDB	RL1,@R3		; Get MSB of number
 4539/268E : A930                       	INC	R3
 4540/2690 : 8CC9                       	LDCTLB	FLAGS,RL4
 4541/2692 : 2031                       	LDB	RH1,@R3		; Get exponent of number
 4542/2694 :                            INCHL:
 4543/2694 : 8CC1                       	LDCTLB	RL4,FLAGS
 4544/2696 : A930                       	INC	R3		; Used for conditional "INC HL"
 4545/2698 : 8CC9                       	LDCTLB	FLAGS,RL4
 4546/269A : 9E08                       	RET
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 77 - 2023/10/12 18時22分27秒


 4547/269C :                            ;
 4548/269C :                            FPTHL:
 4549/269C : 2102 8144                  	LD	R2,#FPREG	; Point to FPREG
 4550/26A0 :                            DETHL4:
 4551/26A0 : C104                       	LDB	RH1,#4		; 4 bytes to move
 4552/26A2 :                            DETHLB:
 4553/26A2 : 2020                       	LDB	RH0,@R2		; Get source
 4554/26A4 : 2E30                       	LDB	@R3,RH0		; Save destination
 4555/26A6 : 8CC1                       	LDCTLB	RL4,FLAGS
 4556/26A8 : A920                       	INC	R2		; Next source
 4557/26AA : A930                       	INC	R3		; Next destination
 4558/26AC : 8CC9                       	LDCTLB	FLAGS,RL4
 4559/26AE : AA10                       	DECB	RH1,#1		; Count bytes
 4560/26B0 : 5E0E 26A2                  	JP	NZ,DETHLB	; Loop if more
 4561/26B4 : 9E08                       	RET
 4562/26B6 :                            ;
 4563/26B6 :                            SIGNS:
 4564/26B6 : 2103 8146                  	LD	R3,#FPREG+2	; Point to MSB of FPREG
 4565/26BA : 2030                       	LDB	RH0,@R3		; Get MSB
 4566/26BC : B200                       	RLB	RH0,#1		; Old sign to carry
 4567/26BE : 8D81                       	SETFLG	C		; Set MSBit
 4568/26C0 : B20C                       	RRCB	RH0,#1		; Set MSBit of MSB
 4569/26C2 : 2E30                       	LDB	@R3,RH0		; Save new MSB
 4570/26C4 : 8D85                       	COMFLG	C		; Complement sign
 4571/26C6 : B20C                       	RRCB	RH0,#1		; Old sign to carry
 4572/26C8 : 8CC1                       	LDCTLB	RL4,FLAGS
 4573/26CA : A930                       	INC	R3
 4574/26CC : A930                       	INC	R3
 4575/26CE : 8CC9                       	LDCTLB	FLAGS,RL4
 4576/26D0 : 2E30                       	LDB	@R3,RH0		; Set sign of result
 4577/26D2 : A090                       	LDB	RH0,RL1		; Get MSB
 4578/26D4 : B200                       	RLB	RH0,#1		; Old sign to carry
 4579/26D6 : 8D81                       	SETFLG	C		; Set MSBit
 4580/26D8 : B20C                       	RRCB	RH0,#1		; Set MSBit of MSB
 4581/26DA : A009                       	LDB	RL1,RH0		; Save MSB
 4582/26DC : B20C                       	RRCB	RH0,#1
 4583/26DE : 0830                       	XORB	RH0,@R3
 4584/26E0 : 8D83                       	RESFLG	C		; New sign of result
 4585/26E2 : 9E08                       	RET
 4586/26E4 :                            ;
 4587/26E4 :                            CMPNUM:
 4588/26E4 : A010                       	LDB	RH0,RH1		; Get exponent of number
 4589/26E6 : 8400                       	ORB	RH0,RH0
 4590/26E8 : 8D83                       	RESFLG	C
 4591/26EA : 5E06 25E8                  	JP	Z,TSTSGN	; Zero - Test sign of FPREG
 4592/26EE : 2103 25FC                  	LD	R3,#RETREL	; Return relation routine
 4593/26F2 : 93F3                       	PUSH	@R15,R3		; Save for return
 4594/26F4 : 5F00 25E8                  	CALL	TSTSGN		; Test sign of FPREG
 4595/26F8 : A090                       	LDB	RH0,RL1		; Get MSB of number
 4596/26FA : 9E06                       	RET	Z		; FPREG zero - Number's MSB
 4597/26FC : 2103 8146                  	LD	R3,#FPREG+2	; MSB of FPREG
 4598/2700 : 0830                       	XORB	RH0,@R3
 4599/2702 : 8D83                       	RESFLG	C		; Combine signs
 4600/2704 : A090                       	LDB	RH0,RL1		; Get MSB of number
 4601/2706 : 9E05                       	RET	MI		; Exit if signs different
 4602/2708 : 5F00 2714                  	CALL	CMPFP		; Compare FP numbers
 4603/270C : B20C                       	RRCB	RH0,#1		; Get carry to sign
 4604/270E : 8890                       	XORB	RH0,RL1
 4605/2710 : 8D83                       	RESFLG	C		; Combine with MSB of number
 4606/2712 : 9E08                       	RET
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 78 - 2023/10/12 18時22分27秒


 4607/2714 :                            ;
 4608/2714 :                            CMPFP:
 4609/2714 : 8CC1                       	LDCTLB	RL4,FLAGS
 4610/2716 : A930                       	INC	R3		; Point to exponent
 4611/2718 : 8CC9                       	LDCTLB	FLAGS,RL4
 4612/271A : A010                       	LDB	RH0,RH1		; Get exponent
 4613/271C : 0A30                       	CPB	RH0,@R3		; Compare exponents
 4614/271E : 9E0E                       	RET	NZ		; Different
 4615/2720 : 8CC1                       	LDCTLB	RL4,FLAGS
 4616/2722 : AB30                       	DEC	R3,#1		; Point to MBS
 4617/2724 : 8CC9                       	LDCTLB	FLAGS,RL4
 4618/2726 : A090                       	LDB	RH0,RL1		; Get MSB
 4619/2728 : 0A30                       	CPB	RH0,@R3		; Compare MSBs
 4620/272A : 9E0E                       	RET	NZ		; Different
 4621/272C : 8CC1                       	LDCTLB	RL4,FLAGS
 4622/272E : AB30                       	DEC	R3,#1		; Point to NMSB
 4623/2730 : 8CC9                       	LDCTLB	FLAGS,RL4
 4624/2732 : A020                       	LDB	RH0,RH2		; Get NMSB
 4625/2734 : 0A30                       	CPB	RH0,@R3		; Compare NMSBs
 4626/2736 : 9E0E                       	RET	NZ		; Different
 4627/2738 : 8CC1                       	LDCTLB	RL4,FLAGS
 4628/273A : AB30                       	DEC	R3,#1		; Point to LSB
 4629/273C : 8CC9                       	LDCTLB	FLAGS,RL4
 4630/273E : A0A0                       	LDB	RH0,RL2		; Get LSB
 4631/2740 : 0230                       	SUBB	RH0,@R3		; Compare LSBs
 4632/2742 : 9E0E                       	RET	NZ		; Different
 4633/2744 : 97F3                       	POP	R3,@R15		; Drop RETurn
 4634/2746 : 97F3                       	POP	R3,@R15		; Drop another RETurn
 4635/2748 : 9E08                       	RET
 4636/274A :                            ;
 4637/274A :                            FPINT:
 4638/274A : A001                       	LDB	RH1,RH0		; <- Move
 4639/274C : A009                       	LDB	RL1,RH0		; <- exponent
 4640/274E : A002                       	LDB	RH2,RH0		; <- to all
 4641/2750 : A00A                       	LDB	RL2,RH0		; <- bits
 4642/2752 : 8400                       	ORB	RH0,RH0
 4643/2754 : 8D83                       	RESFLG	C		; Test exponent
 4644/2756 : 9E06                       	RET	Z		; Zero - Return zero
 4645/2758 : 93F3                       	PUSH	@R15,R3		; Save pointer to number
 4646/275A : 5F00 267E                  	CALL	BCDEFP		; Move FPREG to BCDE
 4647/275E : 5F00 26B6                  	CALL	SIGNS		; Set MSBs & sign of result
 4648/2762 : 0830                       	XORB	RH0,@R3
 4649/2764 : 8D83                       	RESFLG	C		; Combine with sign of FPREG
 4650/2766 : A003                       	LDB	RH3,RH0		; Save combined signs
 4651/2768 : ED02                       	JR	PL,FPINT1
 4652/276A : 5F00 278C                  	CALL	DCBCDE		; Negative - Decrement BCDE
 4653/276E :                            FPINT1:
 4654/276E : C098                       	LDB	RH0,#80H+24	; 24 bits
 4655/2770 : 8210                       	SUBB	RH0,RH1		; Bits to shift
 4656/2772 : 5F00 2350                  	CALL	SCALE		; Shift BCDE
 4657/2776 : A030                       	LDB	RH0,RH3		; Get combined sign
 4658/2778 : B208                       	RLCB	RH0,#1		; Sign to carry
 4659/277A : EF02                       	JR	NC,FPINT2
 4660/277C : 5F00 22EE                  	CALL	FPROND		; Negative - Round number up
 4661/2780 :                            FPINT2:
 4662/2780 : C100                       	LDB	RH1,#0		; Zero exponent
 4663/2782 : EF02                       	JR	NC,FPINT3
 4664/2784 : 5F00 2324                  	CALL	COMPL		; If negative make positive
 4665/2788 :                            FPINT3:
 4666/2788 : 97F3                       	POP	R3,@R15		; Restore pointer to number
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 79 - 2023/10/12 18時22分27秒


 4667/278A : 9E08                       	RET
 4668/278C :                            ;
 4669/278C :                            DCBCDE:
 4670/278C : 8CC1                       	LDCTLB	RL4,FLAGS
 4671/278E : AB20                       	DEC	R2,#1		; Decrement BCDE
 4672/2790 : 8CC9                       	LDCTLB	FLAGS,RL4
 4673/2792 : A020                       	LDB	RH0,RH2		; Test LSBs
 4674/2794 : 86A0                       	ANDB	RH0,RL2
 4675/2796 : 8D83                       	RESFLG	C
 4676/2798 : A800                       	INCB	RH0,#1
 4677/279A : 9E0E                       	RET	NZ		; Exit if LSBs not FFFF
 4678/279C : 8CC1                       	LDCTLB	RL4,FLAGS
 4679/279E : AB10                       	DEC	R1,#1		; Decrement MSBs
 4680/27A0 : 8CC9                       	LDCTLB	FLAGS,RL4
 4681/27A2 : 9E08                       	RET
 4682/27A4 :                            ;
 4683/27A4 :                            INT:
 4684/27A4 : 2103 8147                  	LD	R3,#FPEXP	; Point to exponent
 4685/27A8 : 2030                       	LDB	RH0,@R3		; Get exponent
 4686/27AA : 0A00 9898                  	CPB	RH0,#80H+24	; Integer accuracy only?
 4687/27AE : 6000 8144                  	LDB	RH0,(FPREG)	; Get LSB
 4688/27B2 : 9E0F                       	RET	NC		; Yes - Already integer
 4689/27B4 : 2030                       	LDB	RH0,@R3		; Get exponent
 4690/27B6 : 5F00 274A                  	CALL	FPINT		; F.P to integer
 4691/27BA : 0C35 9898                  	LDB	@R3,#80H+24	; Save 24 bit integer
 4692/27BE : A0A0                       	LDB	RH0,RL2		; Get LSB of number
 4693/27C0 : 8C81                       	LDCTLB	RL0,FLAGS
 4694/27C2 : 93F0                       	PUSH	@R15,R0		; Save LSB
 4695/27C4 : A090                       	LDB	RH0,RL1		; Get MSB of number
 4696/27C6 : B208                       	RLCB	RH0		; Sign to carry
 4697/27C8 : 5F00 225C                  	CALL	CONPOS		; Set sign of result
 4698/27CC : 97F0                       	POP	R0,@R15		; Restore LSB of number
 4699/27CE : 8C89                       	LDCTLB	FLAGS,RL0
 4700/27D0 : 9E08                       	RET
 4701/27D2 :                            ;
 4702/27D2 :                            MLDEBC:
 4703/27D2 : 2103 0000                  	LD	R3,#0		; Clear partial product
 4704/27D6 : A010                       	LDB	RH0,RH1		; Test multiplier
 4705/27D8 : 8490                       	ORB	RH0,RL1
 4706/27DA : 8D83                       	RESFLG	C
 4707/27DC : 9E06                       	RET	Z		; Return zero if zero
 4708/27DE : C010                       	LDB	RH0,#16		; 16 bits
 4709/27E0 :                            MLDBLP:
 4710/27E0 : 8133                       	ADD	R3,R3		; Shift P.P left
 4711/27E2 : 5E07 198C                  	JP	C,BSERR		; ?BS Error if overflow
 4712/27E6 : AD23                       	EX	R3,R2
 4713/27E8 : 8133                       	ADD	R3,R3		; Shift multiplier left
 4714/27EA : AD23                       	EX	R3,R2
 4715/27EC : 5E0F 27F6                  	JP	NC,NOMLAD	; Bit was zero - No add
 4716/27F0 : 8113                       	ADD	R3,R1		; Add multiplicand
 4717/27F2 : 5E07 198C                  	JP	C,BSERR		; ?BS Error if overflow
 4718/27F6 :                            NOMLAD:
 4719/27F6 : AA00                       	DECB	RH0,#1		; Count bits
 4720/27F8 : 5E0E 27E0                  	JP	NZ,MLDBLP	; More
 4721/27FC : 9E08                       	RET
 4722/27FE :                            ;
 4723/27FE :                            ASCTFP:
 4724/27FE : 0A00 2D2D                  	CPB	RH0,#'-'	; Negative?
 4725/2802 : 8C81                       	LDCTLB	RL0,FLAGS
 4726/2804 : 93F0                       	PUSH	@R15,R0		; Save it and flags
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 80 - 2023/10/12 18時22分27秒


 4727/2806 : 5E06 2818                  	JP	Z,CNVNUM	; Yes - Convert number
 4728/280A : 0A00 2B2B                  	CPB	RH0,#'+'	; Positive?
 4729/280E : 5E06 2818                  	JP	Z,CNVNUM	; Yes - Convert number
 4730/2812 : 8CC1                       	LDCTLB	RL4,FLAGS
 4731/2814 : AB30                       	DEC	R3,#1		; DEC 'cos GETCHR INCs
 4732/2816 : 8CC9                       	LDCTLB	FLAGS,RL4
 4733/2818 :                            CNVNUM:
 4734/2818 : 5F00 228C                  	CALL	RESZER		; Set result to zero
 4735/281C : A001                       	LDB	RH1,RH0		; Digits after point counter
 4736/281E : A002                       	LDB	RH2,RH0		; Sign of exponent
 4737/2820 : A00A                       	LDB	RL2,RH0		; Exponent of ten
 4738/2822 : 8CC1                       	LDCTLB	RL4,FLAGS
 4739/2824 : 8C00                       	COMB	RH0
 4740/2826 : 8CC9                       	LDCTLB	FLAGS,RL4
 4741/2828 : A009                       	LDB	RL1,RH0		; Before or after point flag
 4742/282A :                            MANLP:
 4743/282A : 5F00 0C96                  	CALL	GETCHR		; Get next character
 4744/282E : 5E07 28AC                  	JP	C,ADDIG		; Digit - Add to number
 4745/2832 : 0A00 2E2E                  	CPB	RH0,#'.'
 4746/2836 : 5E06 2862                  	JP	Z,DPOINT	; '.' - Flag point
 4747/283A : 0A00 4545                  	CPB	RH0,#'E'
 4748/283E : 5E0E 2868                  	JP	NZ,CONEXP	; Not 'E' - Scale number
 4749/2842 : 5F00 0C96                  	CALL	GETCHR		; Get next character
 4750/2846 : 5F00 1626                  	CALL	SGNEXP		; Get sign of exponent
 4751/284A :                            EXPLP:
 4752/284A : 5F00 0C96                  	CALL	GETCHR		; Get next character
 4753/284E : 5E07 28E6                  	JP	C,EDIGIT	; Digit - Add to exponent
 4754/2852 : A820                       	INCB	RH2,#1		; Is sign negative?
 4755/2854 : 5E0E 2868                  	JP	NZ,CONEXP	; No - Scale number
 4756/2858 : 8800                       	XORB	RH0,RH0
 4757/285A : 8D83                       	RESFLG	C
 4758/285C : 82A0                       	SUBB	RH0,RL2		; Negate exponent
 4759/285E : A00A                       	LDB	RL2,RH0		; And re-save it
 4760/2860 : A890                       	INCB	RL1,#1		; Flag end of number
 4761/2862 :                            DPOINT:
 4762/2862 : A890                       	INCB	RL1,#1		; Flag point passed
 4763/2864 : 5E06 282A                  	JP	Z,MANLP		; Zero - Get another digit
 4764/2868 :                            CONEXP:
 4765/2868 : 93F3                       	PUSH	@R15,R3		; Save code string address
 4766/286A : A0A0                       	LDB	RH0,RL2		; Get exponent
 4767/286C : 8210                       	SUBB	RH0,RH1		; Subtract digits after point
 4768/286E :                            SCALMI:
 4769/286E : E502                       	JR	MI,SCALMI1
 4770/2870 : 5F00 289A                  	CALL	SCALPL		; Positive - Multiply number
 4771/2874 :                            SCALMI1:
 4772/2874 : 5E0D 2886                  	JP	PL,ENDCON	; Positive - All done
 4773/2878 : 8C81                       	LDCTLB	RL0,FLAGS
 4774/287A : 93F0                       	PUSH	@R15,R0		; Save number of times to /10
 4775/287C : 5F00 2496                  	CALL	DIV10		; Divide by 10
 4776/2880 : 97F0                       	POP	R0,@R15		; Restore count
 4777/2882 : 8C89                       	LDCTLB	FLAGS,RL0
 4778/2884 : A800                       	INCB	RH0,#1		; Count divides
 4779/2886 :                            ;
 4780/2886 :                            ENDCON:
 4781/2886 : 5E0E 286E                  	JP	NZ,SCALMI	; More to do
 4782/288A : 97F2                       	POP	R2,@R15		; Restore code string address
 4783/288C : 97F0                       	POP	R0,@R15		; Restore sign of number
 4784/288E : 8C89                       	LDCTLB	FLAGS,RL0
 4785/2890 : EE02                       	JR	NZ,ENDCON1
 4786/2892 : 5F00 2636                  	CALL	INVSGN		; Negative - Negate number
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 81 - 2023/10/12 18時22分27秒


 4787/2896 :                            ENDCON1:
 4788/2896 : AD23                       	EX	R3,R2		; Code string address to HL
 4789/2898 : 9E08                       	RET
 4790/289A :                            ;
 4791/289A :                            SCALPL:
 4792/289A : 9E06                       	RET	Z		; Exit if no scaling needed
 4793/289C :                            MULTEN:
 4794/289C : 8C81                       	LDCTLB	RL0,FLAGS
 4795/289E : 93F0                       	PUSH	@R15,R0		; Save count
 4796/28A0 : 5F00 25C2                  	CALL	MLSP10		; Multiply number by 10
 4797/28A4 : 97F0                       	POP	R0,@R15		; Restore count
 4798/28A6 : 8C89                       	LDCTLB	FLAGS,RL0
 4799/28A8 : AA00                       	DECB	RH0,#1		; Count multiplies
 4800/28AA : 9E08                       	RET
 4801/28AC :                            ;
 4802/28AC :                            ADDIG:
 4803/28AC : 93F2                       	PUSH	@R15,R2		; Save sign of exponent
 4804/28AE : A002                       	LDB	RH2,RH0		; Save digit
 4805/28B0 : A010                       	LDB	RH0,RH1		; Get digits after point
 4806/28B2 : B490                       	ADCB	RH0,RL1		; Add one if after point
 4807/28B4 : A001                       	LDB	RH1,RH0		; Re-save counter
 4808/28B6 : 93F1                       	PUSH	@R15,R1		; Save point flags
 4809/28B8 : 93F3                       	PUSH	@R15,R3		; Save code string address
 4810/28BA : 93F2                       	PUSH	@R15,R2		; Save digit
 4811/28BC : 5F00 25C2                  	CALL	MLSP10		; Multiply number by 10
 4812/28C0 : 97F0                       	POP	R0,@R15		; Restore digit
 4813/28C2 : 8C89                       	LDCTLB	FLAGS,RL0
 4814/28C4 : 0200 3030                  	SUBB	RH0,#'0'	; Make it absolute
 4815/28C8 : 5F00 28D6                  	CALL	RSCALE		; Re-scale number
 4816/28CC : 97F3                       	POP	R3,@R15		; Restore code string address
 4817/28CE : 97F1                       	POP	R1,@R15		; Restore point flags
 4818/28D0 : 97F2                       	POP	R2,@R15		; Restore sign of exponent
 4819/28D2 : 5E08 282A                  	JP	MANLP		; Get another digit
 4820/28D6 :                            ;
 4821/28D6 :                            RSCALE:
 4822/28D6 : 5F00 2646                  	CALL	STAKFP		; Put number on stack
 4823/28DA : 5F00 2610                  	CALL	FLGREL		; Digit to add to FPREG
 4824/28DE :                            PADD:
 4825/28DE : 97F1                       	POP	R1,@R15		; Restore number
 4826/28E0 : 97F2                       	POP	R2,@R15
 4827/28E2 : 5E08 21C2                  	JP	FPADD		; Add BCDE to FPREG and return
 4828/28E6 :                            ;
 4829/28E6 :                            EDIGIT:
 4830/28E6 : A0A0                       	LDB	RH0,RL2		; Get digit
 4831/28E8 : B200                       	RLB	RH0		; Times 2
 4832/28EA : B200                       	RLB	RH0		; Times 4
 4833/28EC : 80A0                       	ADDB	RH0,RL2		; Times 5
 4834/28EE : B200                       	RLB	RH0		; Times 10
 4835/28F0 : 0030                       	ADDB	RH0,@R3		; Add next digit
 4836/28F2 : 0200 3030                  	SUBB	RH0,#'0'	; Make it absolute
 4837/28F6 : A00A                       	LDB	RL2,RH0		; Save new digit
 4838/28F8 : 5E08 284A                  	JP	EXPLP		; Look for another digit
 4839/28FC :                            ;
 4840/28FC :                            LINEIN:
 4841/28FC : 93F3                       	PUSH	@R15,R3		; Save code string address
 4842/28FE : 2103 042D                  	LD	R3,#INMSG	; Output " in "
 4843/2902 : 5F00 1CDA                  	CALL	PRS		; Output string at HL
 4844/2906 : 97F3                       	POP	R3,@R15		; Restore code string address
 4845/2908 :                            PRNTHL:
 4846/2908 : AD23                       	EX	R3,R2		; Code string address to DE
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 82 - 2023/10/12 18時22分27秒


 4847/290A : 8800                       	XORB	RH0,RH0
 4848/290C : 8D83                       	RESFLG	C
 4849/290E : C198                       	LDB	RH1,#80H+24	; 24 bits
 4850/2910 : 5F00 2616                  	CALL	RETINT		; Return the integer
 4851/2914 : 2103 1CD4                  	LD	R3,#PRNUMS	; Print number string
 4852/2918 : 93F3                       	PUSH	@R15,R3		; Save for return
 4853/291A :                            NUMASC:
 4854/291A : 2103 814A                  	LD	R3,#PBUFF	; Convert number to ASCII
 4855/291E : 93F3                       	PUSH	@R15,R3		; Save for return
 4856/2920 : 5F00 25E8                  	CALL	TSTSGN		; Test sign of FPREG
 4857/2924 : 0C35 2020                  	LDB	@R3,#' '	; Space at start
 4858/2928 : 5E0D 2930                  	JP	PL,SPCFST	; Positive - Space to start
 4859/292C : 0C35 2D2D                  	LDB	@R3,#'-'	; '-' sign at start
 4860/2930 :                            SPCFST:
 4861/2930 : 8CC1                       	LDCTLB	RL4,FLAGS
 4862/2932 : A930                       	INC	R3		; First byte of number
 4863/2934 : 8CC9                       	LDCTLB	FLAGS,RL4
 4864/2936 : 0C35 3030                  	LDB	@R3,#'0'	; '0' if zero
 4865/293A : 5E06 2AAC                  	JP	Z,JSTZER	; Return '0' if zero
 4866/293E : 93F3                       	PUSH	@R15,R3		; Save buffer address
 4867/2940 : ED02                       	JR	PL,SPCFST1
 4868/2942 : 5F00 2636                  	CALL	INVSGN		; Negate FPREG if negative
 4869/2946 :                            SPCFST1:
 4870/2946 : 8800                       	XORB	RH0,RH0
 4871/2948 : 8D83                       	RESFLG	C		; Zero A
 4872/294A : 8C81                       	LDCTLB	RL0,FLAGS
 4873/294C : 93F0                       	PUSH	@R15,R0		; Save it
 4874/294E : 5F00 2AC0                  	CALL	RNGTST		; Test number is in range
 4875/2952 :                            SIXDIG:
 4876/2952 : 2101 9143                  	LD	R1,#9143H	; BCDE - 99999.9
 4877/2956 : 2102 4FF8                  	LD	R2,#4FF8H
 4878/295A : 5F00 26E4                  	CALL	CMPNUM		; Compare numbers
 4879/295E : 8400                       	ORB	RH0,RH0
 4880/2960 : 8D83                       	RESFLG	C
 4881/2962 : 5E0C 2988                  	JP	PO,INRNG	; > 99999.9 - Sort it out
 4882/2966 : 97F0                       	POP	R0,@R15		; Restore count
 4883/2968 : 8C89                       	LDCTLB	FLAGS,RL0
 4884/296A : 5F00 289C                  	CALL	MULTEN		; Multiply by ten
 4885/296E : 8C81                       	LDCTLB	RL0,FLAGS
 4886/2970 : 93F0                       	PUSH	@R15,R0		; Re-save count
 4887/2972 : 5E08 2952                  	JP	SIXDIG		; Test it again
 4888/2976 :                            ;
 4889/2976 :                            GTSIXD:
 4890/2976 : 5F00 2496                  	CALL	DIV10		; Divide by 10
 4891/297A : 97F0                       	POP	R0,@R15		; Get count
 4892/297C : 8C89                       	LDCTLB	FLAGS,RL0
 4893/297E : A800                       	INCB	RH0,#1		; Count divides
 4894/2980 : 8C81                       	LDCTLB	RL0,FLAGS
 4895/2982 : 93F0                       	PUSH	@R15,R0		; Re-save count
 4896/2984 : 5F00 2AC0                  	CALL	RNGTST		; Test number is in range
 4897/2988 :                            INRNG:
 4898/2988 : 5F00 21A8                  	CALL	ROUND		; Add 0.5 to FPREG
 4899/298C : A800                       	INCB	RH0,#1
 4900/298E : 5F00 274A                  	CALL	FPINT		; F.P to integer
 4901/2992 : 5F00 2664                  	CALL	FPBCDE		; Move BCDE to FPREG
 4902/2996 : 2101 0306                  	LD	R1,#0306H	; 1E+06 to 1E-03 range
 4903/299A : 97F0                       	POP	R0,@R15		; Restore count
 4904/299C : 8C89                       	LDCTLB	FLAGS,RL0
 4905/299E : 8090                       	ADDB	RH0,RL1		; 6 digits before point
 4906/29A0 : A800                       	INCB	RH0,#1		; Add one
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 83 - 2023/10/12 18時22分27秒


 4907/29A2 : 5E05 29B4                  	JP	MI,MAKNUM	; Do it in 'E' form if < 1E-02
 4908/29A6 : 0A00 0808                  	CPB	RH0,#6+1+1	; More than 999999 ?
 4909/29AA : 5E0F 29B4                  	JP	NC,MAKNUM	; Yes - Do it in 'E' form
 4910/29AE : A800                       	INCB	RH0,#1		; Adjust for exponent
 4911/29B0 : A001                       	LDB	RH1,RH0		; Exponent of number
 4912/29B2 : C002                       	LDB	RH0,#2		; Make it zero after
 4913/29B4 :                            ;
 4914/29B4 :                            MAKNUM:
 4915/29B4 : AA00                       	DECB	RH0,#1		; Adjust for digits to do
 4916/29B6 : AA00                       	DECB	RH0,#1
 4917/29B8 : 97F3                       	POP	R3,@R15		; Restore buffer address
 4918/29BA : 8C81                       	LDCTLB	RL0,FLAGS
 4919/29BC : 93F0                       	PUSH	@R15,R0		; Save count
 4920/29BE : 2102 2ADC                  	LD	R2,#POWERS	; Powers of ten
 4921/29C2 : 0201 0101                  	SUBB	RH1,#1		; Count digits before point
 4922/29C6 : 5E0E 29DE                  	JP	NZ,DIGTXT	; Not zero - Do number
 4923/29CA : 0C35 2E2E                  	LDB	@R3,#'.'	; Save point
 4924/29CE : 8CC1                       	LDCTLB	RL4,FLAGS
 4925/29D0 : A930                       	INC	R3		; Move on
 4926/29D2 : 8CC9                       	LDCTLB	FLAGS,RL4
 4927/29D4 : 0C35 3030                  	LDB	@R3,#'0'	; Save zero
 4928/29D8 : 8CC1                       	LDCTLB	RL4,FLAGS
 4929/29DA : A930                       	INC	R3		; Move on
 4930/29DC : 8CC9                       	LDCTLB	FLAGS,RL4
 4931/29DE :                            DIGTXT:
 4932/29DE : AA10                       	DECB	RH1,#1		; Count digits before point
 4933/29E0 : 0C35 2E2E                  	LDB	@R3,#'.'	; Save point in case
 4934/29E4 : EE02                       	JR	NZ,DIGTXT1
 4935/29E6 : 5F00 2694                  	CALL	INCHL		; Last digit - move on
 4936/29EA :                            DIGTXT1:
 4937/29EA : 93F1                       	PUSH	@R15,R1		; Save digits before point
 4938/29EC : 93F3                       	PUSH	@R15,R3		; Save buffer address
 4939/29EE : 93F2                       	PUSH	@R15,R2		; Save powers of ten
 4940/29F0 : 5F00 267E                  	CALL	BCDEFP		; Move FPREG to BCDE
 4941/29F4 : 97F3                       	POP	R3,@R15		; Powers of ten table
 4942/29F6 : C12F                       	LDB	RH1,#'0'-1	; ASCII '0' - 1
 4943/29F8 :                            TRYAGN:
 4944/29F8 : A810                       	INCB	RH1,#1		; Count subtractions
 4945/29FA : A0A0                       	LDB	RH0,RL2		; Get LSB
 4946/29FC : 0230                       	SUBB	RH0,@R3		; Subtract LSB
 4947/29FE : A00A                       	LDB	RL2,RH0		; Save LSB
 4948/2A00 : 8CC1                       	LDCTLB	RL4,FLAGS
 4949/2A02 : A930                       	INC	R3
 4950/2A04 : 8CC9                       	LDCTLB	FLAGS,RL4
 4951/2A06 : A020                       	LDB	RH0,RH2		; Get NMSB
 4952/2A08 : 203C                       	LDB	RL4,@R3
 4953/2A0A : B6C0                       	SBCB	RH0,RL4		; Subtract NMSB
 4954/2A0C : A002                       	LDB	RH2,RH0		; Save NMSB
 4955/2A0E : 8CC1                       	LDCTLB	RL4,FLAGS
 4956/2A10 : A930                       	INC	R3
 4957/2A12 : 8CC9                       	LDCTLB	FLAGS,RL4
 4958/2A14 : A090                       	LDB	RH0,RL1		; Get MSB
 4959/2A16 : 203C                       	LDB	RL4,@R3
 4960/2A18 : B6C0                       	SBCB	RH0,RL4		; Subtract MSB
 4961/2A1A : A009                       	LDB	RL1,RH0		; Save MSB
 4962/2A1C : 8CC1                       	LDCTLB	RL4,FLAGS
 4963/2A1E : AB30                       	DEC	R3,#1		; Point back to start
 4964/2A20 : 8CC9                       	LDCTLB	FLAGS,RL4
 4965/2A22 : 8CC1                       	LDCTLB	RL4,FLAGS
 4966/2A24 : AB30                       	DEC	R3,#1
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 84 - 2023/10/12 18時22分27秒


 4967/2A26 : 8CC9                       	LDCTLB	FLAGS,RL4
 4968/2A28 : 5E0F 29F8                  	JP	NC,TRYAGN	; No overflow - Try again
 4969/2A2C : 5F00 2304                  	CALL	PLUCDE		; Restore number
 4970/2A30 : 8CC1                       	LDCTLB	RL4,FLAGS
 4971/2A32 : A930                       	INC	R3		; Start of next number
 4972/2A34 : 8CC9                       	LDCTLB	FLAGS,RL4
 4973/2A36 : 5F00 2664                  	CALL	FPBCDE		; Move BCDE to FPREG
 4974/2A3A : AD23                       	EX	R3,R2		; Save point in table
 4975/2A3C : 97F3                       	POP	R3,@R15		; Restore buffer address
 4976/2A3E : 2E31                       	LDB	@R3,RH1		; Save digit in buffer
 4977/2A40 : 8CC1                       	LDCTLB	RL4,FLAGS
 4978/2A42 : A930                       	INC	R3		; And move on
 4979/2A44 : 8CC9                       	LDCTLB	FLAGS,RL4
 4980/2A46 : 97F1                       	POP	R1,@R15		; Restore digit count
 4981/2A48 : AA90                       	DECB	RL1,#1		; Count digits
 4982/2A4A : 5E0E 29DE                  	JP	NZ,DIGTXT	; More - Do them
 4983/2A4E : AA10                       	DECB	RH1,#1		; Any decimal part?
 4984/2A50 : 5E06 2A6E                  	JP	Z,DOEBIT	; No - Do 'E' bit
 4985/2A54 :                            SUPTLZ:
 4986/2A54 : 8CC1                       	LDCTLB	RL4,FLAGS
 4987/2A56 : AB30                       	DEC	R3,#1
 4988/2A58 : 8CC9                       	LDCTLB	FLAGS,RL4	; Move back through buffer
 4989/2A5A : 2030                       	LDB	RH0,@R3		; Get character
 4990/2A5C : 0A00 3030                  	CPB	RH0,#'0'	; '0' character?
 4991/2A60 : 5E06 2A54                  	JP	Z,SUPTLZ	; Yes - Look back for more
 4992/2A64 : 0A00 2E2E                  	CPB	RH0,#'.'	; A decimal point?
 4993/2A68 : E602                       	JR	Z,DOEBIT
 4994/2A6A : 5F00 2694                  	CALL	INCHL		; Move back over digit
 4995/2A6E :                            ;
 4996/2A6E :                            DOEBIT:
 4997/2A6E : 97F0                       	POP	R0,@R15		; Get 'E' flag
 4998/2A70 : 8C89                       	LDCTLB	FLAGS,RL0
 4999/2A72 : 5E06 2ABA                  	JP	Z,NOENED	; No 'E' needed - End buffer
 5000/2A76 : 0C35 4545                  	LDB	@R3,#'E'	; Put 'E' in buffer
 5001/2A7A : 8CC1                       	LDCTLB	RL4,FLAGS
 5002/2A7C : A930                       	INC	R3		; And move on
 5003/2A7E : 8CC9                       	LDCTLB	FLAGS,RL4
 5004/2A80 : 0C35 2B2B                  	LDB	@R3,#'+'	; Put '+' in buffer
 5005/2A84 : 5E0D 2A94                  	JP	PL,OUTEXP	; Positive - Output exponent
 5006/2A88 : 0C35 2D2D                  	LDB	@R3,#'-'	; Put '-' in buffer
 5007/2A8C : 8CC1                       	LDCTLB	RL4,FLAGS
 5008/2A8E : 8C00                       	COMB	RH0		; Negate exponent
 5009/2A90 : 8CC9                       	LDCTLB	FLAGS,RL4
 5010/2A92 : A800                       	INCB	RH0,#1
 5011/2A94 :                            OUTEXP:
 5012/2A94 : C12F                       	LDB	RH1,#'0'-1	; ASCII '0' - 1
 5013/2A96 :                            EXPTEN:
 5014/2A96 : A810                       	INCB	RH1,#1		; Count subtractions
 5015/2A98 : 0200 0A0A                  	SUBB	RH0,#10		; Tens digit
 5016/2A9C : 5E0F 2A96                  	JP	NC,EXPTEN	; More to do
 5017/2AA0 : 0000 3A3A                  	ADDB	RH0,#'0'+10	; Restore and make ASCII
 5018/2AA4 : 8CC1                       	LDCTLB	RL4,FLAGS
 5019/2AA6 : A930                       	INC	R3		; Move on
 5020/2AA8 : 8CC9                       	LDCTLB	FLAGS,RL4
 5021/2AAA : 2E31                       	LDB	@R3,RH1		; Save MSB of exponent
 5022/2AAC :                            JSTZER:
 5023/2AAC : 8CC1                       	LDCTLB	RL4,FLAGS
 5024/2AAE : A930                       	INC	R3		;
 5025/2AB0 : 8CC9                       	LDCTLB	FLAGS,RL4
 5026/2AB2 : 2E30                       	LDB	@R3,RH0		; Save LSB of exponent
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 85 - 2023/10/12 18時22分27秒


 5027/2AB4 : 8CC1                       	LDCTLB	RL4,FLAGS
 5028/2AB6 : A930                       	INC	R3
 5029/2AB8 : 8CC9                       	LDCTLB	FLAGS,RL4
 5030/2ABA :                            NOENED:
 5031/2ABA : 2E39                       	LDB	@R3,RL1		; Mark end of buffer
 5032/2ABC : 97F3                       	POP	R3,@R15		; Restore code string address
 5033/2ABE : 9E08                       	RET
 5034/2AC0 :                            ;
 5035/2AC0 :                            RNGTST:
 5036/2AC0 : 2101 9474                  	LD	R1,#9474H	; BCDE = 999999.
 5037/2AC4 : 2102 23F7                  	LD	R2,#23F7H
 5038/2AC8 : 5F00 26E4                  	CALL	CMPNUM		; Compare numbers
 5039/2ACC : 8400                       	ORB	RH0,RH0
 5040/2ACE : 8D83                       	RESFLG	C
 5041/2AD0 : 97F3                       	POP	R3,@R15		; Return address to HL
 5042/2AD2 : 5E0C 2976                  	JP	PO,GTSIXD	; Too big - Divide by ten
 5043/2AD6 : 1E38                       	JP	@R3		; Otherwise return to caller
 5044/2AD8 :                            ;
 5045/2AD8 :                            HALF:
 5046/2AD8 : 00 00 00 80                	DB	00H,00H,00H,80H	; 0.5
 5047/2ADC :                            ;
 5048/2ADC :                            	ALIGN	2
 5049/2ADC :                            POWERS:
 5050/2ADC : A0 86 01                   	DB	0A0H,086H,001H	; 100000
 5051/2ADF : 10 27 00                   	DB	010H,027H,000H	; 10000
 5052/2AE2 : E8 03 00                   	DB	0E8H,003H,000H	; 1000
 5053/2AE5 : 64 00 00                   	DB	064H,000H,000H	; 100
 5054/2AE8 : 0A 00 00                   	DB	00AH,000H,000H	; 10
 5055/2AEB : 01 00 00                   	DB	001H,000H,000H	; 1
 5056/2AEE :                            ;
 5057/2AEE :                            	ALIGN	2
 5058/2AEE :                            NEGAFT:
 5059/2AEE : 2103 2636                  	LD	R3,#INVSGN	; Negate result
 5060/2AF2 : 2DF3                       	EX	@R15,R3		; To be done after caller
 5061/2AF4 : 1E38                       	JP	@R3		; Return to caller
 5062/2AF6 :                            ;
 5063/2AF6 :                            SQR:
 5064/2AF6 : 5F00 2646                  	CALL	STAKFP		; Put value on stack
 5065/2AFA : 2103 2AD8                  	LD	R3,#HALF	; Set power to 1/2
 5066/2AFE : 5F00 2660                  	CALL	PHLTFP		; Move 1/2 to FPREG
 5067/2B02 :                            ;
 5068/2B02 :                            POWER:
 5069/2B02 : 97F1                       	POP	R1,@R15		; Get base
 5070/2B04 : 97F2                       	POP	R2,@R15
 5071/2B06 : 5F00 25E8                  	CALL	TSTSGN		; Test sign of power
 5072/2B0A : A010                       	LDB	RH0,RH1		; Get exponent of base
 5073/2B0C : 5E06 2B82                  	JP	Z,EXP		; Make result 1 if zero
 5074/2B10 : 5E0D 2B1C                  	JP	PL,POWER1	; Positive base - Ok
 5075/2B14 : 8400                       	ORB	RH0,RH0
 5076/2B16 : 8D83                       	RESFLG	C		; Zero to negative power?
 5077/2B18 : 5E06 04D4                  	JP	Z,DZERR		; Yes - ?/0 Error
 5078/2B1C :                            POWER1:
 5079/2B1C : 8400                       	ORB	RH0,RH0
 5080/2B1E : 8D83                       	RESFLG	C		; Base zero?
 5081/2B20 : 5E06 2290                  	JP	Z,SAVEXP	; Yes - Return zero
 5082/2B24 : 93F2                       	PUSH	@R15,R2		; Save base
 5083/2B26 : 93F1                       	PUSH	@R15,R1
 5084/2B28 : A090                       	LDB	RH0,RL1		; Get MSB of base
 5085/2B2A : 0400 7F7F                  	ORB	RH0,#01111111B	; Get sign status
 5086/2B2E : 8D83                       	RESFLG	C
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 86 - 2023/10/12 18時22分27秒


 5087/2B30 : 5F00 267E                  	CALL	BCDEFP		; Move power to BCDE
 5088/2B34 : 5E0D 2B52                  	JP	PL,POWER2	; Positive base - Ok
 5089/2B38 : 93F2                       	PUSH	@R15,R2		; Save power
 5090/2B3A : 93F1                       	PUSH	@R15,R1
 5091/2B3C : 5F00 27A4                  	CALL	INT		; Get integer of power
 5092/2B40 : 97F1                       	POP	R1,@R15		; Restore power
 5093/2B42 : 97F2                       	POP	R2,@R15
 5094/2B44 : 8C81                       	LDCTLB	RL0,FLAGS
 5095/2B46 : 93F0                       	PUSH	@R15,R0		; MSB of base
 5096/2B48 : 5F00 26E4                  	CALL	CMPNUM		; Power an integer?
 5097/2B4C : 97F3                       	POP	R3,@R15		; Restore MSB of base
 5098/2B4E : A030                       	LDB	RH0,RH3		; but don't affect flags
 5099/2B50 : B20C                       	RRCB	RH0,#1		; Exponent odd or even?
 5100/2B52 :                            POWER2:
 5101/2B52 : 97F3                       	POP	R3,@R15		; Restore MSB and exponent
 5102/2B54 : ACB3                       	EXB	RH3,RL3
 5103/2B56 : 6F03 8146                  	LD	(FPREG+2),R3	; Save base in FPREG
 5104/2B5A : ACB3                       	EXB	RH3,RL3
 5105/2B5C : 97F3                       	POP	R3,@R15		; LSBs of base
 5106/2B5E : ACB3                       	EXB	RH3,RL3
 5107/2B60 : 6F03 8144                  	LD	(FPREG),R3	; Save in FPREG
 5108/2B64 : ACB3                       	EXB	RH3,RL3
 5109/2B66 : EF02                       	JR	NC,POWER21
 5110/2B68 : 5F00 2AEE                  	CALL	NEGAFT		; Odd power - Negate result
 5111/2B6C :                            POWER21:
 5112/2B6C : EE02                       	JR	NZ,POWER22
 5113/2B6E : 5F00 2636                  	CALL	INVSGN		; Negative base - Negate it
 5114/2B72 :                            POWER22:
 5115/2B72 : 93F2                       	PUSH	@R15,R2		; Save power
 5116/2B74 : 93F1                       	PUSH	@R15,R1
 5117/2B76 : 5F00 23A2                  	CALL	LOG		; Get LOG of base
 5118/2B7A : 97F1                       	POP	R1,@R15		; Restore power
 5119/2B7C : 97F2                       	POP	R2,@R15
 5120/2B7E : 5F00 2408                  	CALL	FPMULT		; Multiply LOG by power
 5121/2B82 :                            ;
 5122/2B82 :                            EXP:
 5123/2B82 : 5F00 2646                  	CALL	STAKFP		; Put value on stack
 5124/2B86 : 2101 8138                  	LD	R1,#08138H	; BCDE = 1/Ln(2)
 5125/2B8A : 2102 AA3B                  	LD	R2,#0AA3BH
 5126/2B8E : 5F00 2408                  	CALL	FPMULT		; Multiply value by 1/LN(2)
 5127/2B92 : 6000 8147                  	LDB	RH0,(FPEXP)	; Get exponent
 5128/2B96 : 0A00 8888                  	CPB	RH0,#80H+8	; Is it in range?
 5129/2B9A : 5E0F 25A8                  	JP	NC,OVTST1	; No - Test for overflow
 5130/2B9E : 5F00 27A4                  	CALL	INT		; Get INT of FPREG
 5131/2BA2 : 0000 8080                  	ADDB	RH0,#80H	; For excess 128
 5132/2BA6 : 0000 0202                  	ADDB	RH0,#2		; Exponent > 126?
 5133/2BAA : 5E07 25A8                  	JP	C,OVTST1	; Yes - Test for overflow
 5134/2BAE : 8C81                       	LDCTLB	RL0,FLAGS
 5135/2BB0 : 93F0                       	PUSH	@R15,R0		; Save scaling factor
 5136/2BB2 : 2103 2390                  	LD	R3,#UNITY	; Point to 1.
 5137/2BB6 : 5F00 21AC                  	CALL	ADDPHL		; Add 1 to FPREG
 5138/2BBA : 5F00 23FA                  	CALL	MULLN2		; Multiply by LN(2)
 5139/2BBE : 97F0                       	POP	R0,@R15		; Restore scaling factor
 5140/2BC0 : 8C89                       	LDCTLB	FLAGS,RL0
 5141/2BC2 : 97F1                       	POP	R1,@R15		; Restore exponent
 5142/2BC4 : 97F2                       	POP	R2,@R15
 5143/2BC6 : 8C81                       	LDCTLB	RL0,FLAGS
 5144/2BC8 : 93F0                       	PUSH	@R15,R0		; Save scaling factor
 5145/2BCA : 5F00 21BE                  	CALL	SUBCDE		; Subtract exponent from FPREG
 5146/2BCE : 5F00 2636                  	CALL	INVSGN		; Negate result
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 87 - 2023/10/12 18時22分27秒


 5147/2BD2 : 2103 2BE6                  	LD	R3,#EXPTAB	; Coefficient table
 5148/2BD6 : 5F00 2C1E                  	CALL	SMSER1		; Sum the series
 5149/2BDA : 2102 0000                  	LD	R2,#0		; Zero LSBs
 5150/2BDE : 97F1                       	POP	R1,@R15		; Scaling factor
 5151/2BE0 : A029                       	LDB	RL1,RH2		; Zero MSB
 5152/2BE2 : 5E08 2408                  	JP	FPMULT		; Scale result to correct value
 5153/2BE6 :                            ;
 5154/2BE6 :                            EXPTAB:
 5155/2BE6 : 08                         	DB	8			; Table used by EXP
 5156/2BE7 : 40 2E 94 74                	DB	040H,02EH,094H,074H	; -1/7! (-1/5040)
 5157/2BEB : 70 4F 2E 77                	DB	070H,04FH,02EH,077H	;  1/6! ( 1/720)
 5158/2BEF : 6E 02 88 7A                	DB	06EH,002H,088H,07AH	; -1/5! (-1/120)
 5159/2BF3 : E6 A0 2A 7C                	DB	0E6H,0A0H,02AH,07CH	;  1/4! ( 1/24)
 5160/2BF7 : 50 AA AA 7E                	DB	050H,0AAH,0AAH,07EH	; -1/3! (-1/6)
 5161/2BFB : FF FF 7F 7F                	DB	0FFH,0FFH,07FH,07FH	;  1/2! ( 1/2)
 5162/2BFF : 00 00 80 81                	DB	000H,000H,080H,081H	; -1/1! (-1/1)
 5163/2C03 : 00 00 00 81                	DB	000H,000H,000H,081H	;  1/0! ( 1/1)
 5164/2C07 :                            ;
 5165/2C07 :                            	ALIGN	2
 5166/2C08 :                            SUMSER:
 5167/2C08 : 5F00 2646                  	CALL	STAKFP		; Put FPREG on stack
 5168/2C0C : 2102 2404                  	LD	R2,#MULT	; Multiply by "X"
 5169/2C10 : 93F2                       	PUSH	@R15,R2		; To be done after
 5170/2C12 : 93F3                       	PUSH	@R15,R3		; Save address of table
 5171/2C14 : 5F00 267E                  	CALL	BCDEFP		; Move FPREG to BCDE
 5172/2C18 : 5F00 2408                  	CALL	FPMULT		; Square the value
 5173/2C1C : 97F3                       	POP	R3,@R15		; Restore address of table
 5174/2C1E :                            SMSER1:
 5175/2C1E : 5F00 2646                  	CALL	STAKFP		; Put value on stack
 5176/2C22 : 2030                       	LDB	RH0,@R3		; Get number of coefficients
 5177/2C24 : 8CC1                       	LDCTLB	RL4,FLAGS
 5178/2C26 : A930                       	INC	R3		; Point to start of table
 5179/2C28 : 8CC9                       	LDCTLB	FLAGS,RL4
 5180/2C2A : 5F00 2660                  	CALL	PHLTFP		; Move coefficient to FPREG
 5181/2C2E : E802                       	JR	SUMLP1		; Skip "POP AF"
 5182/2C30 :                            SUMLP:
 5183/2C30 : 97F0                       	POP	R0,@R15		; Restore count
 5184/2C32 : 8C89                       	LDCTLB	FLAGS,RL0
 5185/2C34 :                            SUMLP1:
 5186/2C34 : 97F1                       	POP	R1,@R15		; Restore number
 5187/2C36 : 97F2                       	POP	R2,@R15
 5188/2C38 : AA00                       	DECB	RH0,#1		; Cont coefficients
 5189/2C3A : 9E06                       	RET	Z		; All done
 5190/2C3C : 93F2                       	PUSH	@R15,R2		; Save number
 5191/2C3E : 93F1                       	PUSH	@R15,R1
 5192/2C40 : 8C81                       	LDCTLB	RL0,FLAGS
 5193/2C42 : 93F0                       	PUSH	@R15,R0		; Save count
 5194/2C44 : 93F3                       	PUSH	@R15,R3		; Save address in table
 5195/2C46 : 5F00 2408                  	CALL	FPMULT		; Multiply FPREG by BCDE
 5196/2C4A : 97F3                       	POP	R3,@R15		; Restore address in table
 5197/2C4C : 5F00 2682                  	CALL	LOADFP		; Number at HL to BCDE
 5198/2C50 : 93F3                       	PUSH	@R15,R3		; Save address in table
 5199/2C52 : 5F00 21C2                  	CALL	FPADD		; Add coefficient to FPREG
 5200/2C56 : 97F3                       	POP	R3,@R15		; Restore address in table
 5201/2C58 : 5E08 2C30                  	JP	SUMLP		; More coefficients
 5202/2C5C :                            ;
 5203/2C5C :                            RND:
 5204/2C5C : 5F00 25E8                  	CALL	TSTSGN		; Test sign of FPREG
 5205/2C60 : 2103 8070                  	LD	R3,#SEED+2	; Random number seed
 5206/2C64 : 5E05 2D04                  	JP	MI,RESEED	; Negative - Re-seed
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 88 - 2023/10/12 18時22分27秒


 5207/2C68 : 2103 8092                  	LD	R3,#LSTRND	; Last random number
 5208/2C6C : 5F00 2660                  	CALL	PHLTFP		; Move last RND to FPREG
 5209/2C70 : 2103 8070                  	LD	R3,#SEED+2	; Random number seed
 5210/2C74 : 9E06                       	RET	Z		; Return if RND(0)
 5211/2C76 : 0030                       	ADDB	RH0,@R3		; Add (SEED)+2)
 5212/2C78 : 0600 0707                  	ANDB	RH0,#00000111B	; 0 to 7
 5213/2C7C : C100                       	LDB	RH1,#0
 5214/2C7E : 2E30                       	LDB	@R3,RH0		; Re-save seed
 5215/2C80 : 8CC1                       	LDCTLB	RL4,FLAGS
 5216/2C82 : A930                       	INC	R3		; Move to coefficient table
 5217/2C84 : 8CC9                       	LDCTLB	FLAGS,RL4
 5218/2C86 : 8000                       	ADDB	RH0,RH0		; 4 bytes
 5219/2C88 : 8000                       	ADDB	RH0,RH0		; per entry
 5220/2C8A : A009                       	LDB	RL1,RH0		; BC = Offset into table
 5221/2C8C : 8113                       	ADD	R3,R1		; Point to coefficient
 5222/2C8E : 5F00 2682                  	CALL	LOADFP		; Coefficient to BCDE
 5223/2C92 : ACA2                       	EXB	RH2,RL2
 5224/2C94 : AC91                       	EXB	RH1,RL1
 5225/2C96 : 5F00 2408                  	CALL	FPMULT		; Multiply FPREG by coefficient
 5226/2C9A : 6000 806F                  	LDB	RH0,(SEED+1)	; Get (SEED+1)
 5227/2C9E : A800                       	INCB	RH0,#1		; Add 1
 5228/2CA0 : 0600 0303                  	ANDB	RH0,#00000011B	; 0 to 3
 5229/2CA4 : C100                       	LDB	RH1,#0
 5230/2CA6 : 0A00 0101                  	CPB	RH0,#1		; Is it zero?
 5231/2CAA : B410                       	ADCB	RH0,RH1		; Yes - Make it 1
 5232/2CAC : 6E00 806F                  	LDB	(SEED+1),RH0	; Re-save seed
 5233/2CB0 : 2103 2D0E                  	LD	R3,#RNDTAB-4	; Addition table
 5234/2CB4 : 8000                       	ADDB	RH0,RH0		; 4 bytes
 5235/2CB6 : 8000                       	ADDB	RH0,RH0		; per entry
 5236/2CB8 : A009                       	LDB	RL1,RH0		; BC = Offset into table
 5237/2CBA : 8113                       	ADD	R3,R1		; Point to value
 5238/2CBC : 5F00 21AC                  	CALL	ADDPHL		; Add value to FPREG
 5239/2CC0 :                            RND1:
 5240/2CC0 : 5F00 267E                  	CALL	BCDEFP		; Move FPREG to BCDE
 5241/2CC4 : A0A0                       	LDB	RH0,RL2		; Get LSB
 5242/2CC6 : A09A                       	LDB	RL2,RL1		; LSB = MSB
 5243/2CC8 : 0800 4F4F                  	XORB	RH0,#01001111B	; Fiddle around
 5244/2CCC : 8D83                       	RESFLG	C
 5245/2CCE : A009                       	LDB	RL1,RH0		; New MSB
 5246/2CD0 : 0C35 8080                  	LDB	@R3,#80H	; Set exponent
 5247/2CD4 : 8CC1                       	LDCTLB	RL4,FLAGS
 5248/2CD6 : AB30                       	DEC	R3,#1		; Point to MSB
 5249/2CD8 : 8CC9                       	LDCTLB	FLAGS,RL4
 5250/2CDA : 2031                       	LDB	RH1,@R3		; Get MSB
 5251/2CDC : 0C35 8080                  	LDB	@R3,#80H	; Make value -0.5
 5252/2CE0 : 2103 806E                  	LD	R3,#SEED	; Random number seed
 5253/2CE4 : 2830                       	INCB	@R3,#1		; Count seed
 5254/2CE6 : 2030                       	LDB	RH0,@R3		; Get seed
 5255/2CE8 : 0200 ABAB                  	SUBB	RH0,#171	; Do it modulo 171
 5256/2CEC : 5E0E 2CF8                  	JP	NZ,RND2		; Non-zero - Ok
 5257/2CF0 : 2E30                       	LDB	@R3,RH0		; Zero seed
 5258/2CF2 : A890                       	INCB	RL1,#1		; Fillde about
 5259/2CF4 : AA20                       	DECB	RH2,#1		; with the
 5260/2CF6 : A8A0                       	INCB	RL2,#1		; number
 5261/2CF8 :                            RND2:
 5262/2CF8 : 5F00 2262                  	CALL	BNORM		; Normalise number
 5263/2CFC : 2103 8092                  	LD	R3,#LSTRND	; Save random number
 5264/2D00 : 5E08 269C                  	JP	FPTHL		; Move FPREG to last and return
 5265/2D04 :                            ;
 5266/2D04 :                            RESEED:
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 89 - 2023/10/12 18時22分27秒


 5267/2D04 : 2E30                       	LDB	@R3,RH0		; Re-seed random numbers
 5268/2D06 : AB30                       	DEC	R3,#1
 5269/2D08 : 2E30                       	LDB	@R3,RH0
 5270/2D0A : AB30                       	DEC	R3,#1
 5271/2D0C : 2E30                       	LDB	@R3,RH0
 5272/2D0E : 5E08 2CC0                  	JP	RND1		; Return RND seed
 5273/2D12 :                            ;
 5274/2D12 :                            RNDTAB:
 5275/2D12 : 68 B1 46 68                	DB	068H,0B1H,046H,068H	; Table used by RND
 5276/2D16 : 99 E9 92 69                	DB	099H,0E9H,092H,069H
 5277/2D1A : 10 D1 75 68                	DB	010H,0D1H,075H,068H
 5278/2D1E :                            ;
 5279/2D1E :                            	ALIGN	2
 5280/2D1E :                            COS:
 5281/2D1E : 2103 2D90                  	LD	R3,#HALFPI	; Point to PI/2
 5282/2D22 : 5F00 21AC                  	CALL	ADDPHL		; Add it to PPREG
 5283/2D26 :                            SIN:
 5284/2D26 : 5F00 2646                  	CALL	STAKFP		; Put angle on stack
 5285/2D2A : 2101 8349                  	LD	R1,#8349H	; BCDE = 2 PI
 5286/2D2E : 2102 0FDB                  	LD	R2,#0FDBH
 5287/2D32 : 5F00 2664                  	CALL	FPBCDE		; Move 2 PI to FPREG
 5288/2D36 : 97F1                       	POP	R1,@R15		; Restore angle
 5289/2D38 : 97F2                       	POP	R2,@R15
 5290/2D3A : 5F00 24AA                  	CALL	DVBCDE		; Divide angle by 2 PI
 5291/2D3E : 5F00 2646                  	CALL	STAKFP		; Put it on stack
 5292/2D42 : 5F00 27A4                  	CALL	INT		; Get INT of result
 5293/2D46 : 97F1                       	POP	R1,@R15		; Restore number
 5294/2D48 : 97F2                       	POP	R2,@R15
 5295/2D4A : 5F00 21BE                  	CALL	SUBCDE		; Make it 0 <= value < 1
 5296/2D4E : 2103 2D94                  	LD	R3,#QUARTR	; Point to 0.25
 5297/2D52 : 5F00 21B4                  	CALL	SUBPHL		; Subtract value from 0.25
 5298/2D56 : 5F00 25E8                  	CALL	TSTSGN		; Test sign of value
 5299/2D5A : 8D81                       	SETFLG	C		; Flag positive
 5300/2D5C : 5E0D 2D6C                  	JP	PL,SIN1		; Positive - Ok
 5301/2D60 : 5F00 21A8                  	CALL	ROUND		; Add 0.5 to value
 5302/2D64 : 5F00 25E8                  	CALL	TSTSGN		; Test sign of value
 5303/2D68 : 8400                       	ORB	RH0,RH0
 5304/2D6A : 8D83                       	RESFLG	C		; Flag negative
 5305/2D6C :                            SIN1:
 5306/2D6C : 8C81                       	LDCTLB	RL0,FLAGS
 5307/2D6E : 93F0                       	PUSH	@R15,R0		; Save sign
 5308/2D70 : E502                       	JR	MI,SIN11
 5309/2D72 : 5F00 2636                  	CALL	INVSGN		; Negate value if positive
 5310/2D76 :                            SIN11:
 5311/2D76 : 2103 2D94                  	LD	R3,#QUARTR	; Point to 0.25
 5312/2D7A : 5F00 21AC                  	CALL	ADDPHL		; Add 0.25 to value
 5313/2D7E : 97F0                       	POP	R0,@R15		; Restore sign
 5314/2D80 : 8C89                       	LDCTLB	FLAGS,RL0
 5315/2D82 : E702                       	JR	C,SIN12
 5316/2D84 : 5F00 2636                  	CALL	INVSGN		; Negative - Make positive
 5317/2D88 :                            SIN12:
 5318/2D88 : 2103 2D98                  	LD	R3,#SINTAB	; Coefficient table
 5319/2D8C : 5E08 2C08                  	JP	SUMSER		; Evaluate sum of series
 5320/2D90 :                            ;
 5321/2D90 :                            HALFPI:
 5322/2D90 : DB 0F 49 81                	DB	0DBH,00FH,049H,081H	; 1.5708 (PI/2)
 5323/2D94 :                            ;
 5324/2D94 :                            QUARTR:
 5325/2D94 : 00 00 00 7F                	DB	000H,000H,000H,07FH	; 0.25
 5326/2D98 :                            ;
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 90 - 2023/10/12 18時22分27秒


 5327/2D98 :                            SINTAB:
 5328/2D98 : 05                         	DB	5			; Table used by SIN
 5329/2D99 : BA D7 1E 86                	DB	0BAH,0D7H,01EH,086H	; 39.711
 5330/2D9D : 64 26 99 87                	DB	064H,026H,099H,087H	;-76.575
 5331/2DA1 : 58 34 23 87                	DB	058H,034H,023H,087H	; 81.602
 5332/2DA5 : E0 5D A5 86                	DB	0E0H,05DH,0A5H,086H	;-41.342
 5333/2DA9 : DA 0F 49 83                	DB	0DAH,00FH,049H,083H	; 6.2832
 5334/2DAD :                            ;
 5335/2DAD :                            	ALIGN	2
 5336/2DAE :                            TAN:
 5337/2DAE : 5F00 2646                  	CALL	STAKFP		; Put angle on stack
 5338/2DB2 : 5F00 2D26                  	CALL	SIN		; Get SIN of angle
 5339/2DB6 : 97F1                       	POP	R1,@R15		; Restore angle
 5340/2DB8 : 97F3                       	POP	R3,@R15
 5341/2DBA : 5F00 2646                  	CALL	STAKFP		; Save SIN of angle
 5342/2DBE : AD23                       	EX	R3,R2		; BCDE = Angle
 5343/2DC0 : 5F00 2664                  	CALL	FPBCDE		; Angle to FPREG
 5344/2DC4 : 5F00 2D1E                  	CALL	COS		; Get COS of angle
 5345/2DC8 : 5E08 24A6                  	JP	DIV		; TAN = SIN / COS
 5346/2DCC :                            ;
 5347/2DCC :                            ATN:
 5348/2DCC : 5F00 25E8                  	CALL	TSTSGN		; Test sign of value
 5349/2DD0 : ED02                       	JR	PL,ATN1
 5350/2DD2 : 5F00 2AEE                  	CALL	NEGAFT		; Negate result after if -ve
 5351/2DD6 :                            ATN1:
 5352/2DD6 : ED02                       	JR	PL,ATN2
 5353/2DD8 : 5F00 2636                  	CALL	INVSGN		; Negate value if -ve
 5354/2DDC :                            ATN2:
 5355/2DDC : 6000 8147                  	LDB	RH0,(FPEXP)	; Get exponent
 5356/2DE0 : 0A00 8181                  	CPB	RH0,#81H	; Number less than 1?
 5357/2DE4 : 5E07 2DFA                  	JP	C,ATN3		; Yes - Get arc tangnt
 5358/2DE8 : 2101 8100                  	LD	R1,#8100H	; BCDE = 1
 5359/2DEC : A092                       	LDB	RH2,RL1
 5360/2DEE : A09A                       	LDB	RL2,RL1
 5361/2DF0 : 5F00 24AA                  	CALL	DVBCDE		; Get reciprocal of number
 5362/2DF4 : 2103 21B4                  	LD	R3,#SUBPHL	; Sub angle from PI/2
 5363/2DF8 : 93F3                       	PUSH	@R15,R3		; Save for angle > 1
 5364/2DFA :                            ATN3:
 5365/2DFA : 2103 2E08                  	LD	R3,#ATNTAB	; Coefficient table
 5366/2DFE : 5F00 2C08                  	CALL	SUMSER		; Evaluate sum of series
 5367/2E02 : 2103 2D90                  	LD	R3,#HALFPI	; PI/2 - angle in case > 1
 5368/2E06 : 9E08                       	RET			; Number > 1 - Sub from PI/2
 5369/2E08 :                            ;
 5370/2E08 :                            ATNTAB:
 5371/2E08 : 09                         	DB	9			; Table used by ATN
 5372/2E09 : 4A D7 3B 78                	DB	04AH,0D7H,03BH,078H	; 1/17
 5373/2E0D : 02 6E 84 7B                	DB	002H,06EH,084H,07BH	;-1/15
 5374/2E11 : FE C1 2F 7C                	DB	0FEH,0C1H,02FH,07CH	; 1/13
 5375/2E15 : 74 31 9A 7D                	DB	074H,031H,09AH,07DH	;-1/11
 5376/2E19 : 84 3D 5A 7D                	DB	084H,03DH,05AH,07DH	; 1/9
 5377/2E1D : C8 7F 91 7E                	DB	0C8H,07FH,091H,07EH	;-1/7
 5378/2E21 : E4 BB 4C 7E                	DB	0E4H,0BBH,04CH,07EH	; 1/5
 5379/2E25 : 6C AA AA 7F                	DB	06CH,0AAH,0AAH,07FH	;-1/3
 5380/2E29 : 00 00 00 81                	DB	000H,000H,000H,081H	; 1/1
 5381/2E2D :                            ;
 5382/2E2D :                            	ALIGN	2
 5383/2E2E :                            ARET:
 5384/2E2E : 9E08                       	RET			; A RETurn instruction
 5385/2E30 :                            ;
 5386/2E30 :                            GETINP:
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 91 - 2023/10/12 18時22分27秒


 5387/2E30 : 5F00 0038                  	CALL	CONIN		;input a character
 5388/2E34 : 9E08                       	RET
 5389/2E36 :                            ;
 5390/2E36 :                            CLS:
 5391/2E36 : C00C                       	LDB	RH0,#CS		; ASCII Clear screen
 5392/2E38 : 5E08 3050                  	JP	MONOUT		; Output character
 5393/2E3C :                            ;
 5394/2E3C :                            WIDTH:
 5395/2E3C : 5F00 2164                  	CALL	GETINT		; Get integer 0-255
 5396/2E40 : A0A0                       	LDB	RH0,RL2		; Width to A
 5397/2E42 : 6E00 809D                  	LDB	(LWIDTH),RH0	; Set width
 5398/2E46 : 9E08                       	RET
 5399/2E48 :                            ;
 5400/2E48 :                            LINES:
 5401/2E48 : 5F00 1418                  	CALL	GETNUM		; Get a number
 5402/2E4C : 5F00 0DCA                  	CALL	DEINT		; Get integer -32768 to 32767
 5403/2E50 : 6F02 80A2                  	LD	(LINESC),R2	; Set lines counter
 5404/2E54 : 6F02 80A4                  	LD	(LINESN),R2	; Set lines number
 5405/2E58 : 9E08                       	RET
 5406/2E5A :                            ;
 5407/2E5A :                            DEEK:
 5408/2E5A : 5F00 0DCA                  	CALL	DEINT		; Get integer -32768 to 32767
 5409/2E5E : 93F2                       	PUSH	@R15,R2		; Save number
 5410/2E60 : 97F3                       	POP	R3,@R15		; Number to HL
 5411/2E62 : 2031                       	LDB	RH1,@R3		; Get LSB of contents
 5412/2E64 : 8CC1                       	LDCTLB	RL4,FLAGS
 5413/2E66 : A930                       	INC	R3
 5414/2E68 : 8CC9                       	LDCTLB	FLAGS,RL4
 5415/2E6A : 2030                       	LDB	RH0,@R3		; Get MSB of contents
 5416/2E6C : 5E08 1ADC                  	JP	ABPASS		; Return integer AB
 5417/2E70 :                            ;
 5418/2E70 :                            DOKE:
 5419/2E70 : 5F00 1418                  	CALL	GETNUM		; Get a number
 5420/2E74 : 5F00 0DCA                  	CALL	DEINT		; Get integer -32768 to 32767
 5421/2E78 : 93F2                       	PUSH	@R15,R2		; Save address
 5422/2E7A : C42C                       	LD	RH4,#','
 5423/2E7C : 5F00 09DA                  	CALL	CHKSYN		; Make sure ',' follows
 5424/2E80 : 5F00 1418                  	CALL	GETNUM		; Get a number
 5425/2E84 : 5F00 0DCA                  	CALL	DEINT		; Get integer -32768 to 32767
 5426/2E88 : 2DF3                       	EX	@R15,R3		; Save value,get address
 5427/2E8A : 2E3A                       	LDB	@R3,RL2		; Save LSB of value
 5428/2E8C : 8CC1                       	LDCTLB	RL4,FLAGS
 5429/2E8E : A930                       	INC	R3
 5430/2E90 : 8CC9                       	LDCTLB	FLAGS,RL4
 5431/2E92 : 2E32                       	LDB	@R3,RH2		; Save MSB of value
 5432/2E94 : 97F3                       	POP	R3,@R15		; Restore code string address
 5433/2E96 : 9E08                       	RET
 5434/2E98 :                            ;
 5435/2E98 :                            
 5436/2E98 :                            ; HEX$(nn) Convert 16 bit number to Hexadecimal string
 5437/2E98 :                            ;
 5438/2E98 :                            HEX:
 5439/2E98 : 5F00 141C                  	CALL	TSTNUM		; Verify it's a number
 5440/2E9C : 5F00 0DCA                  	CALL	DEINT		; Get integer -32768 to 32767
 5441/2EA0 : 93F1                       	PUSH	@R15,R1		; Save contents of BC
 5442/2EA2 : 2103 814A                  	LD	R3,#PBUFF
 5443/2EA6 : A020                       	LDB	RH0,RH2		; Get high order into A
 5444/2EA8 : 0A00 0000                  	CPB	RH0,#0
 5445/2EAC : E60E                       	JR	Z,HEX2		; Skip output if both high digits are zero
 5446/2EAE : 5F00 2F08                  	CALL	BYT2ASC		; Convert D to ASCII
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 92 - 2023/10/12 18時22分27秒


 5447/2EB2 : A010                       	LDB	RH0,RH1
 5448/2EB4 : 0A00 3030                  	CPB	RH0,#'0'
 5449/2EB8 : E604                       	JR	Z,HEX1		; Don't store high digit if zero
 5450/2EBA : 2E31                       	LDB	@R3,RH1		; Store it to PBUFF
 5451/2EBC : 8CC1                       	LDCTLB	RL4,FLAGS
 5452/2EBE : A930                       	INC	R3		; Next location
 5453/2EC0 : 8CC9                       	LDCTLB	FLAGS,RL4
 5454/2EC2 :                            HEX1:
 5455/2EC2 : 2E39                       	LDB	@R3,RL1		; Store C to PBUFF+1
 5456/2EC4 : 8CC1                       	LDCTLB	RL4,FLAGS
 5457/2EC6 : A930                       	INC	R3		; Next location
 5458/2EC8 : 8CC9                       	LDCTLB	FLAGS,RL4
 5459/2ECA :                            HEX2:
 5460/2ECA : A0A0                       	LDB	RH0,RL2		; Get lower byte
 5461/2ECC : 5F00 2F08                  	CALL	BYT2ASC		; Convert E to ASCII
 5462/2ED0 : A020                       	LDB	RH0,RH2
 5463/2ED2 : 0A00 0000                  	CPB	RH0,#0
 5464/2ED6 : EE04                       	JR	NZ,HEX3		; If upper byte was not zero then always print lower byte
 5465/2ED8 : A010                       	LDB	RH0,RH1
 5466/2EDA : 0A00 3030                  	CPB	RH0,#'0'	; If high digit of lower byte is zero then don't print
 5467/2EDE : E604                       	JR	Z,HEX4
 5468/2EE0 :                            HEX3:
 5469/2EE0 : 2E31                       	LDB	@R3,RH1		; to PBUFF+2
 5470/2EE2 : 8CC1                       	LDCTLB	RL4,FLAGS
 5471/2EE4 : A930                       	INC	R3		; Next location
 5472/2EE6 : 8CC9                       	LDCTLB	FLAGS,RL4
 5473/2EE8 :                            HEX4:
 5474/2EE8 : 2E39                       	LDB	@R3,RL1		; to PBUFF+3
 5475/2EEA : 8CC1                       	LDCTLB	RL4,FLAGS
 5476/2EEC : A930                       	INC	R3		; PBUFF+4 to zero
 5477/2EEE : 8CC9                       	LDCTLB	FLAGS,RL4
 5478/2EF0 : 8800                       	XORB	RH0,RH0
 5479/2EF2 : 8D83                       	RESFLG	C		; Terminating character
 5480/2EF4 : 2E30                       	LDB	@R3,RH0		; Store zero to terminate
 5481/2EF6 : 8CC1                       	LDCTLB	RL4,FLAGS
 5482/2EF8 : A930                       	INC	R3		; Make sure PBUFF is terminated
 5483/2EFA : 8CC9                       	LDCTLB	FLAGS,RL4
 5484/2EFC : 2E30                       	LDB	@R3,RH0		; Store the double zero there
 5485/2EFE : 97F1                       	POP	R1,@R15		; Get BC back
 5486/2F00 : 2103 814A                  	LD	R3,#PBUFF	; Reset to start of PBUFF
 5487/2F04 : 5E08 1C06                  	JP	STR1		; Convert the PBUFF to a string and return it
 5488/2F08 :                            ;
 5489/2F08 :                            BYT2ASC:
 5490/2F08 : A001                       	LDB	RH1,RH0		; Save original value
 5491/2F0A : 0600 0F0F                  	ANDB	RH0,#0FH	; Strip off upper nybble
 5492/2F0E : 0A00 0A0A                  	CPB	RH0,#0AH	; 0-9?
 5493/2F12 : E702                       	JR	C,ADD30		; If A-F, add 7 more
 5494/2F14 : 0000 0707                  	ADDB	RH0,#07H	; Bring value up to ASCII A-F
 5495/2F18 :                            ADD30:
 5496/2F18 : 0000 3030                  	ADDB	RH0,#'0'	; And make ASCII
 5497/2F1C : A009                       	LDB	RL1,RH0		; Save converted char to C
 5498/2F1E : A010                       	LDB	RH0,RH1		; Retrieve original value
 5499/2F20 : B204                       	RRB	RH0,#1		; and Rotate it right
 5500/2F22 : B204                       	RRB	RH0,#1
 5501/2F24 : B204                       	RRB	RH0,#1
 5502/2F26 : B204                       	RRB	RH0,#1
 5503/2F28 : 0600 0F0F                  	ANDB	RH0,#0FH	; Mask off upper nybble
 5504/2F2C : 0A00 0A0A                  	CPB	RH0,#0AH	; 0-9? < A hex?
 5505/2F30 : E702                       	JR	C,ADD301	; Skip Add 7
 5506/2F32 : 0000 0707                  	ADDB	RH0,#07H	; Bring it up to ASCII A-F
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 93 - 2023/10/12 18時22分27秒


 5507/2F36 :                            ADD301:
 5508/2F36 : 0000 3030                  	ADDB	RH0,#'0'	; And make it full ASCII
 5509/2F3A : A001                       	LDB	RH1,RH0		; Store high order byte
 5510/2F3C : 9E08                       	RET
 5511/2F3E :                            ;
 5512/2F3E :                            ; Convert "&Hnnnn" to FPREG
 5513/2F3E :                            ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
 5514/2F3E :                            ; Char is in A, NC if char is;<=>?@ A-z, CY is set if 0-9
 5515/2F3E :                            HEXTFP:
 5516/2F3E : AD23                       	EX	R3,R2		; Move code string pointer to DE
 5517/2F40 : 2103 0000                  	LD	R3,#0000H	; Zero out the value
 5518/2F44 : 5F00 2F64                  	CALL	GETHEX		; Check the number for valid hex
 5519/2F48 : 5E07 2FA2                  	JP	C,HXERR		; First value wasn't hex, HX error
 5520/2F4C : E803                       	JR	HEXLP1		; Convert first character
 5521/2F4E :                            HEXLP:
 5522/2F4E : 5F00 2F64                  	CALL	GETHEX		; Get second and addtional characters
 5523/2F52 : E71F                       	JR	C,HEXIT		; Exit if not a hex character
 5524/2F54 :                            HEXLP1:
 5525/2F54 : 8133                       	ADD	R3,R3		; Rotate 4 bits to the left
 5526/2F56 : 8133                       	ADD	R3,R3
 5527/2F58 : 8133                       	ADD	R3,R3
 5528/2F5A : 8133                       	ADD	R3,R3
 5529/2F5C : 84B0                       	ORB	RH0,RL3
 5530/2F5E : 8D83                       	RESFLG	C		; Add in D0-D3 into L
 5531/2F60 : A00B                       	LDB	RL3,RH0		; Save new value
 5532/2F62 : E8F5                       	JR	HEXLP		; And continue until all hex characters are in
 5533/2F64 :                            ;
 5534/2F64 :                            GETHEX:
 5535/2F64 : 8CC1                       	LDCTLB	RL4,FLAGS
 5536/2F66 : A920                       	INC	R2
 5537/2F68 : 8CC9                       	LDCTLB	FLAGS,RL4		; Next location
 5538/2F6A : 2020                       	LDB	RH0,@R2		; Load character at pointer
 5539/2F6C : 0A00 2020                  	CPB	RH0,#' '
 5540/2F70 : 5E06 2F64                  	JP	Z,GETHEX	; Skip spaces
 5541/2F74 : 0200 3030                  	SUBB	RH0,#30H		; Get absolute value
 5542/2F78 : 9E07                       	RET	C		; < "0", error
 5543/2F7A : 0A00 0A0A                  	CPB	RH0,#0AH
 5544/2F7E : E705                       	JR	C,NOSUB7	; Is already in the range 0-9
 5545/2F80 : 0200 0707                  	SUBB	RH0,#07H	; Reduce to A-F
 5546/2F84 : 0A00 0A0A                  	CPB	RH0,#0AH	; Value should be $0A-$0F at this point
 5547/2F88 : 9E07                       	RET	C		; CY set if was :
 5548/2F8A :                            				; < = > ? @
 5549/2F8A :                            NOSUB7:
 5550/2F8A : 0A00 1010                  	CPB	RH0,#10H	; > Greater than "F"?
 5551/2F8E : 8D85                       	COMFLG	C
 5552/2F90 : 9E08                       	RET			; CY set if it wasn't valid hex
 5553/2F92 :                            
 5554/2F92 :                            HEXIT:
 5555/2F92 : AD23                       	EX	R3,R2		; Value into DE, Code string into HL
 5556/2F94 : A020                       	LDB	RH0,RH2		; Load DE into AC
 5557/2F96 : A0A9                       	LDB	RL1,RL2		; For prep to
 5558/2F98 : 93F3                       	PUSH	@R15,R3
 5559/2F9A : 5F00 1ADA                  	CALL	ACPASS		; ACPASS to set AC as integer into FPREG
 5560/2F9E : 97F3                       	POP	R3,@R15
 5561/2FA0 : 9E08                       	RET
 5562/2FA2 :                            ;
 5563/2FA2 :                            HXERR:
 5564/2FA2 : CA26                       	LDB	RL2,#HX		; ?HEX Error
 5565/2FA4 : 5E08 04EA                  	JP	ERROR
 5566/2FA8 :                            ;
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 94 - 2023/10/12 18時22分27秒


 5567/2FA8 :                            ; BIN$(NN) Convert integer to a 1-16 char binary string
 5568/2FA8 :                            BIN:
 5569/2FA8 : 5F00 141C                  	CALL	TSTNUM		; Verify it's a number
 5570/2FAC : 5F00 0DCA                  	CALL	DEINT		; Get integer -32768 to 32767
 5571/2FB0 :                            BIN2:
 5572/2FB0 : 93F1                       	PUSH	@R15,R1		; Save contents of BC
 5573/2FB2 : 2103 814A                  	LD	R3,#PBUFF
 5574/2FB6 : C111                       	LDB	RH1,#17		; One higher than max char count
 5575/2FB8 :                            ZEROSUP:
 5576/2FB8 :                            ; Suppress leading zeros
 5577/2FB8 : AA10                       	DECB	RH1,#1		; Max 16 chars
 5578/2FBA : A010                       	LDB	RH0,RH1
 5579/2FBC : 0A00 0101                  	CPB	RH0,#01H
 5580/2FC0 : E604                       	JR	Z,BITOUT	; Always output at least one character
 5581/2FC2 : B2A8                       	RLCB	RL2,#1
 5582/2FC4 : B228                       	RLCB	RH2,#1
 5583/2FC6 : EFF8                       	JR	NC,ZEROSUP
 5584/2FC8 : E802                       	JR	BITOUT2
 5585/2FCA :                            BITOUT:
 5586/2FCA : B2A8                       	RLCB	RL2,#1
 5587/2FCC : B228                       	RLCB	RH2,#1		; Top bit now in carry
 5588/2FCE :                            BITOUT2:
 5589/2FCE : C030                       	LDB	RH0,#'0'	; Char for '0'
 5590/2FD0 : CC00                       	LDB	RL4,#0
 5591/2FD2 : B4C0                       	ADCB	RH0,RL4		; If carry set then '0' --> '1'
 5592/2FD4 : 2E30                       	LDB	@R3,RH0
 5593/2FD6 : 8CC1                       	LDCTLB	RL4,FLAGS
 5594/2FD8 : A930                       	INC	R3
 5595/2FDA : 8CC9                       	LDCTLB	FLAGS,RL4
 5596/2FDC : AA10                       	DECB	RH1,#1
 5597/2FDE : EEF5                       	JR	NZ,BITOUT
 5598/2FE0 : 8800                       	XORB	RH0,RH0
 5599/2FE2 : 8D83                       	RESFLG	C		; Terminating character
 5600/2FE4 : 2E30                       	LDB	@R3,RH0		; Store zero to terminate
 5601/2FE6 : 8CC1                       	LDCTLB	RL4,FLAGS
 5602/2FE8 : A930                       	INC	R3
 5603/2FEA : 8CC9                       	LDCTLB	FLAGS,RL4	; Make sure PBUFF is terminated
 5604/2FEC : 2E30                       	LDB	@R3,RH0		; Store the double zero there
 5605/2FEE : 97F1                       	POP	R1,@R15
 5606/2FF0 : 2103 814A                  	LD	R3,#PBUFF
 5607/2FF4 : 5E08 1C06                  	JP	STR1
 5608/2FF8 :                            ;
 5609/2FF8 :                            ; Convert "&Bnnnn" to FPREG
 5610/2FF8 :                            ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
 5611/2FF8 :                            BINTFP:
 5612/2FF8 : AD23                       	EX	R3,R2		; Move code string pointer to DE
 5613/2FFA : 2103 0000                  	LD	R3,#0000H	; Zero out the value
 5614/2FFE : 5F00 3028                  	CALL	CHKBIN		; Check the number for valid bin
 5615/3002 : 5E07 3046                  	JP	C,BINERR	; First value wasn't bin, HX error
 5616/3006 :                            BINIT:
 5617/3006 : 0200 3030                  	SUBB	RH0,#'0'
 5618/300A : 8133                       	ADD	R3,R3		; Rotate HL left
 5619/300C : 84B0                       	ORB	RH0,RL3
 5620/300E : 8D83                       	RESFLG	C
 5621/3010 : A00B                       	LDB	RL3,RH0
 5622/3012 : 5F00 3028                  	CALL	CHKBIN		; Get second and addtional characters
 5623/3016 : EFF7                       	JR	NC,BINIT	; Process if a bin character
 5624/3018 : AD23                       	EX	R3,R2		; Value into DE, Code string into HL
 5625/301A : A020                       	LDB	RH0,RH2		; Load DE into AC
 5626/301C : A0A9                       	LDB	RL1,RL2		; For prep to
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 95 - 2023/10/12 18時22分27秒


 5627/301E : 93F3                       	PUSH	@R15,R3
 5628/3020 : 5F00 1ADA                  	CALL	ACPASS		; ACPASS to set AC as integer into FPREG
 5629/3024 : 97F3                       	POP	R3,@R15
 5630/3026 : 9E08                       	RET
 5631/3028 :                            ;
 5632/3028 :                            ; Char is in A, NC if char is 0 or 1
 5633/3028 :                            CHKBIN:
 5634/3028 : 8CC1                       	LDCTLB	RL4,FLAGS
 5635/302A : A920                       	INC	R2
 5636/302C : 8CC9                       	LDCTLB	FLAGS,RL4
 5637/302E : 2020                       	LDB	RH0,@R2
 5638/3030 : 0A00 2020                  	CPB	RH0,#' '
 5639/3034 : 5E06 3028                  	JP	Z,CHKBIN	; Skip spaces
 5640/3038 : 0A00 3030                  	CPB	RH0,#'0'	; Set C if < '0'
 5641/303C : 9E07                       	RET	C
 5642/303E : 0A00 3232                  	CPB	RH0,#'2'
 5643/3042 : 8D85                       	COMFLG	C		; Set C if > '1'
 5644/3044 : 9E08                       	RET
 5645/3046 :                            ;
 5646/3046 :                            BINERR:
 5647/3046 : CA28                       	LDB	RL2,#BN		; ?BIN Error
 5648/3048 : 5E08 04EA                  	JP	ERROR
 5649/304C :                            ;
 5650/304C :                            JJUMP1:
 5651/304C : 5E08 0072                  	JP	CSTART		; Go and initialise
 5652/3050 :                            ;
 5653/3050 :                            MONOUT:
 5654/3050 : 5E08 0052                  	JP	CONOUT		; output a char
 5655/3054 :                            ;
 5656/3054 :                            MONITR:
 5657/3054 : 5E08 3000                  	JP	3000H		; Restart (Normally Monitor Start)
 5658/3058 :                            ;
 5659/3058 :                            INITST:
 5660/3058 : C000                       	LDB	RH0,#0		; Clear break flag
 5661/305A : 6E00 80A9                  	LDB	(BRKFLG),RH0
 5662/305E : 5E08 007C                  	JP	INIT
 5663/3062 :                            ;
 5664/3062 :                            TSTBIT:
 5665/3062 : 8C81                       	LDCTLB	RL0,FLAGS
 5666/3064 : 93F0                       	PUSH	@R15,R0		; Save bit mask
 5667/3066 : 8610                       	ANDB	RH0,RH1
 5668/3068 : 8D83                       	RESFLG	C		; Get common bits
 5669/306A : 97F1                       	POP	R1,@R15		; Restore bit mask
 5670/306C : 8A10                       	CPB	RH0,RH1		; Same bit set?
 5671/306E : C000                       	LDB	RH0,#0		; Return 0 in A
 5672/3070 : 9E08                       	RET
 5673/3072 :                            ;
 5674/3072 :                            OUTNCR:
 5675/3072 : 5F00 09E6                  	CALL	OUTC		; Output character in A
 5676/3076 : 5E08 1114                  	JP	PRCRLF		; Output CRLF
 5677/307A :                            ;
 5678/307A :                            	END
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 96 - 2023/10/12 18時22分27秒


  Symbol Table (* = unused):
  --------------------------

 ABPASS :                      1ADC C |  ABS :                         2630 C |
*ACCSUM :                      0D96 C |  ACPASS :                      1ADA C |
 ADD30 :                       2F18 C |  ADD301 :                      2F36 C |
 ADDEXP :                      2570 C |  ADDIG :                       28AC C |
 ADDPHL :                      21AC C |  ALLFOL :                      2000 C |
 ALLFOL1 :                     2002 C |  ANTVLU :                      12A4 C |
*ARCHITECTURE :                                      "aarch64-apple-darwin" - |
*ARET :                        2E2E C |  ARLDSV :                      192C C |
 ARLDSV1 :                     1932 C |  ARREND :                      813A - |
 ARRLP :                       1DB8 C |  ASC :                         1FAA C |
 ASCTFP :                      27FE C |  ASPCS :                       119E C |
 ATN :                         2DCC C |  ATN1 :                        2DD6 C |
 ATN2 :                        2DDC C |  ATN3 :                        2DFA C |
 ATNTAB :                      2E08 C |  ATOH :                        0DF0 C |
 BADINP :                      11CC C |  BAKSTK :                       43E C |
 BAKTMP :                      1F6E C |  BASTXT :                      80BE - |
 BCDEFP :                      267E C |  BFREE :                        140 C |
 BIN :                         2FA8 C | *BIN2 :                        2FB0 C |
 BINERR :                      3046 C |  BINIT :                       3006 C |
 BINTFP :                      2FF8 C |  BITOUT :                      2FCA C |
 BITOUT2 :                     2FCE C |  BKSP :                           8 - |
 BN :                            28 - |  BNORM :                       2262 C |
 BNRMLP :                      226A C |  BRGTC :                         0B - |
 BRK :                         0D10 C |  BRKFLG :                      80A9 - |
 BRKLIN :                      812E - |  BRKMSG :                       438 C |
 BRKRET :                       12C C |  BS :                            10 - |
 BSERR :                       198C C |  BUFFER :                      80C0 - |
 BYT2ASC :                     2F08 C |  BYTSFT :                      248C C |
*CASESENSITIVE :                  0 - |  CFEVAL :                      1872 C |
 CHARTY :                      17E6 C |  CHEKFN :                      1BE4 C |
 CHKBIN :                      3028 C |  CHKLTR :                      0DAA C |
 CHKSTK :                       49C C |  CHKSUM :                      80A6 - |
 CHKSYN :                       9DA C |  CHKTYP :                      1422 C |
 CHR :                         1FCE C |  CLEAR :                       0E34 C |
 CLOTST :                      0A34 C |  CLREG :                        712 C |
 CLRPTR :                       6CC C |  CLS :                         2E36 C |
 CMPFP :                       2714 C |  CMPLG1 :                      16C6 C |
 CMPLOG :                      16C2 C |  CMPNUM :                      26E4 C |
 CMPRES :                      174E C |  CMPSTR :                      171A C |
 CN :                            20 - |  CNVNUM :                      2818 C |
 COLD :                          62 C |  COMMAN :                      809E - |
 COMPL :                       2324 C |  CONCAT :                      1EAE C |
 CONEXP :                      2868 C |  CONIN :                         38 C |
 CONOUT :                        52 C |  CONPOS :                      225C C |
 CONST :                         48 C | *CONSTPI :        3.141592653589793 - |
 CONT :                        0D6C C |  CONTAD :                      8134 - |
 CONVAR :                      15A6 C |  COPY :                          8A C |
 COS :                         2D1E C |  COUNT :                       0B10 C |
 CPDEHL :                       9CE C |  CPYLIT :                       882 C |
 CR :                            0D - |  CRARLP :                      19CC C |
 CREARY :                      1992 C |  CRESTR :                      0FE0 C |
 CRESTR1 :                     0FE2 C |  CRNCLP :                       75E C |
 CRTMST :                      1C44 C |  CRTST :                       1C62 C |
 CRTSTE :                      1C8C C |  CRTSTE1 :                     1C96 C |
 CRUNCH :                       750 C |  CS :                            0C - |
 CSTART :                        72 C |  CTLOFG :                      80A0 - |
 CTRLC :                          3 - |  CTRLG :                          7 - |
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 97 - 2023/10/12 18時22分27秒


 CTRLO :                         0F - |  CTRLQ :                         11 - |
 CTRLR :                         12 - |  CTRLS :                         13 - |
 CTRLU :                         15 - |  CUROPR :                      8124 - |
 CURPOS :                      810A - |  DATA :                        0F48 C |
*DATE :                "2023/10/12" - |  DATFLG :                      810D - |
 DATLIN :                      8128 - |  DATSNR :                       4C8 C |
 DCBCDE :                      278C C |  DDERR :                        4DC C |
 DEEK :                        2E5A C |  DEF :                         1AFA C |
 DEFSIZ :                      19DC C |  DEINT :                       0DCA C |
 DEL :                           7F - |  DELCHR :                       8DE C |
 DEPINT :                      0DC2 C |  DETHL4 :                      26A0 C |
 DETHLB :                      26A2 C |  DIGTXT :                      29DE C |
 DIGTXT1 :                     29EA C |  DIM :                         179A C |
 DIMRET :                      1788 C |  DINPOS :                      0A28 C |
 DIV :                         24A6 C |  DIV1 :                        8055 - |
 DIV10 :                       2496 C |  DIV2 :                        805D - |
 DIV3 :                        8065 - |  DIV4 :                        806B - |
 DIVLP :                       24F2 C |  DIVSUP :                      8054 - |
 DOAGN :                        73A C |  DOCOM :                       1144 C |
 DOCOM1 :                      1156 C |  DODEL :                        8AA C |
 DOEBIT :                      2A6E C |  DOFN :                        1B4A C |
 DOKE :                        2E70 C |  DONULL :                      1120 C |
 DOSPC :                       1192 C |  DOTAB :                       116C C |
 DPOINT :                      2862 C |  DTSTR :                       1C6C C |
 DVBCDE :                      24AA C |  DZ :                            14 - |
 DZERR :                        4D4 C |  ECHDEL :                       8C8 C |
 ECHDEL1 :                      8CA C |  EDIGIT :                      28E6 C |
 ENDBUF :                       892 C |  ENDCON :                      2886 C |
 ENDCON1 :                     2896 C |  ENDDIM :                      1AA0 C |
 ENDINP :                      110C C |  ENDNAM :                      17D6 C |
 ENDPRG :                      0D30 C |  ENFMEM :                       4AA C |
 ENFMEM1 :                      4AC C |  ERRIN :                        516 C |
 ERRIN1 :                       538 C |  ERRLIN :                      8132 - |
 ERRMSG :                       426 C |  ERROR :                        4EA C |
 ERRORS :                       382 C |  ESC :                           1B - |
 EVAL :                        1438 C |  EVAL1 :                       1440 C |
 EVAL2 :                       144C C |  EVAL3 :                       1450 C |
 EVAL4 :                       1462 C |  EVLPAR :                      1582 C |
 EVNOT :                       1762 C |  EXCUTE :                      0C5E C |
 EXP :                         2B82 C |  EXPLP :                       284A C |
 EXPTAB :                      2BE6 C |  EXPTEN :                      2A96 C |
 EXTIG :                       1344 C | *FALSE :                          0 - |
 FANDT :                       138A C |  FC :                             8 - |
 FCERR :                       0DEA C |  FDTLP :                       1356 C |
 FINDEL :                      1A54 C |  FLGDIF :                      2604 C |
 FLGREL :                      2610 C |  FNARG :                       8140 - |
 FNCTAB :                       1C4 C |  FNDARY :                      1938 C |
 FNDARY1 :                     193A C |  FNDELP :                      1A62 C |
 FNDELP1 :                     1A64 C |  FNDEND :                       65A C |
 FNDNUM :                      2160 C |  FNDTOK :                      0AD0 C |
 FNDVAR :                      183E C |  FNDWRD :                       7A4 C |
 FNOFST :                      15C8 C |  FNRGNM :                      813E - |
 FNTHR :                       1858 C |  FNVAL :                       1606 C |
 FOPRND :                      1494 C |  FOR :                         0B50 C |
 FORFLG :                      812A - |  FORFND :                      0B9E C |
 FORSLP :                      0B6C C |  FPADD :                       21C2 C |
 FPBCDE :                      2664 C |  FPEXP :                       8147 - |
 FPINT :                       274A C |  FPINT1 :                      276E C |
 FPINT2 :                      2780 C |  FPINT3 :                      2788 C |
 FPMULT :                      2408 C |  FPREG :                       8144 - |
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 98 - 2023/10/12 18時22分27秒


 FPROND :                      22EE C |  FPSINT :                      0DBA C |
 FPTHL :                       269C C |  FRE :                         1AA6 C |
 FRENUM :                      1AD0 C |  FRMEVL :                      15AA C |
 FRMEVL1 :                     15C4 C | *FULLPMMU :                       1 - |
 GARBGE :                      1D60 C |  GARBLP :                      1D64 C |
 GETCHR :                      0C96 C |  GETCMD :                       550 C |
 GETHEX :                      2F64 C |  GETINP :                      2E30 C |
 GETINT :                      2164 C |  GETLEN :                      1F94 C |
 GETLIN :                       8FA C |  GETLN :                       0DF6 C |
 GETNUM :                      1418 C |  GETNXT :                       7D0 C |
 GETSTR :                      1F34 C |  GETVAR :                      17A8 C |
 GETVAR1 :                     17AC C |  GNXARY :                      1DB6 C |
 GOFUNC :                      1612 C |  GOSUB :                       0EB6 C |
 GOTO :                        0ED0 C |  GOTO1 :                       0EF0 C |
 GOTO2 :                       0EF6 C |  GRBARY :                      1DEE C |
 GRBDON :                      1D0C C |  GRBDON1 :                     1D10 C |
 GRBLP :                       1D78 C |  GSTRCU :                      1F38 C |
 GSTRDE :                      1F40 C |  GSTRHL :                      1F3E C |
*GTFLNM :                      1FB0 C |  GTFNAM :                      17B2 C |
 GTLNLP :                      0DFA C |  GTSIXD :                      2976 C |
 GTVLUS :                      125A C |  HALF :                        2AD8 C |
 HALFPI :                      2D90 C | *HAS64 :                          1 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 HEX :                         2E98 C |  HEX1 :                        2EC2 C |
 HEX2 :                        2ECA C |  HEX3 :                        2EE0 C |
 HEX4 :                        2EE8 C |  HEXIT :                       2F92 C |
 HEXLP :                       2F4E C |  HEXLP1 :                      2F54 C |
 HEXTFP :                      2F3E C |  HX :                            26 - |
 HXERR :                       2FA2 C |  ID :                            16 - |
 IDTEST :                      1BC8 C |  IF :                          103A C |
 IFGO :                        1054 C |  IFJMP :                       0C68 C |
 INCHL :                       2694 C |  INCLEN :                      0A22 C |
 INDFND :                       46E C |  INEWLN :                       5DE C |
 INIT :                          7C C |  INITAB :                       3AC C |
 INITBE :                       426 C |  INITST :                      3058 C |
 INMSG :                        42D C |  INP :                         20FC C |
 INPBIN :                      12EA C |  INPBRK :                      0D28 C |
 INPBRK1 :                     0D2E C |  INPORT :                      8099 - |
 INPSUB :                      8096 - |  INPUT :                       11E6 C |
 INRNG :                       2988 C | *INSUPMODE :                      1 - |
 INT :                         27A4 C |  INTVAR :                       6F2 C |
 INVSGN :                      2636 C |  ITMSEP :                      12D0 C |
*JJUMP1 :                      304C C |  JSTZER :                      2AAC C |
 KILFOR :                      1400 C |  KILIN :                        8F2 C |
 LCRFLG :                      810B - |  LEFT :                        1FE6 C |
 LEN :                         1F8E C |  LET :                         0F74 C |
 LETNUM :                      0FFA C |  LETSTR :                      0FA0 C |
 LF :                            0A - |  LFRGNM :                      20EA C |
 LINEAT :                      80BC - |  LINEIN :                      28FC C |
 LINES :                       2E48 C |  LINESC :                      80A2 - |
 LINESN :                      80A4 - |  LINFND :                       5B6 C |
 LIST :                        0A56 C |  LISTLP :                      0A68 C |
*LISTON :                         1 - |  LOADFP :                      2682 C |
 LOG :                         23A2 C |  LOGTAB :                      2394 C |
 LOKFOR :                       444 C |  LOOPST :                      8126 - |
 LS :                            1C - |  LSTBIN :                      812B - |
 LSTLP2 :                      0AAE C |  LSTLP3 :                      0AB2 C |
 LSTRAM :                      810E - |  LSTRND :                      8092 - |
 LTSTND :                      12FA C |  LWIDTH :                      809D - |
*MACEXP :                         7 - |  MAKINT :                      2168 C |
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 99 - 2023/10/12 18時22分27秒


 MAKNUM :                      29B4 C |  MANLP :                       282A C |
 MATCH :                        834 C |  MEMMSG :                       192 C |
 MID :                         204A C |  MID1 :                        1FF2 C |
 MIDNUM :                      20F2 C |  MINCDE :                      2236 C |
 MINUS :                       158E C |  MKTMST :                      1C40 C |
 MLDBLP :                      27E0 C |  MLDEBC :                      27D2 C |
 MLOOP :                        0AE C |  MLSP10 :                      25C2 C |
 MO :                            24 - | *MOMCPU :                      8002 - |
*MOMCPUNAME :               "Z8002" - |  MONITR :                      3054 C |
 MONOUT :                      3050 C |  MORDT :                       1310 C |
 MORDT1 :                      1340 C |  MORINP :                       908 C |
 MOVBUF :                       618 C |  MOVDIR :                       846 C |
 MOVLP :                        486 C |  MOVSTR :                       480 C |
 MOVUP :                        47C C |  MRPRNT :                      106C C |
*MSIZE :                        0AA C |  MUL8LP :                      244E C |
 MULLN2 :                      23FA C |  MULT :                        2404 C |
 MULT8 :                       243A C |  MULTEN :                      289C C |
 MULVAL :                      8159 - |  MVSTPT :                      0FEC C |
 NEDMOR :                      1254 C |  NEGAFT :                      2AEE C |
 NEMEM :                        134 C | *NESTMAX :                      100 - |
 NEW :                          6CA C |  NEXITM :                      11AE C |
 NEXT :                        139A C |  NEXT1 :                       139E C |
 NEXT2 :                       13A4 C |  NF :                             0 - |
 NFERR :                        4D8 C | *NMIFLG :                      80A8 - |
 NOCHNG :                       828 C |  NOENED :                      2ABA C |
 NOLIN :                       0D50 C |  NOMADD :                      246A C |
 NOMLAD :                      27F6 C |  NOPMPT :                      120C C |
 NOPMPT1 :                     120E C |  NORMAL :                      2296 C |
 NOSPC :                        818 C |  NOSUB7 :                      2F8A C |
 NOSWAP :                      21F4 C |  NOTAMP :                      154A C |
 NOTSTR :                      17FE C |  NOXOR :                       2136 C |
 NSCFOR :                      1816 C |  NULFLG :                      809F - |
 NULL :                        0D8A C |  NULLP :                       112C C |
 NULLS :                       809C - |  NUMASC :                      291A C |
 NXTARY :                      195C C |  NXTBYT :                       7F2 C |
 NXTCHR :                       874 C |  NXTDAT :                      813C - |
 NXTDTA :                      0F46 C |  NXTITM :                      1246 C |
 NXTITM1 :                     124A C |  NXTOPR :                      8130 - |
 NXTSTL :                      0F50 C |  NXTSTT :                      0F56 C |
 OD :                             6 - |  OKMSG :                        432 C |
 OM :                            0C - |  OMERR :                        4C2 C |
 ON :                          1006 C |  ONGO :                        1022 C |
 ONGOLP :                      1024 C |  ONJMP :                       0C6A C |
 OPNPAR :                      1432 C |  OPRND :                       150C C |
 OS :                            1A - |  OTKLN :                        8EE C |
 OTPORT :                      8051 - |  OUTC :                         9E6 C |
 OUTEXP :                      2A94 C |  OUTIT :                        9BC C |
 OUTNBS :                       9C4 C |  OUTNCR :                      3072 C |
 OUTSUB :                      804E - |  OUTWRD :                      0AE6 C |
 OV :                            0A - |  OVERR :                        4E4 C |
 OVTST1 :                      25A8 C |  OVTST2 :                      25B4 C |
 OVTST3 :                      25B8 C |  PADD :                        28DE C |
*PADDING :                        1 - |  PAND :                        1652 C |
 PAND1 :                       1656 C |  PASSA :                       1AF0 C |
 PBUFF :                       814A - |  PEEK :                        2184 C |
 PEND :                        0D20 C |  PEND1 :                       0D22 C |
 PHLTFP :                      2660 C |  PLUCDE :                      2304 C |
 PNORM :                       22A6 C |  POINT :                       80AE - |
 POKE :                        218E C |  POPAF :                       1D44 C |
 POPHL :                       1F6A C |  POPHRT :                      2488 C |
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 100 - 2023/10/12 18時22分27秒


 POPNOK :                       53A C |  POR :                         164A C |
 POR1 :                        1698 C |  POS :                         1AEC C |
 POSINT :                      0DBE C |  POUT :                        210C C |
 POWER :                       2B02 C |  POWER1 :                      2B1C C |
 POWER2 :                      2B52 C |  POWER21 :                     2B6C C |
 POWER22 :                     2B72 C |  POWERS :                      2ADC C |
 PRCRLF :                      1114 C |  PRINT :                       1076 C |
 PRITAB :                       366 C |  PRNTHL :                      2908 C |
 PRNTLP :                      107A C |  PRNTNB :                      10EA C |
 PRNTOK :                       53C C |  PRNTST :                      10F2 C |
 PRNTST1 :                     10F8 C |  PRNUMS :                      1CD4 C |
 PROCES :                       930 C |  PROCES1 :                      944 C |
 PROGND :                      8136 - |  PROGST :                      815C - |
 PROMPT :                       740 C |  PRS :                         1CDA C |
 PRS1 :                        1CDE C |  PRSLP :                       1CE8 C |
 PRSLP1 :                      1CFC C |  PSET :                        80B2 - |
 PSUB :                        21BA C |  PTRLP :                        638 C |
 PUTBUF :                       998 C |  PUTCTL :                       9A0 C |
 PUTFID :                      0C10 C |  QTSTLP :                      1C70 C |
 QTSTR :                       1C68 C |  QUARTR :                      2D94 C |
*RAMSIZ :                      1000 - | *RAMTOP :                      8000 - |
 RD :                            12 - |  READ :                        1238 C |
 READFG :                      812C - |  REDO :                        11B8 C |
*RELAXED :                        0 - |  REM :                         0F4C C |
 REM1 :                        0F4E C |  RESDIV :                      2516 C |
 RESDIV1 :                     251A C |  RESEED :                      2D04 C |
 RESET :                       80B6 - |  RESTNL :                      0CD4 C |
 RESTOR :                      0CB4 C |  RESZER :                      228C C |
 RETADR :                      18CE C |  RETINT :                      2616 C |
 RETLIN :                      0F3E C |  RETNAD :                       83E C |
 RETNUL :                      18D4 C |  RETNUM :                      159E C |
 RETREL :                      25FC C |  RETREL1 :                     2602 C |
 RETURN :                      0F08 C |  RG :                             4 - |
 RIGHT :                       203A C |  RIGHT1 :                      1FEE C |
 RINPUT :                      80AA - |  RLTLP :                       1466 C |
 RND :                         2C5C C |  RND1 :                        2CC0 C |
 RND2 :                        2CF8 C |  RNDTAB :                      2D12 C |
 RNGTST :                      2AC0 C | *ROMTOP :                         0 - |
 RONDB :                       22C8 C |  RONDB1 :                      22D6 C |
 RONDUP :                      22C6 C |  ROUND :                       21A8 C |
 RSCALE :                      28D6 C |  RSLNBK :                      0B44 C |
 RSTSTR :                      2070 C |  RUN :                         0EA6 C |
 RUNCNT :                      0C16 C |  RUNFST :                       6E8 C |
 RUNLIN :                      0ECE C |  SAVEXP :                      2290 C |
 SAVSTP :                      0BFC C |  SAVSTR :                      1C14 C |
 SBSCPT :                      18E8 C |  SCALE :                       2350 C |
 SCALLP :                      2352 C |  SCALMI :                      286E C |
 SCALMI1 :                     2874 C |  SCALPL :                      289A C |
 SCCAC :                          5 - |  SCCAD :                          7 - |
 SCCINIT :                       10 C |  SCCTAB :                        22 C |
 SCCTABE :                       37 C |  SCNEND :                      1E5A C |
 SCPTLP :                      18F2 C |  SEARCH :                       7CC C |
 SEED :                        806E - |  SETIO :                       214A C |
 SETLIN :                      0B02 C |  SETLIT :                       866 C |
 SETPTR :                       62C C |  SETTOP :                       0D2 C |
 SFTPRG :                       5C2 C |  SGN :                         260C C |
 SGNEXP :                      1626 C |  SGNRES :                      8148 - |
 SHRITE :                      2366 C |  SHRLP :                       236C C |
 SHRT1 :                       2376 C |  SIGNON :                       14F C |
 SIGNS :                       26B6 C |  SIN :                         2D26 C |
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 101 - 2023/10/12 18時22分27秒


 SIN1 :                        2D6C C |  SIN11 :                       2D76 C |
 SIN12 :                       2D88 C |  SINTAB :                      2D98 C |
 SIXDIG :                      2952 C |  SMPVAR :                      1D90 C |
 SMSER1 :                      2C1E C |  SN :                             2 - |
 SNERR :                        4D0 C |  SPCFST :                      2930 C |
 SPCFST1 :                     2946 C |  SPCLP :                       11A4 C |
 SQR :                         2AF6 C |  SRCHLN :                       676 C |
 SRCHLP :                       67A C |  SSTSA :                       1F04 C |
 ST :                            1E - |  STACK :                       80C6 - |
 STAKFP :                      2646 C |  STALL :                       0CFE C |
 START :                          6 C |  STARTB :                        6A C |
 STKTHS :                      14E0 C |  STLOOK :                      81C0 - |
 STOP :                        0D16 C |  STORED :                      0E70 C |
 STPOOL :                      1E02 C |  STR :                         1BFE C |
 STR1 :                        1C06 C |  STRADD :                      1E0A C |
 STRBOT :                      8122 - |  STRENT :                      12D8 C |
 STRSPC :                      80BA - |  STTLIN :                      10FE C |
 SUBCDE :                      21BE C |  SUBPHL :                      21B4 C |
 SUMLP :                       2C30 C |  SUMLP1 :                      2C34 C |
 SUMSER :                      2C08 C |  SUPTLZ :                      2A54 C |
 SVNAM2 :                      17D4 C |  SVSTAD :                      1C52 C |
 TAN :                         2DAE C |  TESTOS :                      1D4A C |
 TESTR :                       1D06 C |
*TIME :               "18\-026\-103\-12622\-027\-120\-12227\-025\-089\-110" - |
 TM :                            18 - |  TMERR :                        4E8 C |
 TMPSTR :                      811E - |  TMSTPL :                      8112 - |
 TMSTPT :                      8110 - |  TOPOOL :                      1FE0 C |
 TOSTRA :                      1F1E C | *TRUE :                           1 - |
 TRYAGN :                      29F8 C |  TSALP :                       1F20 C |
 TSTACK :                      80ED - | *TSTBIT :                      3062 C |
 TSTBRK :                      0CE2 C |  TSTNUM :                      141C C |
 TSTOPL :                      1CA6 C |  TSTRED :                      16A6 C |
 TSTREM :                       86A C |  TSTSGN :                      25E8 C |
 TSTSTR :                      1420 C |  TTYLIN :                       8FA C |
 TYPE :                        810C - |  UF :                            22 - |
 UFERR :                        4E0 C |  UL :                            0E - |
 ULERR :                       0F02 C |  UNITY :                       2390 C |
 UPDATA :                      0CDA C |  USR :                         804A - |
 VAL :                         209A C |  VAL1 :                        20D0 C |
 VAL2 :                        20DE C |  VAL3 :                        20E2 C |
 VAREND :                      8138 - | *VERSION :                     142F - |
 WAIT :                        2114 C |  WAITLP :                      2138 C |
*WARM :                          66 C |  WARMST :                       128 C |
 WIDTH :                       2E3C C |  WORDS :                        1FC C |
 WORDTB :                       31C C |  WR11_V :                        50 - |
 WR3_V :                        0C0 - |  WR4_V :                         44 - |
 WR5_V :                        0E2 - |  WRKSPC :                      8046 - |
 XXXXX :                        13C C |  ZDATA :                         83 - |
*ZDIV :                         0AF - |  ZEND :                          80 - |
 ZEQUAL :                       0B4 - |  ZERARY :                      1A18 C |
 ZERBYT :                       431 - |  ZEROLP :                      18AE C |
 ZEROSUP :                     2FB8 C |  ZFN :                          0A7 - |
 ZFOR :                          81 - |  ZGOSUB :                        8C - |
 ZGOTO :                         88 - |  ZGTR :                         0B3 - |
 ZLEFT :                        0CF - |  ZLTH :                         0B5 - |
 ZMINUS :                       0AD - |  ZNEW :                         0A4 - |
 ZNOT :                         0AA - |  ZONELP :                      115A C |
 ZOR :                          0B2 - |  ZPLUS :                        0AC - |
*ZPOINT :                       0C7 - |  ZPRINT :                        9E - |
 ZREM :                          8E - |  ZSGN :                         0B6 - |
 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 102 - 2023/10/12 18時22分27秒


 ZSPC :                         0A8 - |  ZSTEP :                        0AB - |
 ZTAB :                         0A5 - |  ZTHEN :                        0A9 - |
*ZTIMES :                       0AE - |  ZTO :                          0A6 - |

    717 symbols
     35 unused symbols

 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 103 - 2023/10/12 18時22分27秒


  Defined Functions:
  ------------------

HIGH                                  | LOW                                  

 AS V1.42 Beta [Bld 250] - Source File z8002bas.asm - Page 104 - 2023/10/12 18時22分27秒


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.03 seconds assembly time

   5679 lines source file
      2 passes
      0 errors
      0 warnings
